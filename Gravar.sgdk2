<?xml version="1.0" standalone="yes"?>
<ProjectDataset>
  <xs:schema id="ProjectDataset" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" xmlns:msprop="urn:schemas-microsoft-com:xml-msprop">
    <xs:element name="ProjectDataset" msdata:IsDataSet="true" msdata:UseCurrentLocale="true" msprop:SchemaVersion="1">
      <xs:complexType>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="GraphicSheet">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Image" type="xs:base64Binary" minOccurs="0" msdata:Ordinal="6" />
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
              <xs:attribute name="Folder" type="xs:string" />
              <xs:attribute name="Columns" type="xs:short" default="16" />
              <xs:attribute name="Rows" type="xs:short" default="8" />
              <xs:attribute name="CellWidth" msdata:Caption="Cell Width" type="xs:short" default="32" />
              <xs:attribute name="CellHeight" msdata:Caption="Cell Height" type="xs:short" default="32" />
            </xs:complexType>
          </xs:element>
          <xs:element name="Frameset">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Frame" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:attribute name="FrameValue" type="xs:int" use="required" />
                    <xs:attribute name="GraphicSheet" type="xs:string" use="required" />
                    <xs:attribute name="CellIndex" type="xs:short" use="required" />
                    <xs:attribute name="m11" type="xs:float" default="1" />
                    <xs:attribute name="m12" type="xs:float" default="0" />
                    <xs:attribute name="m21" type="xs:float" default="0" />
                    <xs:attribute name="m22" type="xs:float" default="1" />
                    <xs:attribute name="dx" type="xs:float" default="0" />
                    <xs:attribute name="dy" type="xs:float" default="0" />
                    <xs:attribute name="Name" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="color" type="xs:int" default="-1" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
              <xs:attribute name="Folder" type="xs:string" />
            </xs:complexType>
          </xs:element>
          <xs:element name="Tileset">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Tile" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="TileFrame" minOccurs="0" maxOccurs="unbounded">
                        <xs:complexType>
                          <xs:attribute name="Sequence" type="xs:short" use="required" />
                          <xs:attribute name="FrameValue" type="xs:int" />
                          <xs:attribute name="Duration" type="xs:short" />
                          <xs:attribute name="Name" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="TileValue" type="xs:int" msdata:AllowDBNull="false" use="prohibited" />
                        </xs:complexType>
                      </xs:element>
                    </xs:sequence>
                    <xs:attribute name="TileValue" type="xs:int" use="required" />
                    <xs:attribute name="Counter" type="xs:string" />
                    <xs:attribute name="Name" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
              <xs:attribute name="Frameset" type="xs:string" />
              <xs:attribute name="TileWidth" type="xs:short" use="required" />
              <xs:attribute name="TileHeight" type="xs:short" use="required" />
            </xs:complexType>
          </xs:element>
          <xs:element name="Counter">
            <xs:complexType>
              <xs:attribute name="Name" type="xs:string" use="required" />
              <xs:attribute name="Folder" type="xs:string" />
              <xs:attribute name="Value" type="xs:int" />
              <xs:attribute name="Max" type="xs:int" />
              <xs:attribute name="Min" type="xs:int" msdata:DefaultValue="0" use="required" />
            </xs:complexType>
          </xs:element>
          <xs:element name="Map">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Layer" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="Tiles" type="xs:base64Binary" minOccurs="0" msdata:Ordinal="14" />
                      <xs:element name="Sprite" minOccurs="0" maxOccurs="unbounded">
                        <xs:complexType>
                          <xs:sequence>
                            <xs:element name="ParameterValue" minOccurs="0" maxOccurs="unbounded">
                              <xs:complexType>
                                <xs:attribute name="LayerName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="SpriteName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="ParameterName" type="xs:string" use="required" />
                                <xs:attribute name="Value" type="xs:int" />
                                <xs:attribute name="DefinitionName" type="xs:string" use="prohibited" />
                                <xs:attribute name="MapName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                              </xs:complexType>
                            </xs:element>
                          </xs:sequence>
                          <xs:attribute name="LayerName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="Name" type="xs:string" use="required" />
                          <xs:attribute name="DefinitionName" type="xs:string" use="required" />
                          <xs:attribute name="StateName" type="xs:string" />
                          <xs:attribute name="CurrentFrame" type="xs:short" />
                          <xs:attribute name="X" type="xs:int" />
                          <xs:attribute name="Y" type="xs:int" />
                          <xs:attribute name="DX" type="xs:float" />
                          <xs:attribute name="DY" type="xs:float" />
                          <xs:attribute name="MapName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="Priority" type="xs:int" />
                          <xs:attribute name="Active" type="xs:boolean" default="true" />
                          <xs:attribute name="Solidity" type="xs:string" />
                          <xs:attribute name="Color" type="xs:int" default="-1" />
                          <xs:attribute name="LightConstantFalloff" type="xs:float" default="0" />
                          <xs:attribute name="LightLinearFalloff" type="xs:float" default="1" />
                          <xs:attribute name="LightQuadraticFalloff" type="xs:float" default="0" />
                          <xs:attribute name="LightAimX" type="xs:float" default="0" />
                          <xs:attribute name="LightAimY" type="xs:float" default="1" />
                          <xs:attribute name="LightAimZ" type="xs:float" default="0" />
                          <xs:attribute name="LightZ" type="xs:float" default="0" />
                          <xs:attribute name="LightApertureFocus" type="xs:float" default="0" />
                          <xs:attribute name="LightApertureSoftness" type="xs:float" default="0" />
                        </xs:complexType>
                      </xs:element>
                      <xs:element name="SpritePlan" minOccurs="0" maxOccurs="unbounded">
                        <xs:complexType>
                          <xs:sequence>
                            <xs:element name="BaseClass" type="xs:string" default="PlanBase" msdata:Ordinal="4" />
                            <xs:element name="Coordinate" minOccurs="0" maxOccurs="unbounded">
                              <xs:complexType>
                                <xs:attribute name="MapName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="LayerName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="PlanName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="Sequence" type="xs:short" use="required" />
                                <xs:attribute name="X" type="xs:int" />
                                <xs:attribute name="Y" type="xs:int" />
                                <xs:attribute name="Weight" type="xs:int" />
                              </xs:complexType>
                            </xs:element>
                            <xs:element name="PlanRule" minOccurs="0" maxOccurs="unbounded">
                              <xs:complexType>
                                <xs:attribute name="MapName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="LayerName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="PlanName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="Name" type="xs:string" use="required" />
                                <xs:attribute name="Sequence" type="xs:int" use="required" />
                                <xs:attribute name="Type" type="xs:string" use="required" />
                                <xs:attribute name="Function" type="xs:string" use="required" />
                                <xs:attribute name="Parameter1" type="xs:string" />
                                <xs:attribute name="Parameter2" type="xs:string" />
                                <xs:attribute name="Parameter3" type="xs:string" />
                                <xs:attribute name="ResultParameter" type="xs:string" />
                                <xs:attribute name="EndIf" type="xs:boolean" default="false" />
                                <xs:attribute name="Suspended" type="xs:boolean" default="false" />
                              </xs:complexType>
                            </xs:element>
                            <xs:element name="PlanParameterValue" minOccurs="0" maxOccurs="unbounded">
                              <xs:complexType>
                                <xs:attribute name="MapName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="LayerName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="PlanName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="Name" type="xs:string" use="required" />
                                <xs:attribute name="Value" type="xs:string" />
                              </xs:complexType>
                            </xs:element>
                          </xs:sequence>
                          <xs:attribute name="MapName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="LayerName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="Name" type="xs:string" use="required" />
                          <xs:attribute name="Priority" type="xs:int" />
                        </xs:complexType>
                      </xs:element>
                    </xs:sequence>
                    <xs:attribute name="Name" type="xs:string" use="required" />
                    <xs:attribute name="Width" type="xs:int" use="required" />
                    <xs:attribute name="Height" type="xs:int" use="required" />
                    <xs:attribute name="Tileset" type="xs:string" />
                    <xs:attribute name="BytesPerTile" type="xs:unsignedByte" use="required" />
                    <xs:attribute name="MapName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="OffsetX" type="xs:int" default="0" />
                    <xs:attribute name="OffsetY" type="xs:int" default="0" />
                    <xs:attribute name="ScrollRateX" type="xs:float" default="1" />
                    <xs:attribute name="ScrollRateY" type="xs:float" default="1" />
                    <xs:attribute name="ZIndex" type="xs:int" />
                    <xs:attribute name="Priority" type="xs:int" default="0" />
                    <xs:attribute name="VirtualWidth" type="xs:int" default="0" />
                    <xs:attribute name="VirtualHeight" type="xs:int" default="0" />
                    <xs:attribute name="Lighting" type="xs:string" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
              <xs:attribute name="Folder" type="xs:string" />
              <xs:attribute name="ScrollMarginLeft" type="xs:short" use="required" />
              <xs:attribute name="ScrollMarginTop" type="xs:short" use="required" />
              <xs:attribute name="ScrollMarginRight" type="xs:short" use="required" />
              <xs:attribute name="ScrollMarginBottom" type="xs:short" use="required" />
              <xs:attribute name="ScrollWidth" msdata:Caption="Scrollable pixel width of the map independent of its layers" type="xs:int" />
              <xs:attribute name="ScrollHeight" msdata:Caption="Scrollable pixel height of the map independent of its layers" type="xs:int" />
              <xs:attribute name="ViewLeft" type="xs:short" />
              <xs:attribute name="ViewTop" type="xs:short" />
              <xs:attribute name="ViewWidth" type="xs:short" />
              <xs:attribute name="ViewHeight" type="xs:short" />
            </xs:complexType>
          </xs:element>
          <xs:element name="SpriteDefinition">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="SpriteRule" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:attribute name="DefinitionName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="Name" type="xs:string" use="required" />
                    <xs:attribute name="Sequence" type="xs:int" use="required" />
                    <xs:attribute name="Type" type="xs:string" use="required" />
                    <xs:attribute name="Function" type="xs:string" use="required" />
                    <xs:attribute name="Parameter1" type="xs:string" />
                    <xs:attribute name="Parameter2" type="xs:string" />
                    <xs:attribute name="Parameter3" type="xs:string" />
                    <xs:attribute name="ResultParameter" type="xs:string" />
                    <xs:attribute name="EndIf" type="xs:boolean" default="false" />
                    <xs:attribute name="Suspended" type="xs:boolean" default="false" />
                  </xs:complexType>
                </xs:element>
                <xs:element name="SpriteParameter" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:attribute name="DefinitionName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="Name" type="xs:string" use="required" />
                  </xs:complexType>
                </xs:element>
                <xs:element name="SpriteState" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="SpriteFrame" minOccurs="0" maxOccurs="unbounded">
                        <xs:complexType>
                          <xs:attribute name="DefinitionName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="StateName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="Sequence" type="xs:short" use="required" />
                          <xs:attribute name="FrameValue" type="xs:int" />
                          <xs:attribute name="Duration" type="xs:short" />
                          <xs:attribute name="MaskAlphaLevel" type="xs:unsignedByte" default="0" />
                        </xs:complexType>
                      </xs:element>
                    </xs:sequence>
                    <xs:attribute name="DefinitionName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="Name" type="xs:string" use="required" />
                    <xs:attribute name="FramesetName" type="xs:string" use="required" />
                    <xs:attribute name="SolidWidth" type="xs:short" use="required" />
                    <xs:attribute name="SolidHeight" type="xs:short" use="required" />
                    <xs:attribute name="Sequence" type="xs:short" use="required" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
              <xs:attribute name="Folder" type="xs:string" />
              <xs:attribute name="BaseClass" type="xs:string" default="SpriteBase" />
            </xs:complexType>
          </xs:element>
          <xs:element name="SpriteCategory">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="SpriteCategorySprite" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:attribute name="CategoryName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="DefinitionName" type="xs:string" use="required" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
            </xs:complexType>
          </xs:element>
          <xs:element name="Solidity">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="SolidityShape" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:attribute name="SolidityName" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                    <xs:attribute name="CategoryName" type="xs:string" use="required" />
                    <xs:attribute name="ShapeName" type="xs:string" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
            </xs:complexType>
          </xs:element>
          <xs:element name="SourceCode">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Text" type="xs:string" minOccurs="0" msdata:Ordinal="4" />
                <xs:element name="CustomObjectData" type="xs:base64Binary" minOccurs="0" msdata:Ordinal="5" />
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
              <xs:attribute name="Folder" type="xs:string" />
              <xs:attribute name="IsCustomObject" type="xs:boolean" default="false" />
              <xs:attribute name="DependsOn" type="xs:string" />
            </xs:complexType>
          </xs:element>
          <xs:element name="Project">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="Comments" type="xs:string" default="" msdata:Ordinal="8" />
              </xs:sequence>
              <xs:attribute name="DisplayMode" type="xs:string" use="required" />
              <xs:attribute name="Windowed" type="xs:boolean" use="required" />
              <xs:attribute name="TitleText" type="xs:string" />
              <xs:attribute name="StartMap" type="xs:string" />
              <xs:attribute name="OverlayMap" type="xs:string" />
              <xs:attribute name="MaxPlayers" type="xs:unsignedByte" default="1" />
              <xs:attribute name="MaxViews" type="xs:unsignedByte" default="1" />
              <xs:attribute name="Credits" type="xs:string" />
            </xs:complexType>
          </xs:element>
          <xs:element name="TileCategory">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="CategorizedTileset" minOccurs="0" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="CategoryTile" minOccurs="0" maxOccurs="unbounded">
                        <xs:complexType>
                          <xs:sequence>
                            <xs:element name="CategoryFrame" minOccurs="0" maxOccurs="unbounded">
                              <xs:complexType>
                                <xs:attribute name="Tileset" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="Category" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="TileValue" type="xs:int" msdata:AllowDBNull="false" use="prohibited" />
                                <xs:attribute name="Frame" type="xs:short" use="required" />
                              </xs:complexType>
                            </xs:element>
                          </xs:sequence>
                          <xs:attribute name="Tileset" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="Category" type="xs:string" msdata:AllowDBNull="false" use="prohibited" />
                          <xs:attribute name="TileValue" type="xs:int" use="required" />
                        </xs:complexType>
                      </xs:element>
                    </xs:sequence>
                    <xs:attribute name="Tileset" type="xs:string" use="required" />
                    <xs:attribute name="Name" type="xs:string" use="required" />
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
              <xs:attribute name="Name" type="xs:string" use="required" />
            </xs:complexType>
          </xs:element>
        </xs:choice>
      </xs:complexType>
      <xs:unique name="GraphicSheetKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//GraphicSheet" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="FrameKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Frame" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@FrameValue" />
      </xs:unique>
      <xs:unique name="FramesetKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Frameset" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="TileFrameKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//TileFrame" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@TileValue" />
        <xs:field xpath="@Sequence" />
      </xs:unique>
      <xs:unique name="TileKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Tile" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@TileValue" />
      </xs:unique>
      <xs:unique name="TilesetKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Tileset" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="CounterKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Counter" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="ParameterValueKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//ParameterValue" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@SpriteName" />
        <xs:field xpath="@ParameterName" />
        <xs:field xpath="@MapName" />
      </xs:unique>
      <xs:unique name="SpriteKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Sprite" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@MapName" />
      </xs:unique>
      <xs:unique name="SpriteKeyWithDefinition">
        <xs:selector xpath=".//Sprite" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@MapName" />
      </xs:unique>
      <xs:unique name="CoordinateKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Coordinate" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@PlanName" />
        <xs:field xpath="@Sequence" />
      </xs:unique>
      <xs:unique name="PlanRuleKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//PlanRule" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@PlanName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="PlanParameterValueKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//PlanParameterValue" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@PlanName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SpritePlanKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpritePlan" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="LayerKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Layer" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="MapKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Map" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SpriteRuleKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteRule" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SpriteParameterKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteParameter" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SpriteFrameKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteFrame" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@StateName" />
        <xs:field xpath="@Sequence" />
      </xs:unique>
      <xs:unique name="SpriteStateKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteState" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SpriteStateFramesetKey">
        <xs:selector xpath=".//SpriteState" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@FramesetName" />
      </xs:unique>
      <xs:unique name="SpriteDefinitionKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteDefinition" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SpriteCategorySpriteKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteCategorySprite" />
        <xs:field xpath="@CategoryName" />
        <xs:field xpath="@DefinitionName" />
      </xs:unique>
      <xs:unique name="SpriteCategoryKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SpriteCategory" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SolidityShapeKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SolidityShape" />
        <xs:field xpath="@SolidityName" />
        <xs:field xpath="@CategoryName" />
      </xs:unique>
      <xs:unique name="SolidityKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//Solidity" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="SourceCodeKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//SourceCode" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="CategoryFrameKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//CategoryFrame" />
        <xs:field xpath="@Tileset" />
        <xs:field xpath="@Category" />
        <xs:field xpath="@TileValue" />
        <xs:field xpath="@Frame" />
      </xs:unique>
      <xs:unique name="CategoryTileKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//CategoryTile" />
        <xs:field xpath="@Tileset" />
        <xs:field xpath="@Category" />
        <xs:field xpath="@TileValue" />
      </xs:unique>
      <xs:unique name="CategorizedTilesetKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//CategorizedTileset" />
        <xs:field xpath="@Tileset" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:unique name="CategoryKey" msdata:PrimaryKey="true">
        <xs:selector xpath=".//TileCategory" />
        <xs:field xpath="@Name" />
      </xs:unique>
      <xs:keyref name="TilesetCategory" refer="TilesetKey">
        <xs:selector xpath=".//CategorizedTileset" />
        <xs:field xpath="@Tileset" />
      </xs:keyref>
      <xs:keyref name="TileCategoryCategorizedTileset" refer="CategoryKey" msdata:IsNested="true">
        <xs:selector xpath=".//CategorizedTileset" />
        <xs:field xpath="@Name" />
      </xs:keyref>
      <xs:keyref name="CategoryCategoryTile" refer="CategorizedTilesetKey" msdata:IsNested="true">
        <xs:selector xpath=".//CategoryTile" />
        <xs:field xpath="@Tileset" />
        <xs:field xpath="@Category" />
      </xs:keyref>
      <xs:keyref name="CategoryTileCategoryFrame" refer="CategoryTileKey" msdata:IsNested="true">
        <xs:selector xpath=".//CategoryFrame" />
        <xs:field xpath="@Tileset" />
        <xs:field xpath="@Category" />
        <xs:field xpath="@TileValue" />
      </xs:keyref>
      <xs:keyref name="MapProject" refer="MapKey" msdata:ConstraintOnly="true" msdata:DeleteRule="SetNull">
        <xs:selector xpath=".//Project" />
        <xs:field xpath="@StartMap" />
      </xs:keyref>
      <xs:keyref name="CategorySolidityShape" refer="CategoryKey">
        <xs:selector xpath=".//SolidityShape" />
        <xs:field xpath="@CategoryName" />
      </xs:keyref>
      <xs:keyref name="SoliditySolidityShape" refer="SolidityKey" msdata:IsNested="true">
        <xs:selector xpath=".//SolidityShape" />
        <xs:field xpath="@SolidityName" />
      </xs:keyref>
      <xs:keyref name="SpriteDefinitionCategory" refer="SpriteDefinitionKey">
        <xs:selector xpath=".//SpriteCategorySprite" />
        <xs:field xpath="@DefinitionName" />
      </xs:keyref>
      <xs:keyref name="SpriteCategorySpriteCategorySprite" refer="SpriteCategoryKey" msdata:IsNested="true">
        <xs:selector xpath=".//SpriteCategorySprite" />
        <xs:field xpath="@CategoryName" />
      </xs:keyref>
      <xs:keyref name="FramesetSpriteState" refer="FramesetKey">
        <xs:selector xpath=".//SpriteState" />
        <xs:field xpath="@FramesetName" />
      </xs:keyref>
      <xs:keyref name="SpriteDefinitionState" refer="SpriteDefinitionKey" msdata:IsNested="true">
        <xs:selector xpath=".//SpriteState" />
        <xs:field xpath="@DefinitionName" />
      </xs:keyref>
      <xs:keyref name="SpriteStateFrame" refer="SpriteStateKey" msdata:IsNested="true">
        <xs:selector xpath=".//SpriteFrame" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@StateName" />
      </xs:keyref>
      <xs:keyref name="SpriteDefinitionSpriteParameter" refer="SpriteDefinitionKey" msdata:IsNested="true">
        <xs:selector xpath=".//SpriteParameter" />
        <xs:field xpath="@DefinitionName" />
      </xs:keyref>
      <xs:keyref name="SpriteDefinitionSpriteRule" refer="SpriteDefinitionKey" msdata:IsNested="true">
        <xs:selector xpath=".//SpriteRule" />
        <xs:field xpath="@DefinitionName" />
      </xs:keyref>
      <xs:keyref name="TilesetLayer" refer="TilesetKey">
        <xs:selector xpath=".//Layer" />
        <xs:field xpath="@Tileset" />
      </xs:keyref>
      <xs:keyref name="MapLayer" refer="MapKey" msdata:IsNested="true">
        <xs:selector xpath=".//Layer" />
        <xs:field xpath="@MapName" />
      </xs:keyref>
      <xs:keyref name="LayerSpritePlan" refer="LayerKey" msdata:IsNested="true">
        <xs:selector xpath=".//SpritePlan" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
      </xs:keyref>
      <xs:keyref name="SpritePlanPlanParameterValue" refer="SpritePlanKey" msdata:IsNested="true">
        <xs:selector xpath=".//PlanParameterValue" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@PlanName" />
      </xs:keyref>
      <xs:keyref name="SpritePlanPlanRule" refer="SpritePlanKey" msdata:IsNested="true">
        <xs:selector xpath=".//PlanRule" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@PlanName" />
      </xs:keyref>
      <xs:keyref name="SpritePlanCoordinate" refer="SpritePlanKey" msdata:IsNested="true">
        <xs:selector xpath=".//Coordinate" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@PlanName" />
      </xs:keyref>
      <xs:keyref name="SpriteDefinitionSprite" refer="SpriteStateKey">
        <xs:selector xpath=".//Sprite" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@StateName" />
      </xs:keyref>
      <xs:keyref name="LayerSprite" refer="LayerKey" msdata:IsNested="true">
        <xs:selector xpath=".//Sprite" />
        <xs:field xpath="@MapName" />
        <xs:field xpath="@LayerName" />
      </xs:keyref>
      <xs:keyref name="SpriteParameterParameterValue" refer="SpriteParameterKey">
        <xs:selector xpath=".//ParameterValue" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@ParameterName" />
      </xs:keyref>
      <xs:keyref name="SpriteParameterValue" refer="SpriteKeyWithDefinition" msdata:IsNested="true">
        <xs:selector xpath=".//ParameterValue" />
        <xs:field xpath="@DefinitionName" />
        <xs:field xpath="@LayerName" />
        <xs:field xpath="@SpriteName" />
        <xs:field xpath="@MapName" />
      </xs:keyref>
      <xs:keyref name="FramesetTileset" refer="FramesetKey">
        <xs:selector xpath=".//Tileset" />
        <xs:field xpath="@Frameset" />
      </xs:keyref>
      <xs:keyref name="CounterTile" refer="CounterKey" msdata:DeleteRule="SetNull">
        <xs:selector xpath=".//Tile" />
        <xs:field xpath="@Counter" />
      </xs:keyref>
      <xs:keyref name="TilesetTile" refer="TilesetKey" msdata:IsNested="true">
        <xs:selector xpath=".//Tile" />
        <xs:field xpath="@Name" />
      </xs:keyref>
      <xs:keyref name="TileTileFrame" refer="TileKey" msdata:IsNested="true">
        <xs:selector xpath=".//TileFrame" />
        <xs:field xpath="@Name" />
        <xs:field xpath="@TileValue" />
      </xs:keyref>
      <xs:keyref name="GraphicSheetFrame" refer="GraphicSheetKey" msdata:ConstraintOnly="true" msdata:DeleteRule="None">
        <xs:selector xpath=".//Frame" />
        <xs:field xpath="@GraphicSheet" />
      </xs:keyref>
      <xs:keyref name="FramesetFrame" refer="FramesetKey" msdata:IsNested="true">
        <xs:selector xpath=".//Frame" />
        <xs:field xpath="@Name" />
      </xs:keyref>
    </xs:element>
  </xs:schema>
  <GraphicSheet Name="Lettering" Columns="13" Rows="16" CellWidth="32" CellHeight="32">
    <Image></Image>
  </GraphicSheet>
  <GraphicSheet Name="CoolFont" Columns="24" Rows="4" CellWidth="13" CellHeight="18">
    <Image>iVBORw0KGgoAAAANSUhEUgAAATgAAABICAYAAABiKukfAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAExFJREFUeF7tXD2rZVkR7Z82f8jUxMDARDASMzHTUEPNxEgwMVBQRGFABgbEYUAQhEmU3WM1a6qraq21z7m3+3XvgUvfd099rFr1sfd9b6hXr85/h4HDwGHgMDAz8Mknn/wXJfLPd/P3aPu7eK/iWvrMhiKzi/9j02Ncf2x8fFTxqslfcl9+8dWbxsw/M9LQD/MZzR3+VPkKwxXdzh7ywOLOz4O3yYYiM/llMbuYX7K8WqdRcy53qjzadw6vrOfm4n3CV3GgcLHNwVL8/LP/0NvEIjXL7uoyvXi+cOGrSxTKZxnHl1MIKmfVcIuYmL8prmmQV3lym+JDkWf5jzhzzSm5iaZTasGt6Q6X4it/w1J0noGv88H6odJj+XnDwRL89K//lgccyu7qTnrxLPzEv9NwQxkHH+LYjcUZBNmfohtNxHLUxeLEpeB5aTJK/Jk7poM1uvLCchOXA6xTNa+hG/IMWx5uV/GxbwlVTEwHY2E8VLlxOHi1hP/8h3/JAw5lFd0IIPRQpxpa+TnD1smr2CpcrIkV290Ni8WzqxeYlv3wEe9Vn90hwvh4X58jJ9MBWfHDcoxNussv87FbCzEUsQ5Ybh+JhQ28ib8Kl4V1Cf/+d19KAy6Iy6dEF0DYXva7VyYe8SjYOnklJtQNfKwQ8KuD09hKLKwQWEzRdBhLfMawXsXH7L+L50pMnYyiG/3A8sL6Q6051Z/bQ9mugif7UOsszw7GXZUHNTevfS3h3/7mn/KAcws1Ag8f6K8jMmSWjoIN5bM/NjSy7u4AY7xc5VnVRzmFO4zXkWfxvg/PFc46GUX3av+oPsJPV6uZ69xjSl53e87VywPOweb09hs/S+nXv/rHwwZcJCd8qL4C15JXdCJ4jGc6VSb7j+Dkqk1VH+UU3nDAOfI7AwxzNOVmx3bV5Eo8Ha87fDu4VfvYP0ovZLuun8gL4w77p+o9xoWLK2IPXEuf+Xhzg/vlLz5/yICLwMP++hnfM4Ahv3QUjNl+p5fl8OcoKMUfw59Pqys2M0Z2M404GEYsTsyNXEDMwf+f51yqORXNvyWm8tXJXdVn+XFrocpTNdRzDtU4JltVLM/iretVmb9l4Oc//ez2ARd2l+3uxZoIsSkYK/kqvvwZYo1CUvw5zXeV56v6XZFeyY8TP37NwmZ1bSjyDledrGpDlcOb8pXamvyxnmP9lg/kCecV3hzOlP6lNeEETo2BQBTyz37899cDdL3wfWcr8KB86E06nZ+si3ax8JZcvO7mpPLpcsk4cOxh3FVulPhDb8evo+P6cbjuZFUbqlwM+Ks5ZP7w8Mh5dTmfsF7hjcWQB63Sv21sy9lPfvjp7Te4SGjYVv2gHL6fMGbbnY1MHGKLYlifPYMPt9gehQkHneMjOHZ0nJgzLtXPDq5cL0qt4iDJddTdlqt6cw4SrFFFL/cg47+KadLZ5U3NZTVDbA6Wwo++/7eHDbiwrfoJuaWHry6hnV20w3Szn2fxwQoOv9Y9ChMOEseHwq8SH5Nx/ah1lv3mupsGSFejUUeV7qTj+lKHW9SPktcKn+LH4c3Bky8j6jwo60kJhBVi9xxtq37wJPnBd/9Ch+80wJhP9BWyTGeXi0jwikmNS5W9ggmHnGNn8aTE4djsbj9qTq5gwlpgmHPdKLqdjuuLyVfDW9GpesHVU+UVuTzkFI5du+9cXi3sdw7UALBi+t63//T6NQ1nJmO4vF00Ynif8vM+Yrqd+GPwMPASGIjTaMKqyLzLWN+n4bZ7C32X/B3fh4HDwGHgMHAYOAwcBg4Dh4HDwGHgMHAYOAx8PAx8kH+ZeGD6qr+Eqe52/0ql2j9yh4HDADCwGk7ZmHtI+5qBzBfbRIq8VbrqL+kdud0h6gxuRxZ/+e/+bxI7/yvG5K+r44pfxvkuNjc/u9icnq3+mKX8gWv6PwAm/zscuDqvmzVv41Q2kzrEfWiyFWf42dRAV7a5KnkJHLHB1dnk6ug6sjhsMi78uWtiVycOIQdjlT+W084+47zSmwbpFWxsQFe5CR3EOQ2xqi53uFM4sOp6GdzZYppPR2eAKScCs6cmjdnBOFTZaJ7MW8cl+qi2IOPm3Wkwqlt5EQeedsq2VNxqjLoVrit+8ik81UTnR9HZjafLWcdDYMn+1NsL2wSca4vVWlejDE+uxfDj1I7C3Z21M3K3HFWbNLvP81etne23rk72qWBzh1Vw4AzOLDvhys/wZyUelHnE5lMFQ+Z0p3bu9MOalfGkxOPgdWSrPppqz62XGHAOB+EDdarPJt4q3St9wniinC+BapNm93l2qG7axanu6ri63e2AFdAuriimaSMp8pm5dbh2ZYMLFZt7MLi1o+CvGkjZ9prrxDmsuhw6eB3Zqo+U+nR8OLI5/uA7/9vdYCu5ndkyYa6eSTEuIdyOGT+zTZ5Byk4hOTrRpMoGT8SOmz/VDaiZC6XhUWf6ion4kVumn5+r8nnzqYJNiRcHSVUjE76q1iK/Cr58eHUN1+GafHXYlD6IXlBl84Bjek5PsvwoPOet2xO+zFtX5wout3aUvn7tdxmOzaqxIVPelOl0hSmLuNShmJsAf1bcOz5DlmFDuer9xHWWZz6vyCv8YKFWuCd8uc5yzXUDC+WYTuW/qu/qpuj46fRZLezoYUxqX7I6mXDkGeDUZ7W1Ow/0zp5bO+xw/EaMeTBc2TbqNMokuzDFplm1cO4YcKrPwMewoVz1vuMa46827lZ+K0wTTjWGqiEq3KqvnKfpZhF+FJ3Of+gyrnf74G4e81BADpTedPGgPNY/s5OfZzu5RtX6mOrNGmyVIXXb6I4jVyfk1Q3AuI03v58GkeMnFx8b6Ms2bgjOP3fbg0MuNx1+ruRvko8bvJpzvMFVOi42lbspdwoHLM4KN+Mt14HLIcPUca3gUmQ6/LnunI2+qHtnfbjxjLc3ZdPmcuhuvd3RwSQr/qphwIbqLq7QU5ov+0DdDl9nf/Jb2WU4K2zIY/fVsduE3PHRYZvyw7BP2Bx8lR/FN/KkbPSNoVbpTbfY3JMMm8t1thc5dPyovXqlRpVee2u47WzJXI6mzaVd4bk6+ZQJv3agTfWgPdemiwU5Yzww293zyoe6ydXRdWSx8HOtsW3NjIdpKDgYKz/Md2ff3ejL6o7lutJ3se34iGFd1dcOdxMPzN74TWAp44t9bcCCZcmpvj5c3f7q+mTxXLHn6jpcM9vd8+yD2akOEaUedvxUOvHZNKxYDtmgU+Op6nXyvRuPgifnpbs0OLFPXE/1xDhwsVU3WZZjp46ZrYc8XwCn7bUPcXqMHgYOA4eBZzHw3k/hZxFx/BwGDgOHgcPAYeAwcBg4DBwGDgOHgcPAYeAwwH5hrP4hZOfXDTt/mHgXGduJTcX5SNsKhkf6V2tHwZllHol7B8/ReWEMrAL68ouv3npVhRWyTtE59jvqHH+79O/Epvp6pG0FwyP9V/m9K1+XcLtTd/cUdvSmP7/f+aduloCuudktyD197vQzccdwr+3Eaj0suZBXmmvJZNuO/o4/FVeVLweb6ueZMVSYHuUf7WKOVV6Y3Dbupehsyazk79402/lgOEMvDwv38yC70utsvU86OxtwY/gouZxiZYWKzxmX1dBx8DlYumFw1ca7juFZ/t1curxu2V9K1dZTZYNnPokfoYM+KpxV8pwNxRj/FVs4UDub7ucxcJx4qhtSxWFXXBMf3QBg22jZjdHRd/G5TbQrr954c04dPTxUXD2nVys/jJewr/Ro1WehH/ywWpNuiEuo2/jpPpvkA3S3OZiRN+lXZLkbijvs6ucoF+9VXhlvVeyKjsrLrly+hTmbY3d1Me5df0qtuTKYc2VbdY4jdJSYKl9ML+so9VPpTIcixpDf4+Hf1RvypvSOxNly3G1KdZ9N8tGkuDF3Crqb3spW1w6HGw9irrCive79VBDKplQ8STF2xnVVRAp3LGYlnp3hsINN1XHx7MrnG5KyQTlkQpfFlOtMucVUOmxzdafDBlWHT6kb5IDNJJm3ZbTb1Kk+C2BsI2k0j7pltmpSx0dOxhQPYgs9R97ZfopDS4mnkt/VU5qXxT0Vq4PL5SHj2sWpcLArgwNH3YCbb7M7/ejmxO1tlWtVruo3pR4q+6PP9fDOzZpKYWARqJtJgxBFvotpirWy78g7208xkUo8uQEcHRZDd1N2fFyJ50ped2JT6nNXJvCwbcNTzLv9OA24Z2xc3qmBnT6tdMY6WA+V7abVbcrdLto1k7KZNIpCke1immLFBIUP5gvtZZ0dXaWxlBiqWBTbV/WcHOWhzfiqbDtcOPHvyCKWOMCnmHZqdCfeq37wMrLeM24cjFexSfW6nHSbOp1nk2wu5vyzugHV8eFuEUWyQpfhQjxZZ3f7qVJADFcMA0WuO3SeqavktZNRdBmnV59XGBiunXiYTSeXTm87/DgY7+KA+lwCztbTaKC7tosqm4M7n9PVPMek+AkulK3BGRPqdqcdcp0HvYNvOk27fOJpPBVth1Ep9B1dVWfiVMH2KJmKb1Y/uVYiN6wGpty6vTD56vwwDtVc4oWi6tMOW2Vf8rmEnI2+IZ+Lrvs8hkG1yXVq1jwElK20na9H+gnbSvxTo7L4JvtYNNPG3Dt8sAHJfOzmlTVYtotDvXrv2FNixi2+ykbf3HdKjVa9OvHd9TbLkTsTsO+UOKY+7bBV9a/0xOvcYQGsbbts4+7OiXq1yFTicjyOXuiqxV8N+ek0ZY3C/CqxXGnspRu5RzsMFw5YpXZyvSlxuRiijrt/7/YZMWH9sVrY5TjnmNVV9qPE7vjA/Kt5qvoU66+yU+FWYvmGrQjsbN51UvVhyK7cr7znl1NEYaMrxqv2FabZkHfiUfwdmT0Gcp6eOnNOEewl7aVrXb1ps1vwHfZfOscH/9ffGr/zrT9+43VmzqmMw8Bh4INhYOdr8AcT/AnkMHAYOAzcxgD+ktQxqurtXD/PhHcycWQ/JgbcP1Co/efafRGcr6Bik6tKRPyuRdEL+7u2FR8vgugD8jBwAwPYr6s3WF+p/efavRrK7gVGvVS9wbcU1vZSd4OpqhdyLBGZMCTAxXaV/KOvM+DmVbd8JKueyFuXGUtO/z2r53B2OLNHnTlvcWJPxf9bUPSWzJVNrFf1WQGc5/sMnNzsc7ejucP3s3TUeBAPDlQ2I7Iek3+N5+o1UR1w3WZahZTlQ938GrcJxMUwZh3nRoL8sVgqP6qv7Ifp7fjKtaD4wNwoXFQ2Jz8KhuqWM+Wis3nX5+F7sldxzWKNflV7AXE8Q4fVP+IPPOvf/Jp4w63BNKZlyNnAiYQ5euEHgVefdQSpsiiXt4TetikUQGb+WKMGBoe7KIq8xXTa5FrxwLbNVrWg+Oi2uXaDLNuccsvyrtaVUnedL/fz3COZh45nlh9mlw10tvm3OiRcHXXAYR/kQc98In/KgfAKHbCtohiAo7dkn7GVNvzgxly2PTfrRFyMC4xJ0bnbz51bY6tYIibWOJ1upZfrIIa3Eks1KCo9VmsVBhweTp12tiYf1bcmpX46jOpQYfVcDThVB2cBu00jN9k+4w05kIZbHliP2sq6wIRtfK8kJwpCwdb5mXxWzxjG7rnrh8W242ey2RVF5k3NC8NfFXvO46O5djcuIx5Wc7v5UXjpDgjGV6fHYpkwTcMk8MS2bpRlveXWglOXb8kuMI/a5hq2Y+OpO31VbCjXva8SmeNm/rrnk96zdGLouLnEHK33ao4YV/kQdbmu4mE+8fmjNy5nLAybUn/dkHp0/3TYlM3fUTMhm3/G21fOSfXs0jDrCFS2q1YkML0VrLot9wo29NO9V/CjroNn0uue3a0TA4HlZLohLF1Vn3GVB1y2q+hnGaZT1ZtTf8z+FNMVXdbUMTTU3ODguKLTHXZVrPFZV0NVbiIuhzvGVXmD29nmukAxPZRR5KshxHxEY4ec6rPCwzB2zye9Z+lkHtRCwCKOgnM5Z752uMYmffTG5cydEv8dOoy3PFBVXBV3qi/WA2i76teooa6XMZfrPb66gapiL+WWUbZVtDv1mV627fpS5VGue18R7m4ojqJ2NgcHHkdn8qNuZVWKInMVxcny2uGbTnxni2tu7NB1cWWcHSe7dYp6Lja8vSiNrfZCx51SDypfqq2p5zB+hbtdn6+WI7bpsxtwTK+y7fhTZVGue1+RnfG7/qYNrnjShR/cusuKOrBkHWWTK7OdsTmbnXMDqbo5HpXraDpWaxXfim6HQ8XnynWbl1nOVD9VfpjtqzrO8Onq2rFhyzoEYCGxLa5RYNVwUUGq2FCue6/gcPzFKTTFsmR2t+XmUx5tTbcRldvIT/ZzRZ9xgZypXHd1pHLA/HTPmV7gUvqg41qpoexnR4flFGtAjYfZnPKD/nbt3K6XG+Gpmzhvj+Y5Bhdnd/F0p63nRP9hesE+uCu3ClOR/9iOzAawWi+uXQXri5NZJJxNnH7agjdWjIrlO20p/o7M2wzkPrgjrw7P7s1HxefadTC/GNkrX2VeTJAPAKoWmeL6TluKvyNTDzn1a+Lh7zkM/A/wbs0ciKuS5wAAAABJRU5ErkJggg==</Image>
  </GraphicSheet>
  <GraphicSheet Name="FireFont" Columns="24" Rows="4" CellWidth="13" CellHeight="18">
    <Image>iVBORw0KGgoAAAANSUhEUgAAATgAAABICAYAAABiKukfAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAE11JREFUeF7tXdtxJMkNXEPOA1lwf/snC+SBLJAFckAWyANZIAtkwXkgQ1YzpUEfGg0gM6u7yeFtXcQEhyw8EolH9ZAbuG/f1n+LgcXAYmAx0DPw/fv3H14ifn81f3fbn8V7FtdTH9lgZGbx/2x6iOufjY+fKl42+U+5H7982xozfo9I836QT2tu88fKZxjO6Fb2PA8o7nhuvHU2GJnOL4pZxfyV5dk6tZpTuWPlvX3l8op6ai7eCV/GAcPFNAcj+X/6fWihpvGys7pIz86fvvyrSpSXjzKKL6UQWM7S4faKC/nr4uoGeYwZ+VEb5ivJo/xbLLHmEGe+4ZhaUGu6wsX4ip+wGJ2PwFf5sB5n+hvJHmpzOP1VGHBOdla307Mzw2Rf2+BfmKJdhM+fI9lD0ZCcVXqogXyBM9iqWBjdrzSwVKxM/JE7pONr9FmfTP9kPpCfWAM2VBl/T93YS/DhxfWR+bpDx18OKKYzvA3sw8CfhQHnZBndLYCXntfJmjyeI2yVPIvN7DPyu1uV5Oww4G7SM/zPeCwme4849HGpA+Sd5T0n1YVS5R3Vg2/SWX6Rj+opnfHnbavybE5n8KefaJqeyHxIfofwX7gBZwMxNm1FiNl+2q9esfA8HgZbJc/E5HUNX9UIWWLYQtguEoHntBCA/naZvPj2TYiwMlwjG+92zsRUyTC6Z/PK+jhckkQdWP2zPmIfoVxGeas1pHcmlt0DBttLA+hf+QGnBGAF4H3E9+Ut9cD0xMVgM5smy8a0DYTEDzvoWD5YTO1lQeTJ+2G42xUNYZ+N9x3kGM4rGUZ3G3CTvLE+Yh+hvFb91uXE9xCyH+O2PmX0DgOO4G4mns3PUP7bfQNuI+Plg/VluJ7yjI5/WjH57lbp7N/ByVmbrL6XY3jbDbgPqAOfp6svkUPzEPFUvM7wrQx11r7vH6YXol3Vz3bpA+58/2S9h7hQcVnsvreRj3E+HP39ngG3kfWy730xxW3yT3wMxmi/0otykYM7ODlrU9E3blmOszwxulSBvYRiLtmcKj4OA46o64pXlm9WbgZb1Il5itxkdT2Dj5kLH8Vb1avMPPh9wP3j+gE3gD3sdi/URGbDf4WP2a9Ynn63ggjxRXsea6Uz22i7J6QTPLMcKDhRjlB+FF/+Y5ZxfLX9Ga4rXlm+WbkZbBm/nb8r84niOsMbsn24DED/wjq8s9BGMP90w8a9r4AZHq9rNjqdyk/U9XZ3hffA9pRFviChiUDmU7FzVr/jbRvqLjdMTZieEseMrOpH4aqSZW2wcttT0YvjGR4YG/7yiHlVfKK4zvCGbB8GXOBM0f82hP91/RPcloyXbdaPl/PvO4zRdmXjQJzDthXD42cfwYdcbDflaDfgBR/G8V1cRVysnxlcsV6YWvWDxLB1gzjzwQ7uOLRYLmIPoprLYoKfmEIPIWwMt2yfMpfw/wfcv28ccC/brB+Te2LyryqYyq63g3Sjn4/iAxWc/1h3F6bdIBHqgOGXiQ/JqH7YOot+Y911zVPVqNVRptvpqL6oxn4FyPKR4WP8KLxtA1eoM6/DzIO0nphAUCF2H4F8EzF2djfJf/Dw7QYYii3ejkYog3NGZhTEI6bni8HGys5gyZpcsWOxoDgUm5ms5YixcwaTrwXkK9YNo1vpqL6Q/Gxes15gfDGxx6cyxm7UUf2oPj5F/u7m+YygRhP+9hhyj1c3nJHMZ2D3l1WH/zOwGa9/xJr5DD6Xz8XANAPMUwkjMw3gAsV3HCTviOkCqpeJxcBiYDGwGFgMLAYWA4uBxcBiYDGwGFgMLAa+OAN/yL9M3JiT7C9hrLvZv1Kx9pfcYmAx4BgYf3VyW3PXL2j78oh8KdtFM12Wb0Vudogqg1uRNUav/GcVDB8Kxswe8jETz5MLNT+z2JRBl/0xi/kDV/cvADr/MxyoOoNovy3Xf6+Q8zPJZpwxvM3qWUMwG1zNh22YVTbNKrqKrB9uEZf/vmpiVccPkEy38+PPUE4rDhDnmV43SDMcLDY0oLPcmI7H2Q2xrC5ZfCj/qHba+AaIZItm9fM4xJjpfoVOZuPKgcoWwY7swBviLJ7b937zbhXTjKzlxr5221y9/ajXFrbbzqz4yXyofrraOxtPl+eqnn1+mb7wHKBNu1XtwKEobI2OnG2XqtsMndVnpud1M4wZV0r/0NwNo8lGzOrnPkCTYTbm7grGbZlVh9TWROwWT8KBj1UZdFG24yyeRZ+IQy+vyEbe2yEicjpTO0xdZQMExXyXjoJXkc36CA6rV35YP6xc15tMj1e1eXV9ZPZgjEMg2aRZ/fyQGHLT7o5EUUfV9dM9vm+fkCZxbbdVs5HU8xm5VbhWZbcLgcRG3AebyEztMPjTYUVse411olxWVQ4VvIps1kdwwL04YLflqni8vPmIX8snuATb1fWR2aNiHEKvrZ1bQ4jbc9XGUIrPY7L37aB6YfebP9kNqJELJi6vg3DFWLbGaramRvvIn53HzacMNibe3SBJcHf4slpjc5pdXGXDFbg6XxU2dhsyyssZ/n1O2d5R8Xh5izl+RXxHDjPu2PpIL7rJOfVtOH1ty7UNmfSmTKUrRFmPS0ls1gyKPrtl1vAh214ue99xHeWRzzPySnoqHB2+WGex5soGcrWJdDL/WX2nDST4qfRRLczo+ZjYvkR10uGIM0CpT5M9Ux8Zh1ntWJ9TdRuHgm3CpZRvEhpBvbYBs4VTDTdFn/Vp+JBtL5e9r7j28WcbkctCEDafsjGkDZFsJu7sxdh9rtonHLeVGelU/k0PcT3bB1fzePgY22ymLi8GYXO0x+/rH8UVz6OdWKNsfXT1Jg221BC5bXTGkaqzFSa5Adg28WZfu0Gk+InFh+b7SKrbEBy/r7YHm1w2tKttw15n93GyyWmmw8aUFnDh60o/Hb7KT+d/hrfDECL7RtWL2BgeGZkKR6y7brN1hy3TU3PA1nBbr4dbi9joOoCKW29ndHYBEv6yYYCG6iwu0+sGZ4Xf61b4Kvud38wuwhnjjxyWTwjFJuSKjwpblx+EvcMWN+yyvMWcdfn1XDEbfZ+21X7LcCNeVK6jPYtZ8cP26pkaZXptVxPDGbk19zDxX3qsU++L1Yk+zcaMftkMbtswenLJOGCxKFyjOKvzzAezBdiaLtZCpTvjp9JhNuCyHPsmUzBmfLI5yDhTeEOxoVxn+irXMz5sWGexznDX8YDsSU9wbJNbU7DyGyHEFlv0EUTxiWRRgV2JxThjuEO4qvPoA9nJLhFvo4p/xk+mg7hQ8EesCsZqUKD8VzGxvKH6tL6pLmjWD8ppV0+IAxVb9iSLeDhTB8j2JedjCjfbay9xsowsBhYDi4HPYuDtp/BnEbP8LgYWA4uBxcBiYDGwGFgMLAYWA4uBxcBiYDHgGTj7S3nEpmIf2brz/M5fpdxpm+HkTv/KH9EYrLE2VZ0lvxjYGBh/BPrl8b8xDK/qr4tPOaVZFPtVWhR/s6k1nHf4utM2E++d/rP8XsXhKdzq1J29hRW97p8TdP+sQP1TN0rA7D8diMX2kX467romGEX02OzM1oOXZ5rrKRNtmz9Gf8YfYzeTucvXXXbZOO/yr9YOi9fkpnEPxV8ft7Z7dc2YyV+9abbygXCaXsSv/nxH6oMXb6+y9U46MxtwbfgwuexiVQoXcZldEgo+BUs15M7a+OwYPsq/mkuV1yn7Q+mirazMxtjD7d1sHK1k/c/T5Akbin38Z2wdBuAnYPBDp3qCUzfHoiLs+EO620Cd2DrbXcCM36tl2CfeGLOi1+UXxaP0XeaHtZ/NElbXclrltppVpf2hUGxxVc86+S2pxeZgRECnnw4lcUNxhZ39uZez9yyviLcsdkaH5WVWzuvN4Nk9AZKbhL0fdcMvU2OzMj7nT1wIW4zDdJCerwWvg/QiPiZfmU7FTxY/G5OCreKtvOyGQrEpVT3r5LfEuI256g2M7O8aRtxQXNlmOfByDE4vw2xnjTYZH4cBRG7EVW373Ko5VXVV3mYH1ozeE5t/dXm1OEzG9FAtxDrz/trh88q998PgY+OxPFb4rsIm8zYUik2y7NlGWrORdjd83LZdpSE6PIdmFrfMbo3m9JA/f65sP41csBxk/phGRHGkT3BELj9aL8ahxsVwdVZmNxCEDc1MTczEW+movc36ZuWyfpvloPU5Dh8bTLMmY87QZtWsYHZFUPiu9JhNphXuLp6NcIdHkVe2n+4SKcSfYUQNiWI4w3M64MR4lJhiLDOxIb7OnBsepidmanQm3jN+fBxXb7fu8s7MHT+vWl7GYbHxkz3r5FDBKLqsbCXH6HsZtM04kzWdGV3E1VYU5IZWJt5ywJE+0iEn6rI4oxyrx/B6VsZjsQu8q4GZGp2J96wf/zDih0r7kZPM/1lsuweFyudwMrF5Nep1duLHx/h9tyl0RrbCwmD0MghXJms6s9tPUaMxMWyDcGKz7GfoMjGdySni9Ox5hg3FNBMPslleVkkdzPY94krBeBUH0OcQOLGVdTdJmy3AM34OA47YMrw1aYjJYuySZBjZLcUxJqTn5Wdiq/QrW/EGtu8ZDpgbO32CI3PE1o2Xq5oYNd6d51lds3UQ+w7VaNVDXa7O4Iv1g3hk6hPVasddZp/yOYSEjb4mH4mtfr4NneCD2TK7a4TX1l2KaCGeA+miH+OBib8qxk5X4SDL5RW5RZwrGGf5ZjFYvVUDnhn0qi/Psc9Blm+f66iH/Fb5RXWV4YODUewhpoaz3LPYMvu0T18MPx7bdp8vRIB6o2YFhxIaCWHl1dvnjB9Wt+PTmhLFh2wwzQ2f4F659xwiXLsBR9ROrDcmLhWD1XH19WqffnCiIeovRSQb41b7KOsFJvaZHmLsxn6JfrrZU10YbG0MOXO4Nu9KtP0hhMeN+Ni4HF9K4ZqNqhjP2meIzobATMMyvpbMPAOH4faR276Vop4PcWm+GwPqE8JHP8m/G18LzxwD4yL87+Myda81c+a4XFqLgcXAGzKwnqrfMCkL0mJgMfAFGVB/2el/scw8WjIy6BeqX5DWBXkxcAsD6h+B2P5T7d4S3NVGx+fh1xZXlognBlbP5GZtz2C7mqNlbzHwLgz4vmO2KrP9p9o9y8fsR1T5YWwE9tjkqmxX3QYcoWf2lQFn9i0YFdtZ8pc+z4CaV97yksw+1cSty4glpf/80Lmz5/zMUWbP7KwaT2MzhcroDVBhMy5Kij8/q6/4WrIaAys3Gl9npWf4/igdNjaPZzdQwYyIetRMOfuYSA+4YsstQ8oIjNz8akPa40IYo44y6D1/KJbMD+sr+kF6M75iLTA+fG4YLjKbnR8GQ/aU0+WisnnVz813Zy/jGsW6fWoie8HjYPvnjA6qf4/f8Dy/xlfHm98aDGMaxfnaQspsI90FL+iZHw88+1lFECvr5Xw8XWyZDtqSWvGAGtXsqpzHPCE+qpi6uLJamJFnuY4cVoOPwYDqCp1vjSdsg1ZycPg0EnqH3YDb4UQDna1pJi/MIGN62TD5YY9w+jplLoRvO+Pk5lcj2nSVbaRbkkRfyIe3a7LPr/592URh2/AgEeDzMgwPJn/FJlcfV1ZIqq8sFosJNU6l2+E6DJyG6yoX7M+jXJdbRbarY1Q/vufU/kO2Wd7RkFL8+BjQ07S3G3uM9cnU5iG+Yfymba7e9owfVqfy0+lnZ8hfda762ZpE3Kx8Bl/ZAC8MfvigJkD4s2KPNXYmFmYjtbpx2eNB/TBTB4h/6kIR+xRxjDB1NWG2n1wxue34ncHJ1OiQGcZv2spqttntoGljENh8DNV7xjbiojrv9D5KZzaXPkfKDYm4Onw8C3lk9KMM0vHnd29cVrEx9VcOnAd3d/XojM/YY933Zj/LTXZGDy5WcDgmN3Ieihboedt3+dga+4XF++xiy84QF9W56idiTos/4XYWH6oFG2zPHLF5QlhQrTD6UQbpZPXGblxGOUE5QtgQH9QTnNinCqbdsHG9VA7AgMV8VTWU5cbqbgYnquntfBif2ATL6HkZRj4tIgJb5afzmZ0hjNW56mdrJnGz8iw+1Dy+uJGPXSMQualinfGD6tTbjJuWZ3RRE2X+FB0kexiKJN8zOVJ1nrFn/WpDq+pln5fne//KbCocpbIjSeJG1q1ogV60rfpi5b1c9T4lPOBn/EX7SMfOr9jkym6NZQsliwXFs2uEZCt0eeMn25aZuvN4VPm76/QMNhsE1UBg6hU1P5vLwyCdmAcIS8yFj5/JK2O/HnDkNtsDEUBvEBxksp9V4FlZL1e9TwtmEpv5sK2k3UDxeJRNrtGH8dhtRGb52g2pCzYuM3FlnLHbnZW4oizSrc6RXuQQXSpZPhneVD9qjzJ9MT1cEsWqrq/0cbCFklPeymCLq03tjEQ2IBabl6veMzgUf8ztOxI6uS033vLeVncpsNxaftSnidhEXr/zHeVYrqs6YjlAfqpzpLc9lRB9UHHN1FD0M6ODasLnBm32RrbQ+Zl6Q7ZPnUdga/svpnMMpYs2ll5pCyNfEt0AtV64KrcM25Z/246MBjBbL6pdBuuXkxkkrE2cct6MN1SMjOErbTH+lsyRgdgHV+RV4Zl9WjabLD7VroL5y8i+7aPlmzPIFhkTxpW2GH9LJh9y7MfExd/HMPA/ceNtt9ee4+kAAAAASUVORK5CYII=</Image>
  </GraphicSheet>
  <GraphicSheet Name="Player" Columns="8" Rows="2" CellWidth="64" CellHeight="128">
    <Image></Image>
  </GraphicSheet>
  <GraphicSheet Name="MainTiles" Columns="16" Rows="8" CellWidth="32" CellHeight="32">
    <Image></Image>
  </GraphicSheet>
  <Frameset Name="LetterFrames">
    <Frame FrameValue="48" GraphicSheet="Lettering" CellIndex="1" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="49" GraphicSheet="Lettering" CellIndex="2" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="50" GraphicSheet="Lettering" CellIndex="3" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="51" GraphicSheet="Lettering" CellIndex="4" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="52" GraphicSheet="Lettering" CellIndex="5" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="53" GraphicSheet="Lettering" CellIndex="6" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="54" GraphicSheet="Lettering" CellIndex="7" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="55" GraphicSheet="Lettering" CellIndex="8" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="56" GraphicSheet="Lettering" CellIndex="9" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="57" GraphicSheet="Lettering" CellIndex="10" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="65" GraphicSheet="Lettering" CellIndex="13" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="66" GraphicSheet="Lettering" CellIndex="14" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="67" GraphicSheet="Lettering" CellIndex="15" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="68" GraphicSheet="Lettering" CellIndex="16" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="69" GraphicSheet="Lettering" CellIndex="17" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="70" GraphicSheet="Lettering" CellIndex="18" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="71" GraphicSheet="Lettering" CellIndex="19" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="72" GraphicSheet="Lettering" CellIndex="20" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="73" GraphicSheet="Lettering" CellIndex="21" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="74" GraphicSheet="Lettering" CellIndex="22" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="75" GraphicSheet="Lettering" CellIndex="23" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="76" GraphicSheet="Lettering" CellIndex="24" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="77" GraphicSheet="Lettering" CellIndex="25" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="78" GraphicSheet="Lettering" CellIndex="26" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="79" GraphicSheet="Lettering" CellIndex="27" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="80" GraphicSheet="Lettering" CellIndex="28" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="81" GraphicSheet="Lettering" CellIndex="29" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="82" GraphicSheet="Lettering" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="83" GraphicSheet="Lettering" CellIndex="31" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="84" GraphicSheet="Lettering" CellIndex="32" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="85" GraphicSheet="Lettering" CellIndex="33" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="86" GraphicSheet="Lettering" CellIndex="34" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="87" GraphicSheet="Lettering" CellIndex="35" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="88" GraphicSheet="Lettering" CellIndex="36" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="89" GraphicSheet="Lettering" CellIndex="37" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="90" GraphicSheet="Lettering" CellIndex="38" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="33" GraphicSheet="Lettering" CellIndex="42" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="35" GraphicSheet="Lettering" CellIndex="48" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="64" GraphicSheet="Lettering" CellIndex="51" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="91" GraphicSheet="Lettering" CellIndex="53" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="92" GraphicSheet="Lettering" CellIndex="54" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="93" GraphicSheet="Lettering" CellIndex="55" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="94" GraphicSheet="Lettering" CellIndex="56" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="95" GraphicSheet="Lettering" CellIndex="57" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="96" GraphicSheet="Lettering" CellIndex="58" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="97" GraphicSheet="Lettering" CellIndex="59" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="98" GraphicSheet="Lettering" CellIndex="60" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="99" GraphicSheet="Lettering" CellIndex="61" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="100" GraphicSheet="Lettering" CellIndex="62" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="101" GraphicSheet="Lettering" CellIndex="63" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="102" GraphicSheet="Lettering" CellIndex="64" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="103" GraphicSheet="Lettering" CellIndex="65" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="104" GraphicSheet="Lettering" CellIndex="66" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="105" GraphicSheet="Lettering" CellIndex="67" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="106" GraphicSheet="Lettering" CellIndex="68" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="107" GraphicSheet="Lettering" CellIndex="69" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="108" GraphicSheet="Lettering" CellIndex="70" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="109" GraphicSheet="Lettering" CellIndex="71" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="110" GraphicSheet="Lettering" CellIndex="72" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="111" GraphicSheet="Lettering" CellIndex="73" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="112" GraphicSheet="Lettering" CellIndex="74" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="113" GraphicSheet="Lettering" CellIndex="75" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="114" GraphicSheet="Lettering" CellIndex="76" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="115" GraphicSheet="Lettering" CellIndex="77" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="116" GraphicSheet="Lettering" CellIndex="78" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="117" GraphicSheet="Lettering" CellIndex="79" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="118" GraphicSheet="Lettering" CellIndex="80" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="119" GraphicSheet="Lettering" CellIndex="81" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="120" GraphicSheet="Lettering" CellIndex="82" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="121" GraphicSheet="Lettering" CellIndex="83" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="122" GraphicSheet="Lettering" CellIndex="84" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="123" GraphicSheet="Lettering" CellIndex="85" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="124" GraphicSheet="Lettering" CellIndex="86" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="125" GraphicSheet="Lettering" CellIndex="87" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="126" GraphicSheet="Lettering" CellIndex="88" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="127" GraphicSheet="Lettering" CellIndex="89" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="128" GraphicSheet="Lettering" CellIndex="90" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="129" GraphicSheet="Lettering" CellIndex="91" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="130" GraphicSheet="Lettering" CellIndex="92" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="131" GraphicSheet="Lettering" CellIndex="93" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="132" GraphicSheet="Lettering" CellIndex="94" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="133" GraphicSheet="Lettering" CellIndex="95" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="134" GraphicSheet="Lettering" CellIndex="96" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="135" GraphicSheet="Lettering" CellIndex="97" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="136" GraphicSheet="Lettering" CellIndex="98" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="137" GraphicSheet="Lettering" CellIndex="99" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="138" GraphicSheet="Lettering" CellIndex="100" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="139" GraphicSheet="Lettering" CellIndex="103" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="140" GraphicSheet="Lettering" CellIndex="105" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="141" GraphicSheet="Lettering" CellIndex="106" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="142" GraphicSheet="Lettering" CellIndex="107" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="143" GraphicSheet="Lettering" CellIndex="108" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="144" GraphicSheet="Lettering" CellIndex="109" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="145" GraphicSheet="Lettering" CellIndex="110" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="146" GraphicSheet="Lettering" CellIndex="111" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="147" GraphicSheet="Lettering" CellIndex="112" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="148" GraphicSheet="Lettering" CellIndex="113" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="149" GraphicSheet="Lettering" CellIndex="114" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="150" GraphicSheet="Lettering" CellIndex="115" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="151" GraphicSheet="Lettering" CellIndex="116" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="152" GraphicSheet="Lettering" CellIndex="117" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="153" GraphicSheet="Lettering" CellIndex="118" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="154" GraphicSheet="Lettering" CellIndex="119" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="155" GraphicSheet="Lettering" CellIndex="120" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="156" GraphicSheet="Lettering" CellIndex="121" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="157" GraphicSheet="Lettering" CellIndex="122" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="158" GraphicSheet="Lettering" CellIndex="123" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="159" GraphicSheet="Lettering" CellIndex="124" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="160" GraphicSheet="Lettering" CellIndex="125" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="161" GraphicSheet="Lettering" CellIndex="126" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="162" GraphicSheet="Lettering" CellIndex="127" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="163" GraphicSheet="Lettering" CellIndex="128" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="164" GraphicSheet="Lettering" CellIndex="129" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="165" GraphicSheet="Lettering" CellIndex="130" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="166" GraphicSheet="Lettering" CellIndex="131" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="167" GraphicSheet="Lettering" CellIndex="132" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="168" GraphicSheet="Lettering" CellIndex="133" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="169" GraphicSheet="Lettering" CellIndex="134" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="170" GraphicSheet="Lettering" CellIndex="135" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="171" GraphicSheet="Lettering" CellIndex="136" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="172" GraphicSheet="Lettering" CellIndex="137" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="173" GraphicSheet="Lettering" CellIndex="138" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="174" GraphicSheet="Lettering" CellIndex="139" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="175" GraphicSheet="Lettering" CellIndex="140" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="176" GraphicSheet="Lettering" CellIndex="141" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="177" GraphicSheet="Lettering" CellIndex="142" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="178" GraphicSheet="Lettering" CellIndex="143" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="179" GraphicSheet="Lettering" CellIndex="144" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="180" GraphicSheet="Lettering" CellIndex="145" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="181" GraphicSheet="Lettering" CellIndex="146" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="182" GraphicSheet="Lettering" CellIndex="147" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="183" GraphicSheet="Lettering" CellIndex="148" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="184" GraphicSheet="Lettering" CellIndex="149" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="185" GraphicSheet="Lettering" CellIndex="150" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="186" GraphicSheet="Lettering" CellIndex="151" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="187" GraphicSheet="Lettering" CellIndex="152" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="188" GraphicSheet="Lettering" CellIndex="155" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="189" GraphicSheet="Lettering" CellIndex="157" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="190" GraphicSheet="Lettering" CellIndex="158" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="191" GraphicSheet="Lettering" CellIndex="159" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="192" GraphicSheet="Lettering" CellIndex="160" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="193" GraphicSheet="Lettering" CellIndex="161" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="194" GraphicSheet="Lettering" CellIndex="162" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="195" GraphicSheet="Lettering" CellIndex="163" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="196" GraphicSheet="Lettering" CellIndex="164" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="197" GraphicSheet="Lettering" CellIndex="165" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="198" GraphicSheet="Lettering" CellIndex="166" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="199" GraphicSheet="Lettering" CellIndex="167" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="200" GraphicSheet="Lettering" CellIndex="168" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="201" GraphicSheet="Lettering" CellIndex="169" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="202" GraphicSheet="Lettering" CellIndex="170" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="203" GraphicSheet="Lettering" CellIndex="171" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="204" GraphicSheet="Lettering" CellIndex="172" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="205" GraphicSheet="Lettering" CellIndex="173" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="206" GraphicSheet="Lettering" CellIndex="174" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="207" GraphicSheet="Lettering" CellIndex="175" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="208" GraphicSheet="Lettering" CellIndex="176" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="209" GraphicSheet="Lettering" CellIndex="177" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="210" GraphicSheet="Lettering" CellIndex="178" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="211" GraphicSheet="Lettering" CellIndex="179" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="212" GraphicSheet="Lettering" CellIndex="180" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="213" GraphicSheet="Lettering" CellIndex="181" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="214" GraphicSheet="Lettering" CellIndex="182" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="215" GraphicSheet="Lettering" CellIndex="183" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="216" GraphicSheet="Lettering" CellIndex="184" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="217" GraphicSheet="Lettering" CellIndex="185" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="218" GraphicSheet="Lettering" CellIndex="186" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="219" GraphicSheet="Lettering" CellIndex="187" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="220" GraphicSheet="Lettering" CellIndex="188" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="221" GraphicSheet="Lettering" CellIndex="189" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="222" GraphicSheet="Lettering" CellIndex="190" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="223" GraphicSheet="Lettering" CellIndex="191" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="224" GraphicSheet="Lettering" CellIndex="192" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="225" GraphicSheet="Lettering" CellIndex="193" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="226" GraphicSheet="Lettering" CellIndex="194" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="227" GraphicSheet="Lettering" CellIndex="195" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="228" GraphicSheet="Lettering" CellIndex="196" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="229" GraphicSheet="Lettering" CellIndex="198" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="230" GraphicSheet="Lettering" CellIndex="199" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="231" GraphicSheet="Lettering" CellIndex="200" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="232" GraphicSheet="Lettering" CellIndex="201" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="233" GraphicSheet="Lettering" CellIndex="202" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="234" GraphicSheet="Lettering" CellIndex="203" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="235" GraphicSheet="Lettering" CellIndex="204" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="236" GraphicSheet="Lettering" CellIndex="207" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="237" GraphicSheet="Lettering" CellIndex="49" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="238" GraphicSheet="Lettering" CellIndex="50" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="0" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="1" GraphicSheet="MainTiles" CellIndex="9" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="2" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="3" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="4" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="5" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="6" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="7" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="8" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="9" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="10" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="11" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="12" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="13" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="14" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="15" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="16" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="17" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="18" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="19" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="20" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="21" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="22" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="23" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="24" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="25" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="26" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="27" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="28" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="29" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="30" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="31" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="32" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="34" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="36" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="37" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="38" GraphicSheet="Lettering" CellIndex="44" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="39" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="40" GraphicSheet="Lettering" CellIndex="11" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="41" GraphicSheet="Lettering" CellIndex="12" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="42" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="43" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="44" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="45" GraphicSheet="Lettering" CellIndex="39" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="46" GraphicSheet="Lettering" CellIndex="40" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="47" GraphicSheet="Lettering" CellIndex="43" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="58" GraphicSheet="Lettering" CellIndex="45" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="59" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="60" GraphicSheet="Lettering" CellIndex="47" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="62" GraphicSheet="Lettering" CellIndex="46" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="61" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="63" GraphicSheet="Lettering" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
  </Frameset>
  <Frameset Name="CoolFontFrames">
    <Frame FrameValue="0" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="1" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="2" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="3" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="4" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="5" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="6" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="7" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="8" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="9" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="10" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="11" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="12" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="13" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="14" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="15" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="16" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="17" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="18" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="19" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="20" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="21" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="22" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="23" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="24" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="25" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="26" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="27" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="28" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="29" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="30" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="31" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="33" GraphicSheet="CoolFont" CellIndex="0" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="34" GraphicSheet="CoolFont" CellIndex="1" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="35" GraphicSheet="CoolFont" CellIndex="2" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="36" GraphicSheet="CoolFont" CellIndex="3" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="37" GraphicSheet="CoolFont" CellIndex="4" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="38" GraphicSheet="CoolFont" CellIndex="5" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="39" GraphicSheet="CoolFont" CellIndex="6" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="40" GraphicSheet="CoolFont" CellIndex="7" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="41" GraphicSheet="CoolFont" CellIndex="8" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="42" GraphicSheet="CoolFont" CellIndex="9" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="43" GraphicSheet="CoolFont" CellIndex="10" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="44" GraphicSheet="CoolFont" CellIndex="11" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="45" GraphicSheet="CoolFont" CellIndex="12" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="46" GraphicSheet="CoolFont" CellIndex="13" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="47" GraphicSheet="CoolFont" CellIndex="14" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="48" GraphicSheet="CoolFont" CellIndex="15" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="49" GraphicSheet="CoolFont" CellIndex="16" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="50" GraphicSheet="CoolFont" CellIndex="17" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="51" GraphicSheet="CoolFont" CellIndex="18" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="52" GraphicSheet="CoolFont" CellIndex="19" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="53" GraphicSheet="CoolFont" CellIndex="20" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="54" GraphicSheet="CoolFont" CellIndex="21" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="55" GraphicSheet="CoolFont" CellIndex="22" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="56" GraphicSheet="CoolFont" CellIndex="23" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="57" GraphicSheet="CoolFont" CellIndex="24" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="58" GraphicSheet="CoolFont" CellIndex="25" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="59" GraphicSheet="CoolFont" CellIndex="26" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="60" GraphicSheet="CoolFont" CellIndex="27" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="61" GraphicSheet="CoolFont" CellIndex="28" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="62" GraphicSheet="CoolFont" CellIndex="29" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="63" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="64" GraphicSheet="CoolFont" CellIndex="31" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="65" GraphicSheet="CoolFont" CellIndex="32" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="66" GraphicSheet="CoolFont" CellIndex="33" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="67" GraphicSheet="CoolFont" CellIndex="34" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="68" GraphicSheet="CoolFont" CellIndex="35" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="69" GraphicSheet="CoolFont" CellIndex="36" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="70" GraphicSheet="CoolFont" CellIndex="37" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="71" GraphicSheet="CoolFont" CellIndex="38" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="72" GraphicSheet="CoolFont" CellIndex="39" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="73" GraphicSheet="CoolFont" CellIndex="40" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="74" GraphicSheet="CoolFont" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="75" GraphicSheet="CoolFont" CellIndex="42" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="76" GraphicSheet="CoolFont" CellIndex="43" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="77" GraphicSheet="CoolFont" CellIndex="44" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="78" GraphicSheet="CoolFont" CellIndex="45" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="79" GraphicSheet="CoolFont" CellIndex="46" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="80" GraphicSheet="CoolFont" CellIndex="47" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="81" GraphicSheet="CoolFont" CellIndex="48" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="82" GraphicSheet="CoolFont" CellIndex="49" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="83" GraphicSheet="CoolFont" CellIndex="50" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="84" GraphicSheet="CoolFont" CellIndex="51" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="85" GraphicSheet="CoolFont" CellIndex="52" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="86" GraphicSheet="CoolFont" CellIndex="53" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="87" GraphicSheet="CoolFont" CellIndex="54" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="88" GraphicSheet="CoolFont" CellIndex="55" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="89" GraphicSheet="CoolFont" CellIndex="56" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="90" GraphicSheet="CoolFont" CellIndex="57" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="91" GraphicSheet="CoolFont" CellIndex="58" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="92" GraphicSheet="CoolFont" CellIndex="59" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="93" GraphicSheet="CoolFont" CellIndex="60" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="94" GraphicSheet="CoolFont" CellIndex="61" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="95" GraphicSheet="CoolFont" CellIndex="62" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="96" GraphicSheet="CoolFont" CellIndex="63" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="97" GraphicSheet="CoolFont" CellIndex="64" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="98" GraphicSheet="CoolFont" CellIndex="65" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="99" GraphicSheet="CoolFont" CellIndex="66" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="100" GraphicSheet="CoolFont" CellIndex="67" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="101" GraphicSheet="CoolFont" CellIndex="68" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="102" GraphicSheet="CoolFont" CellIndex="69" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="103" GraphicSheet="CoolFont" CellIndex="70" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="104" GraphicSheet="CoolFont" CellIndex="71" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="105" GraphicSheet="CoolFont" CellIndex="72" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="106" GraphicSheet="CoolFont" CellIndex="73" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="107" GraphicSheet="CoolFont" CellIndex="74" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="108" GraphicSheet="CoolFont" CellIndex="75" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="109" GraphicSheet="CoolFont" CellIndex="76" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="110" GraphicSheet="CoolFont" CellIndex="77" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="111" GraphicSheet="CoolFont" CellIndex="78" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="112" GraphicSheet="CoolFont" CellIndex="79" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="113" GraphicSheet="CoolFont" CellIndex="80" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="114" GraphicSheet="CoolFont" CellIndex="81" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="115" GraphicSheet="CoolFont" CellIndex="82" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="116" GraphicSheet="CoolFont" CellIndex="83" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="117" GraphicSheet="CoolFont" CellIndex="84" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="118" GraphicSheet="CoolFont" CellIndex="85" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="119" GraphicSheet="CoolFont" CellIndex="86" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="120" GraphicSheet="CoolFont" CellIndex="87" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="121" GraphicSheet="CoolFont" CellIndex="88" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="122" GraphicSheet="CoolFont" CellIndex="89" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="123" GraphicSheet="CoolFont" CellIndex="90" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="124" GraphicSheet="CoolFont" CellIndex="91" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="125" GraphicSheet="CoolFont" CellIndex="92" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="126" GraphicSheet="CoolFont" CellIndex="93" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="127" GraphicSheet="CoolFont" CellIndex="94" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="128" GraphicSheet="CoolFont" CellIndex="95" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="32" GraphicSheet="CoolFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
  </Frameset>
  <Frameset Name="FireFontFrames">
    <Frame FrameValue="0" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="1" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="2" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="3" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="4" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="5" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="6" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="7" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="8" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="9" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="10" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="11" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="12" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="13" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="14" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="15" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="16" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="17" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="18" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="19" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="20" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="21" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="22" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="23" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="24" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="25" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="26" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="27" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="28" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="29" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="32" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="33" GraphicSheet="FireFont" CellIndex="0" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="34" GraphicSheet="FireFont" CellIndex="1" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="35" GraphicSheet="FireFont" CellIndex="2" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="36" GraphicSheet="FireFont" CellIndex="3" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="37" GraphicSheet="FireFont" CellIndex="4" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="38" GraphicSheet="FireFont" CellIndex="5" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="39" GraphicSheet="FireFont" CellIndex="6" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="40" GraphicSheet="FireFont" CellIndex="7" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="41" GraphicSheet="FireFont" CellIndex="8" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="42" GraphicSheet="FireFont" CellIndex="9" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="43" GraphicSheet="FireFont" CellIndex="10" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="44" GraphicSheet="FireFont" CellIndex="11" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="45" GraphicSheet="FireFont" CellIndex="12" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="46" GraphicSheet="FireFont" CellIndex="13" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="47" GraphicSheet="FireFont" CellIndex="14" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="48" GraphicSheet="FireFont" CellIndex="15" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="49" GraphicSheet="FireFont" CellIndex="16" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="50" GraphicSheet="FireFont" CellIndex="17" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="51" GraphicSheet="FireFont" CellIndex="18" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="52" GraphicSheet="FireFont" CellIndex="19" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="53" GraphicSheet="FireFont" CellIndex="20" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="54" GraphicSheet="FireFont" CellIndex="21" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="55" GraphicSheet="FireFont" CellIndex="22" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="56" GraphicSheet="FireFont" CellIndex="23" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="57" GraphicSheet="FireFont" CellIndex="24" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="58" GraphicSheet="FireFont" CellIndex="25" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="59" GraphicSheet="FireFont" CellIndex="26" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="60" GraphicSheet="FireFont" CellIndex="27" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="61" GraphicSheet="FireFont" CellIndex="28" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="62" GraphicSheet="FireFont" CellIndex="29" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="63" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="64" GraphicSheet="FireFont" CellIndex="31" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="65" GraphicSheet="FireFont" CellIndex="32" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="66" GraphicSheet="FireFont" CellIndex="33" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="67" GraphicSheet="FireFont" CellIndex="34" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="68" GraphicSheet="FireFont" CellIndex="35" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="69" GraphicSheet="FireFont" CellIndex="36" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="70" GraphicSheet="FireFont" CellIndex="37" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="71" GraphicSheet="FireFont" CellIndex="38" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="72" GraphicSheet="FireFont" CellIndex="39" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="73" GraphicSheet="FireFont" CellIndex="40" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="74" GraphicSheet="FireFont" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="75" GraphicSheet="FireFont" CellIndex="42" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="76" GraphicSheet="FireFont" CellIndex="43" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="77" GraphicSheet="FireFont" CellIndex="44" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="78" GraphicSheet="FireFont" CellIndex="45" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="79" GraphicSheet="FireFont" CellIndex="46" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="80" GraphicSheet="FireFont" CellIndex="47" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="81" GraphicSheet="FireFont" CellIndex="48" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="82" GraphicSheet="FireFont" CellIndex="49" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="83" GraphicSheet="FireFont" CellIndex="50" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="84" GraphicSheet="FireFont" CellIndex="51" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="85" GraphicSheet="FireFont" CellIndex="52" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="86" GraphicSheet="FireFont" CellIndex="53" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="87" GraphicSheet="FireFont" CellIndex="54" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="88" GraphicSheet="FireFont" CellIndex="55" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="89" GraphicSheet="FireFont" CellIndex="56" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="90" GraphicSheet="FireFont" CellIndex="57" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="91" GraphicSheet="FireFont" CellIndex="58" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="92" GraphicSheet="FireFont" CellIndex="59" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="93" GraphicSheet="FireFont" CellIndex="60" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="94" GraphicSheet="FireFont" CellIndex="61" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="95" GraphicSheet="FireFont" CellIndex="62" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="96" GraphicSheet="FireFont" CellIndex="63" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="97" GraphicSheet="FireFont" CellIndex="64" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="98" GraphicSheet="FireFont" CellIndex="65" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="99" GraphicSheet="FireFont" CellIndex="66" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="100" GraphicSheet="FireFont" CellIndex="67" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="101" GraphicSheet="FireFont" CellIndex="68" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="102" GraphicSheet="FireFont" CellIndex="69" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="103" GraphicSheet="FireFont" CellIndex="70" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="104" GraphicSheet="FireFont" CellIndex="71" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="105" GraphicSheet="FireFont" CellIndex="72" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="106" GraphicSheet="FireFont" CellIndex="73" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="107" GraphicSheet="FireFont" CellIndex="74" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="108" GraphicSheet="FireFont" CellIndex="75" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="109" GraphicSheet="FireFont" CellIndex="76" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="110" GraphicSheet="FireFont" CellIndex="77" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="111" GraphicSheet="FireFont" CellIndex="78" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="112" GraphicSheet="FireFont" CellIndex="79" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="113" GraphicSheet="FireFont" CellIndex="80" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="114" GraphicSheet="FireFont" CellIndex="81" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="115" GraphicSheet="FireFont" CellIndex="82" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="116" GraphicSheet="FireFont" CellIndex="83" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="117" GraphicSheet="FireFont" CellIndex="84" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="118" GraphicSheet="FireFont" CellIndex="85" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="119" GraphicSheet="FireFont" CellIndex="86" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="120" GraphicSheet="FireFont" CellIndex="87" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="121" GraphicSheet="FireFont" CellIndex="88" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="122" GraphicSheet="FireFont" CellIndex="89" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="123" GraphicSheet="FireFont" CellIndex="90" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="124" GraphicSheet="FireFont" CellIndex="91" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="125" GraphicSheet="FireFont" CellIndex="92" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="126" GraphicSheet="FireFont" CellIndex="93" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="127" GraphicSheet="FireFont" CellIndex="94" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="128" GraphicSheet="FireFont" CellIndex="95" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="31" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="30" GraphicSheet="FireFont" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
  </Frameset>
  <Frameset Name="PlayerFrames" Folder="">
    <Frame FrameValue="0" GraphicSheet="Player" CellIndex="0" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="1" GraphicSheet="Player" CellIndex="1" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="2" GraphicSheet="Player" CellIndex="2" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="3" GraphicSheet="Player" CellIndex="3" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="4" GraphicSheet="Player" CellIndex="4" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="5" GraphicSheet="Player" CellIndex="5" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="6" GraphicSheet="Player" CellIndex="6" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="7" GraphicSheet="Player" CellIndex="7" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="8" GraphicSheet="Player" CellIndex="8" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="9" GraphicSheet="Player" CellIndex="9" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="10" GraphicSheet="Player" CellIndex="10" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="11" GraphicSheet="Player" CellIndex="11" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="12" GraphicSheet="Player" CellIndex="12" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="13" GraphicSheet="Player" CellIndex="13" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="14" GraphicSheet="Player" CellIndex="14" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="15" GraphicSheet="Player" CellIndex="15" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
  </Frameset>
  <Frameset Name="MainFrames" Folder="">
    <Frame FrameValue="0" GraphicSheet="MainTiles" CellIndex="0" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="1" GraphicSheet="MainTiles" CellIndex="1" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="2" GraphicSheet="MainTiles" CellIndex="2" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="3" GraphicSheet="MainTiles" CellIndex="3" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="4" GraphicSheet="MainTiles" CellIndex="4" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="5" GraphicSheet="MainTiles" CellIndex="5" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="6" GraphicSheet="MainTiles" CellIndex="6" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="7" GraphicSheet="MainTiles" CellIndex="7" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="8" GraphicSheet="MainTiles" CellIndex="8" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="9" GraphicSheet="MainTiles" CellIndex="9" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="10" GraphicSheet="MainTiles" CellIndex="10" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="11" GraphicSheet="MainTiles" CellIndex="11" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="12" GraphicSheet="MainTiles" CellIndex="12" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="13" GraphicSheet="MainTiles" CellIndex="13" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="14" GraphicSheet="MainTiles" CellIndex="14" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="15" GraphicSheet="MainTiles" CellIndex="15" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="16" GraphicSheet="MainTiles" CellIndex="16" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="17" GraphicSheet="MainTiles" CellIndex="17" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="18" GraphicSheet="MainTiles" CellIndex="18" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="19" GraphicSheet="MainTiles" CellIndex="19" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="20" GraphicSheet="MainTiles" CellIndex="20" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="21" GraphicSheet="MainTiles" CellIndex="21" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="22" GraphicSheet="MainTiles" CellIndex="22" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="23" GraphicSheet="MainTiles" CellIndex="23" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="24" GraphicSheet="MainTiles" CellIndex="24" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="25" GraphicSheet="MainTiles" CellIndex="25" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="26" GraphicSheet="MainTiles" CellIndex="26" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="27" GraphicSheet="MainTiles" CellIndex="27" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="28" GraphicSheet="MainTiles" CellIndex="28" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="29" GraphicSheet="MainTiles" CellIndex="29" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="30" GraphicSheet="MainTiles" CellIndex="30" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="31" GraphicSheet="MainTiles" CellIndex="31" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="32" GraphicSheet="MainTiles" CellIndex="32" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="33" GraphicSheet="MainTiles" CellIndex="33" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="34" GraphicSheet="MainTiles" CellIndex="34" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="35" GraphicSheet="MainTiles" CellIndex="35" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="36" GraphicSheet="MainTiles" CellIndex="36" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="37" GraphicSheet="MainTiles" CellIndex="37" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="38" GraphicSheet="MainTiles" CellIndex="38" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="39" GraphicSheet="MainTiles" CellIndex="39" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="40" GraphicSheet="MainTiles" CellIndex="40" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="41" GraphicSheet="MainTiles" CellIndex="41" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="42" GraphicSheet="MainTiles" CellIndex="42" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="43" GraphicSheet="MainTiles" CellIndex="43" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="44" GraphicSheet="MainTiles" CellIndex="44" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="45" GraphicSheet="MainTiles" CellIndex="45" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="46" GraphicSheet="MainTiles" CellIndex="46" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="47" GraphicSheet="MainTiles" CellIndex="47" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="48" GraphicSheet="MainTiles" CellIndex="48" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="49" GraphicSheet="MainTiles" CellIndex="49" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="50" GraphicSheet="MainTiles" CellIndex="50" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="51" GraphicSheet="MainTiles" CellIndex="51" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="52" GraphicSheet="MainTiles" CellIndex="52" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="53" GraphicSheet="MainTiles" CellIndex="53" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="54" GraphicSheet="MainTiles" CellIndex="54" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="55" GraphicSheet="MainTiles" CellIndex="55" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="56" GraphicSheet="MainTiles" CellIndex="56" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="57" GraphicSheet="MainTiles" CellIndex="57" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="58" GraphicSheet="MainTiles" CellIndex="58" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="59" GraphicSheet="MainTiles" CellIndex="59" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="60" GraphicSheet="MainTiles" CellIndex="60" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="61" GraphicSheet="MainTiles" CellIndex="61" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="62" GraphicSheet="MainTiles" CellIndex="62" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="63" GraphicSheet="MainTiles" CellIndex="63" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="64" GraphicSheet="MainTiles" CellIndex="64" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="65" GraphicSheet="MainTiles" CellIndex="65" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="66" GraphicSheet="MainTiles" CellIndex="66" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="67" GraphicSheet="MainTiles" CellIndex="67" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="68" GraphicSheet="MainTiles" CellIndex="68" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="69" GraphicSheet="MainTiles" CellIndex="69" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="70" GraphicSheet="MainTiles" CellIndex="70" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="71" GraphicSheet="MainTiles" CellIndex="71" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="72" GraphicSheet="MainTiles" CellIndex="72" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="73" GraphicSheet="MainTiles" CellIndex="73" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="74" GraphicSheet="MainTiles" CellIndex="74" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="75" GraphicSheet="MainTiles" CellIndex="75" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="76" GraphicSheet="MainTiles" CellIndex="76" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="77" GraphicSheet="MainTiles" CellIndex="77" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="78" GraphicSheet="MainTiles" CellIndex="78" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="79" GraphicSheet="MainTiles" CellIndex="79" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="80" GraphicSheet="MainTiles" CellIndex="80" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="81" GraphicSheet="MainTiles" CellIndex="81" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="82" GraphicSheet="MainTiles" CellIndex="82" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="83" GraphicSheet="MainTiles" CellIndex="83" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="84" GraphicSheet="MainTiles" CellIndex="84" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="85" GraphicSheet="MainTiles" CellIndex="85" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="86" GraphicSheet="MainTiles" CellIndex="86" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="87" GraphicSheet="MainTiles" CellIndex="87" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="88" GraphicSheet="MainTiles" CellIndex="88" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="89" GraphicSheet="MainTiles" CellIndex="89" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="90" GraphicSheet="MainTiles" CellIndex="90" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="91" GraphicSheet="MainTiles" CellIndex="91" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="92" GraphicSheet="MainTiles" CellIndex="92" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="93" GraphicSheet="MainTiles" CellIndex="93" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="94" GraphicSheet="MainTiles" CellIndex="94" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="95" GraphicSheet="MainTiles" CellIndex="95" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="96" GraphicSheet="MainTiles" CellIndex="96" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="97" GraphicSheet="MainTiles" CellIndex="97" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="98" GraphicSheet="MainTiles" CellIndex="98" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="99" GraphicSheet="MainTiles" CellIndex="99" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="100" GraphicSheet="MainTiles" CellIndex="100" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="101" GraphicSheet="MainTiles" CellIndex="101" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="102" GraphicSheet="MainTiles" CellIndex="102" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="103" GraphicSheet="MainTiles" CellIndex="103" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="104" GraphicSheet="MainTiles" CellIndex="104" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="105" GraphicSheet="MainTiles" CellIndex="105" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="106" GraphicSheet="MainTiles" CellIndex="106" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="107" GraphicSheet="MainTiles" CellIndex="107" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="108" GraphicSheet="MainTiles" CellIndex="108" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="109" GraphicSheet="MainTiles" CellIndex="109" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="110" GraphicSheet="MainTiles" CellIndex="110" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="111" GraphicSheet="MainTiles" CellIndex="111" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="112" GraphicSheet="MainTiles" CellIndex="112" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="113" GraphicSheet="MainTiles" CellIndex="113" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="114" GraphicSheet="MainTiles" CellIndex="114" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="115" GraphicSheet="MainTiles" CellIndex="115" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="116" GraphicSheet="MainTiles" CellIndex="116" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="117" GraphicSheet="MainTiles" CellIndex="117" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="118" GraphicSheet="MainTiles" CellIndex="118" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="119" GraphicSheet="MainTiles" CellIndex="119" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="120" GraphicSheet="MainTiles" CellIndex="120" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="121" GraphicSheet="MainTiles" CellIndex="121" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="122" GraphicSheet="MainTiles" CellIndex="122" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="123" GraphicSheet="MainTiles" CellIndex="123" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="124" GraphicSheet="MainTiles" CellIndex="124" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="125" GraphicSheet="MainTiles" CellIndex="125" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="126" GraphicSheet="MainTiles" CellIndex="126" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="127" GraphicSheet="MainTiles" CellIndex="127" m11="1" m12="0" m21="0" m22="1" dx="0" dy="0" color="-1" />
    <Frame FrameValue="128" GraphicSheet="MainTiles" CellIndex="10" m11="-1" m12="0" m21="0" m22="1" dx="32" dy="0" color="-1" />
    <Frame FrameValue="129" GraphicSheet="MainTiles" CellIndex="17" m11="-1" m12="0" m21="0" m22="1" dx="32" dy="0" color="-1" />
  </Frameset>
  <Tileset Name="LetterTiles" Frameset="LetterFrames" TileWidth="32" TileHeight="32">
    <Tile TileValue="0" />
  </Tileset>
  <Tileset Name="CoolText" Frameset="CoolFontFrames" TileWidth="11" TileHeight="15">
    <Tile TileValue="32" />
    <Tile TileValue="0" />
  </Tileset>
  <Tileset Name="FireText" Frameset="FireFontFrames" TileWidth="11" TileHeight="15">
    <Tile TileValue="0" />
    <Tile TileValue="32" />
  </Tileset>
  <Tileset Name="MainTiles" Frameset="MainFrames" TileWidth="32" TileHeight="32">
    <Tile TileValue="0" />
    <Tile TileValue="24" Counter="ChosenPlayer">
      <TileFrame Sequence="0" FrameValue="24" Duration="1" />
      <TileFrame Sequence="1" FrameValue="0" Duration="1" />
    </Tile>
    <Tile TileValue="130" Counter="ChosenPlayer">
      <TileFrame Sequence="0" FrameValue="0" Duration="1" />
      <TileFrame Sequence="1" FrameValue="24" Duration="1" />
    </Tile>
  </Tileset>
  <Counter Name="FrameCounter" Value="1" Max="1000000000" Min="0" />
  <Counter Name="Coins" Value="0" Max="10000" Min="0" />
  <Counter Name="Wisdom" Folder="" Value="0" Max="100" Min="0" />
  <Counter Name="ChosenPlayer" Folder="" Value="0" Max="1" Min="0" />
  <Map Name="Level1" ScrollMarginLeft="32" ScrollMarginTop="32" ScrollMarginRight="600" ScrollMarginBottom="32" ScrollWidth="4096" ScrollHeight="600">
    <Layer Name="Designer Background" Width="1" Height="1" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="0" ScrollRateY="0" Priority="0" VirtualWidth="4000" VirtualHeight="4000">
      <Tiles>AA==</Tiles>
    </Layer>
    <Layer Name="Sky" Width="51" Height="19" Tileset="MainTiles" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="0.25" ScrollRateY="0.25" ZIndex="1" Priority="0" VirtualWidth="0" VirtualHeight="0">
      <Tiles>AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQECBAUBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAgMDBAUBAQEBAQEBAQEBAgiles>
    </Layer>
    <Layer Name="Ground" Width="128" Height="19" Tileset="MainTiles" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="1" ScrollRateY="1" ZIndex="3" Priority="0" VirtualWidth="0" VirtualHeight="0">
      <TileskAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAggICAgAAAAACQAAAAAAAAAACAgIAAAAAAAAAAAAAAAJAAAAAAAAAAAAAAAAAAgICAgsMAAsAAA0AAAAAAAAAAAkLDAAAAAAAAAAAAA0MCwAAAAAMAAAAAAAAAAsNAAAAAAAAAAAAAAAAAAsAAA0AAAkAAAwNAAsAAAAMAAAAAA0LAAAAAAAAAAAMDQAAAAAAAAALAAAACgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgY=</Tiles>
      <Sprite Name="Player 1" DefinitionName="Player" StateName="Mojaca Running" CurrentFrame="0" X="80" Y="445" DX="0" DY="0" Priority="1" Active="true" Solidity="Standard" Color="-1" LightConstantFalloff="0" LightLinearFalloff="0" LightQuadraticFalloff="0" LightAimX="0" LightAimY="0" LightAimZ="0" LightZ="0" LightApertureFocus="0" LightApertureSoftness="0" />
      <SpritePlan Name="Wisdom1" Priority="1">
        <BaseClass>PlanBase</BaseClass>
        <Coordinate Sequence="1" X="3887" Y="8" Weight="0" />
        <Coordinate Sequence="2" X="4014" Y="559" Weight="0" />
        <PlanRule Name="If entered" Sequence="1" Type="If" Function="IsSpriteWithin" Parameter1="m_ParentLayer.m_Player_1" Parameter2="RelativePosition.CenterMiddle" EndIf="false" Suspended="false" />
        <PlanRule Name="And message not displayed" Sequence="2" Type="And" Function="&lt;" Parameter1="Counter.Wisdom.CurrentValue" Parameter2="1" EndIf="false" Suspended="false" />
        <PlanRule Name="Show quiz 1" Sequence="6" Type="Do" Function="ShowQuiz" Parameter1="&quot;samplequiz.html&quot;" EndIf="true" Suspended="false" />
        <PlanRule Name="Increment Wisdom" Sequence="4" Type="Do" Function="ChangeCounter" Parameter1="Counter.Wisdom" Parameter2="CounterOperation.IncrementAndStop" EndIf="false" Suspended="false" />
        <PlanRule Name="Setup messages" Sequence="3" Type="Do" Function="SetMessageDismissal" Parameter1="GeneralRules.ButtonSpecifier.Second" Parameter2="1" EndIf="false" Suspended="false" />
        <PlanRule Name="Pause" Sequence="5" Type="Do" Function="SetMapFlag" Parameter1="1" Parameter2="true" EndIf="false" Suspended="false" />
      </SpritePlan>
      <SpritePlan Name="Goto Level2" Priority="1">
        <BaseClass>PlanBase</BaseClass>
        <Coordinate Sequence="1" X="4032" Y="0" Weight="0" />
        <Coordinate Sequence="2" X="4064" Y="576" Weight="0" />
        <PlanRule Name="If player here" Sequence="1" Type="If" Function="IsSpriteWithin" Parameter1="m_ParentLayer.m_Player_1" Parameter2="RelativePosition.CenterMiddle" EndIf="false" Suspended="false" />
        <PlanRule Name="Switch to level 2" Sequence="2" Type="Do" Function="SwitchToMap" Parameter1="typeof(Level2_Map)" Parameter2="true" EndIf="true" Suspended="false" />
      </SpritePlan>
    </Layer>
    <Layer Name="Farground" Width="77" Height="19" Tileset="MainTiles" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="0.5" ScrollRateY="0.5" ZIndex="2" Priority="0" VirtualWidth="0" VirtualHeight="0">
      <TileswAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUWFhYXAAAAAAAAAAAAAAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASAAAAAAAAAAAAAAAAAAASAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMAAAAAAAAAAAAAAAAAABIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4ODgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFRYXAAAAAAAAAAAAFAAAAAAAAAAAAAAAAAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADg8OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgAAAAAAAAAAAAATAAAAAAAAAAAAAAAAAAASAAAAAAAAAAAAAAAAAAAAAAAAAAAODg4REIEODg4AAAAAAAAAAAAAAAAAAAAAAAAAAAASAAAAAAAAAAAAABMAAAAAAAAAAAAAAAAAABIAAAAAAAAAAAAAAAAAAAAAAA4ODg4ODhEQgQ4ODg4ODgAAAAAAAAAAAAAAAAAAAAAAABIAAAAAAAAAAAAAFAAAAAAAAAAAAAAAAAAAEgAAAAAAAAAAAAAAAAAAAA4ODg4ODg4OERCBDg4ODg4ODg4OAAAAAAAAAAAAAAAAAAAAEgAAAAAAAAAAAAATAAAAAAAAAAAAAAAAAAASAAAAAAAAAAAAAAAAAAAADg4ODg4ODg4REIEODg4ODg4ODg4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</Tiles>
    </Layer>
  </Map>
  <Map Name="ChoosePlayer" ScrollMarginLeft="32" ScrollMarginTop="32" ScrollMarginRight="32" ScrollMarginBottom="32" ScrollWidth="800" ScrollHeight="600">
    <Layer Name="Designer Background" Width="1" Height="1" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="0" ScrollRateY="0" Priority="0" VirtualWidth="4000" VirtualHeight="4000">
      <Tiles>AA==</Tiles>
    </Layer>
    <Layer Name="Ground" Width="25" Height="19" Tileset="MainTiles" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="1" ScrollRateY="1" ZIndex="1" Priority="0" VirtualWidth="0" VirtualHeight="0">
      <Tiles>AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEHBwcHBwEBAQcHBwcHAQEBAQEBAQEBAQEBBwcHBwcBAQEHBwcHBwEBAQEBAQEBAQEBAQcHBwcHAQEBBwcHBwcBAQEBAQEBAQEBAQEHBwcHBwEBAQcHBwcHAQEBAQEBAQEBAQEBBwcHBwcBAQEHBwcHBwEBAQEBAQEBAQEBAQcHBwcHAQEBBwcHBwcBAQEBAQEGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</Tiles>
      <Sprite Name="PlayerDisplay 1" DefinitionName="PlayerDisplay" StateName="Mojaca" CurrentFrame="0" X="240" Y="128" DX="0" DY="0" Priority="1" Active="true" Color="-1" LightConstantFalloff="0" LightLinearFalloff="0" LightQuadraticFalloff="0" LightAimX="0" LightAimY="0" LightAimZ="0" LightZ="0" LightApertureFocus="0" LightApertureSoftness="0" />
      <Sprite Name="PlayerDisplay 2" DefinitionName="PlayerDisplay" StateName="Yaja" CurrentFrame="0" X="487" Y="128" DX="0" DY="0" Priority="1" Active="true" Color="-1" LightConstantFalloff="0" LightLinearFalloff="0" LightQuadraticFalloff="0" LightAimX="0" LightAimY="0" LightAimZ="0" LightZ="0" LightApertureFocus="0" LightApertureSoftness="0" />
      <SpritePlan Name="ChangeChoice" Priority="1">
        <BaseClass>PlanBase</BaseClass>
        <PlanRule Name="If pressing right" Sequence="1" Type="If" Function="IsKeyPressed" Parameter1="Key.Right" EndIf="false" Suspended="false" />
        <PlanRule Name="Highlight right player" Sequence="2" Type="Do" Function="ChangeCounter" Parameter1="Counter.ChosenPlayer" Parameter2="CounterOperation.SetToMaximum" EndIf="true" Suspended="false" />
        <PlanRule Name="If pressing left" Sequence="3" Type="If" Function="IsKeyPressed" Parameter1="Key.Left" EndIf="false" Suspended="false" />
        <PlanRule Name="Highlight left player" Sequence="4" Type="Do" Function="ChangeCounter" Parameter1="Counter.ChosenPlayer" Parameter2="CounterOperation.SetToMinimum" EndIf="true" Suspended="false" />
        <PlanRule Name="If pressing enter" Sequence="5" Type="If" Function="IsKeyPressed" Parameter1="Key.Enter" EndIf="false" Suspended="false" />
        <PlanRule Name="Go to level 1" Sequence="6" Type="Do" Function="SwitchToMap" Parameter1="typeof(Level1_Map)" Parameter2="true" EndIf="true" Suspended="false" />
      </SpritePlan>
    </Layer>
    <Layer Name="Selector" Width="25" Height="19" Tileset="MainTiles" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="1" ScrollRateY="1" ZIndex="2" Priority="0" VirtualWidth="0" VirtualHeight="0">
      <Tiles>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgYGBgYGBgAgoKCgoKCggAAAAAAAAAAAAAYAAAAAAAYAIIAAAAAAIIAAAAAAAAAAAAAGAAAAAAAGACCAAAAAACCAAAAAAAAAAAAABgAAAAAABgAggAAAAAAggAAAAAAAAAAAAAYAAAAAAAYAIIAAAAAAIIAAAAAAAAAAAAAGAAAAAAAGACCAAAAAACCAAAAAAAAAAAAABgYGBgYGBgAgoKCgoKCggAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</Tiles>
    </Layer>
  </Map>
  <Map Name="Level2" ScrollMarginLeft="32" ScrollMarginTop="32" ScrollMarginRight="600" ScrollMarginBottom="32" ScrollWidth="4096" ScrollHeight="600">
    <Layer Name="Designer Background" Width="1" Height="1" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="0" ScrollRateY="0" ZIndex="0" Priority="0" VirtualWidth="4000" VirtualHeight="4000">
      <Tiles>AA==</Tiles>
    </Layer>
    <Layer Name="Farground" Width="77" Height="19" Tileset="MainTiles" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="0.5" ScrollRateY="0.5" ZIndex="2" Priority="0" VirtualWidth="0" VirtualHeight="0">
      <TileshYWFhYWFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVFhYWFhYXAAAAAAAAAAAAAAAAABIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAODg4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAAAAAAAAAAAAAAAAASAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4PDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAAAAAAAAAAAAAAAAAABIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOERCBDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMAAAAAAAAAAAAAAAAAAAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4REIEOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAAAAAAAAAAAAAAAAASAAAAAAAAAAAAAAAVFhcAAAAAAAAAAAAAAA4ODhEQgQ4ODgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAAABIAAAAAAAAAAAAAAAAUAAAAAAAAAAAAAAAADg4OERCBDg4OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMAAAAAAAAAAAAAAAAAAAAAEgAAAAAAAAAAAAAAABQAAAAAAAAAAAAADg4ODg4REIEODg4ODgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAAAAAAAAAAAAAVFhcSAAAAAAAAAAAAFRYWFBcAAAAAAAAAAAAODg4ODhEQgQ4ODg4OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAAAAAAAAAAAAAAAASABIAAAAAAAAAAAAAABISAAAAAAAAAAAODg4ODg4OERCBDg4ODg4ODgAAAAAAAAAAAAAAAAAAAAAAAAAAABMAAAAAAAAAAAAAAAAAABIAEgAAAAAAAAAAAAAAEhIAAAAAAAAAAA4ODg4ODg4REIEODg4ODg4OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY=</Tiles>
    </Layer>
    <Layer Name="Sky" Width="51" Height="19" Tileset="MainTiles" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="0.25" ScrollRateY="0.25" ZIndex="1" Priority="0" VirtualWidth="0" VirtualHeight="0">
      <Tiles>AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQIDAwQDAwQFAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQIDBAUBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQECAwQFAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAgQFAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQIFAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQECAwMEBQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB</Tiles>
    </Layer>
    <Layer Name="Ground" Width="128" Height="19" Tileset="MainTiles" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="1" ScrollRateY="1" ZIndex="3" Priority="0" VirtualWidth="0" VirtualHeight="0">
      <TileskAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAICAgAAAAAAAkgIAAAAAAAAAAAAAAAAAAkAAAAAAAAACAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAAAAAAAAAAAAAVFhYWFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgYGBgYGBgYGBgYGBgYGBgaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBgaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoGBgYGBgYGBgYGBgYGBgYGBgaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYGBgaAAAAAAAAAAAAAAAAAAAAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAAAAAAAAAAAAAAAAoGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgYGBgYGBgcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgY=</Tiles>
      <Sprite Name="Player 1" DefinitionName="Player" StateName="Mojaca Running" CurrentFrame="0" X="7" Y="381" DX="0" DY="0" Priority="1" Active="true" Solidity="Standard" Color="-1" LightConstantFalloff="0" LightLinearFalloff="0" LightQuadraticFalloff="0" LightAimX="0" LightAimY="0" LightAimZ="0" LightZ="0" LightApertureFocus="0" LightApertureSoftness="0" />
    </Layer>
  </Map>
  <Map Name="Overlay" ScrollMarginLeft="32" ScrollMarginTop="32" ScrollMarginRight="32" ScrollMarginBottom="32" ScrollWidth="800" ScrollHeight="600">
    <Layer Name="Designer Background" Width="1" Height="1" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="0" ScrollRateY="0" Priority="0" VirtualWidth="4000" VirtualHeight="4000">
      <Tiles>AA==</Tiles>
    </Layer>
    <Layer Name="MainLayer" Width="100" Height="15" Tileset="LetterTiles" BytesPerTile="1" OffsetX="0" OffsetY="0" ScrollRateX="1" ScrollRateY="1" ZIndex="1" Priority="0" VirtualWidth="0" VirtualHeight="0">
      <Tiles>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</Tiles>
      <SpritePlan Name="CoinCount" Priority="1">
        <BaseClass>PlanBase</BaseClass>
        <Coordinate Sequence="1" X="96" Y="32" Weight="0" />
        <Coordinate Sequence="2" X="256" Y="96" Weight="0" />
        <PlanRule Name="DrawCoinCount" Sequence="1" Type="Do" Function="DrawBigCounter" Parameter1="Counter.Coins" EndIf="false" Suspended="false" />
      </SpritePlan>
    </Layer>
  </Map>
  <SpriteDefinition Name="Player" Folder="" BaseClass="SpriteBase">
    <SpriteRule Name="Get Input" Sequence="1" Type="Do" Function="MapPlayerToInputs" Parameter1="1" EndIf="false" Suspended="false" />
    <SpriteRule Name="If pressing jump" Sequence="5" Type="If" Function="IsInputPressed" Parameter1="SpriteBase.InputBits.Up" Parameter2="true" EndIf="false" Suspended="false" />
    <SpriteRule Name="React to solids" Sequence="9" Type="Do" Function="ReactToSolid" EndIf="false" Suspended="false" />
    <SpriteRule Name="Move" Sequence="11" Type="Do" Function="MoveByVelocity" EndIf="false" Suspended="false" />
    <SpriteRule Name="Scroll" Sequence="14" Type="Do" Function="ScrollSpriteIntoView" Parameter1="true" EndIf="false" Suspended="false" />
    <SpriteRule Name="Animate" Sequence="15" Type="Do" Function="Animate" Parameter1="SpriteBase.SpriteAnimationType.ByFrame" EndIf="false" Suspended="false" />
    <SpriteRule Name="Limit Framerate" Sequence="19" Type="Do" Function="LimitFrameRate" Parameter1="30" EndIf="false" Suspended="false" />
    <SpriteRule Name="Take" Sequence="13" Type="Do" Function="TileTake" Parameter1="9" Parameter2="Counter.Coins" Parameter3="0" ResultParameter="" EndIf="false" Suspended="false" />
    <SpriteRule Name="Touch Tiles" Sequence="12" Type="Do" Function="TouchTiles" Parameter1="TileCategoryName.Touchable" EndIf="false" Suspended="false" />
    <SpriteRule Name="Autorun" Sequence="8" Type="Do" Function="=" Parameter1="8" ResultParameter="dx" EndIf="false" Suspended="false" />
    <SpriteRule Name="Jump" Sequence="7" Type="Do" Function="=" Parameter1="-20" ResultParameter="dy" EndIf="true" Suspended="false" />
    <SpriteRule Name="And on solid" Sequence="6" Type="And" Function="Blocked" Parameter1="SpriteBase.Direction.Down" EndIf="false" Suspended="false" />
    <SpriteRule Name="Apply gravity" Sequence="4" Type="Do" Function="AlterYVelocity" Parameter1="1" EndIf="false" Suspended="false" />
    <SpriteRule Name="Snap" Sequence="10" Type="Do" Function="SnapToGround" Parameter1="10" EndIf="false" Suspended="false" />
    <SpriteRule Name="Else if pressed button 2" Sequence="16" Type="ElseIf" Function="IsInputPressed" Parameter1="SpriteBase.InputBits.Button2" Parameter2="true" EndIf="false" Suspended="false" />
    <SpriteRule Name="If not paused" Sequence="3" Type="If" Function="!IsMapFlagOn" Parameter1="1" EndIf="false" Suspended="false" />
    <SpriteRule Name="Unpause" Sequence="17" Type="Do" Function="SetMapFlag" Parameter1="1" Parameter2="false" EndIf="true" Suspended="false" />
    <SpriteRule Name="End if paused" Sequence="18" Type="End" Function="End" EndIf="true" Suspended="false" />
    <SpriteRule Name="Switch to chosen player" Sequence="2" Type="Do" Function="SwitchToState" Parameter1="Counter.ChosenPlayer.CurrentValue" Parameter2="RelativePosition.TopLeft" EndIf="false" Suspended="false" />
    <SpriteState Name="Mojaca Running" FramesetName="PlayerFrames" SolidWidth="64" SolidHeight="128" Sequence="1">
      <SpriteFrame Sequence="0" FrameValue="0" Duration="6" MaskAlphaLevel="0" />
      <SpriteFrame Sequence="1" FrameValue="1" Duration="6" MaskAlphaLevel="0" />
    </SpriteState>
    <SpriteState Name="Yaja Running" FramesetName="PlayerFrames" SolidWidth="64" SolidHeight="128" Sequence="2">
      <SpriteFrame Sequence="0" FrameValue="8" Duration="6" MaskAlphaLevel="0" />
    </SpriteState>
  </SpriteDefinition>
  <SpriteDefinition Name="PlayerDisplay" Folder="" BaseClass="SpriteBase">
    <SpriteState Name="Mojaca" FramesetName="PlayerFrames" SolidWidth="64" SolidHeight="128" Sequence="1">
      <SpriteFrame Sequence="0" FrameValue="0" Duration="1" MaskAlphaLevel="0" />
    </SpriteState>
    <SpriteState Name="Yaja" FramesetName="PlayerFrames" SolidWidth="64" SolidHeight="128" Sequence="2">
      <SpriteFrame Sequence="0" FrameValue="8" Duration="1" MaskAlphaLevel="0" />
    </SpriteState>
  </SpriteDefinition>
  <Solidity Name="Standard">
    <SolidityShape CategoryName="Solid" ShapeName="SolidTileShape" />
    <SolidityShape CategoryName="TopSolid" ShapeName="TopSolidTileShape" />
    <SolidityShape CategoryName="Uphill" ShapeName="UphillTileShape" />
    <SolidityShape CategoryName="Downhill" ShapeName="DownhillTileShape" />
  </Solidity>
  <SourceCode Name="OpenTK.dll" IsCustomObject="true">
    <Text>/*
   Because this is a binary file, this text only
   serves as a comment and will not be compiled.
*/</Text>
  </SourceCode>
  <SourceCode Name="OpenTK.GLControl.dll" IsCustomObject="true">
    <Text>/*
   Because this is a binary file, this text only
   serves as a comment and will not be compiled.
*/</Text>
  </SourceCode>
  <SourceCode Name="PlanBase.cs" IsCustomObject="false">
    <Text>/*
 * Created using Scrolling Game Development Kit 2.0
 * See Project.cs for copyright/licensing details
 */
using System;
using System.ComponentModel;
using System.Drawing;

/// &lt;summary&gt;
/// Base class for "plans", which consist of map coordinates and rules
/// &lt;/summary&gt;
[Serializable()]
public abstract partial class PlanBase : GeneralRules, System.Collections.IEnumerable
{
   /// &lt;summary&gt;
   /// This value is used by &lt;see cref="CheckNextCoordinate"/&gt; to determine how close a
   /// sprite must be to a coordinate before heading to the next coordinate.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The default value for this property is 5 pixels.&lt;/remarks&gt;
   [Description("How close must a sprite be to a coordinate in this plan before heading to the next (default=5)")]
   public int TargetDistance = 5;

   protected PointF[] corners = null;

   protected PlanBase()
   {
   }

   /// &lt;summary&gt;
   /// Stores information about a coordinate within a &lt;see cref="PlanBase"/&gt;.
   /// &lt;/summary&gt;
   [Serializable()]
   public struct Coordinate
   {
      /// &lt;summary&gt;
      /// The horizontal aspect of this coordinate
      /// &lt;/summary&gt;
      public int x;
      /// &lt;summary&gt;
      /// The vercial aspect of this coordinate 
      /// &lt;/summary&gt;
      public int y;
      /// &lt;summary&gt;
      /// Can be used to store any additional piece of information about this coordinate,
      /// but &lt;see cref="PlanBase.CheckNextCoordinate"/&gt; will use it to define a wait period
      /// for a sprite arriving at this coordinate before proceeding to the next.
      /// &lt;/summary&gt;
      public int weight;
      /// &lt;summary&gt;
      /// Creates a new coordinate given all its properties
      /// &lt;/summary&gt;
      /// &lt;param name="x"&gt;Provides the &lt;see cref="x"/&gt; value for this coordinate&lt;/param&gt;
      /// &lt;param name="y"&gt;Provides the &lt;see cref="y"/&gt; value for this coordinate&lt;/param&gt;
      /// &lt;param name="weight"&gt;Provides the &lt;see cref="weight"/&gt; calue for this coordinate&lt;/param&gt;
      public Coordinate(int x, int y, int weight)
      {
         this.x = x;
         this.y = y;
         this.weight = weight;
      }
      /// &lt;summary&gt;
      /// Allows a path coordinate to be automatically used as a Point
      /// &lt;/summary&gt;
      public static implicit operator Point(Coordinate value)
      {
         return new Point(value.x, value.y);
      }
   }

   /// &lt;summary&gt;
   /// Returns the rectangle defined by a plan
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Plans with 2 points define a rectanglular area that can be used
   /// for a variety of purposes. This property will return the plan defined by
   /// the plan's two points for such plans.  It will return an empty regtangle
   /// if the plan does not have exactly 2 points.&lt;/remarks&gt;
   public virtual Rectangle PlanRectangle
   {
      get
      {
         return Rectangle.Empty;
      }
   }


   #region Sprites
   /// &lt;summary&gt;
   /// Make the specified sprite active.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Specifies which sprite instance to activate&lt;/param&gt;
   /// &lt;remarks&gt;If the specified sprite instance is already active, this has
   /// no effect.&lt;/remarks&gt;
   [Description("Make the specified sprite active.")]
   public virtual void ActivateSprite(SpriteBase Target)
   {
      Target.isActive = true;
   }

   /// &lt;summary&gt;
   /// Make the specified sprite inactive.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Specifies which sprite instance to deactivate&lt;/param&gt;
   /// &lt;remarks&gt;If the specified sprite instance is already inactive, this
   /// has no effect.&lt;/remarks&gt;
   [Description("Make the specified sprite inactive.")]
   public virtual void DeactivateSprite(SpriteBase Target)
   {
      Target.isActive = false;
   }

   /// &lt;summary&gt;
   /// Set the position of the target sprite to match that of the source sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Specifies the sprite whose position will change.&lt;/param&gt;
   /// &lt;param name="Source"&gt;Specifies the sprite whose position is copied.&lt;/param&gt;
   /// &lt;remarks&gt;This very simply copies the position from the source sprite to that
   /// of the target sprite. No tests are performed for solidity and no velocity is
   /// changed. The old position of the target sprite, however, is tracked, so it's
   /// still possible to determine if the sprite was touching a tile or plan before
   /// it moved with a function like &lt;see cref="WasSpriteTouching"/&gt;.
   /// &lt;seealso cref="TransportToPoint"/&gt;
   /// &lt;seealso cref="TransportToPlan"/&gt;&lt;/remarks&gt;
   [Description("Set the position of the target sprite to match that of the source sprite.")]
   public virtual void MatchSpritePosition(SpriteBase Target, SpriteBase Source)
   {
      Target.oldX = Target.x;
      Target.oldY = Target.y;
      Target.x = Source.x;
      Target.y = Source.y;
   }

   /// &lt;summary&gt;
   /// Determines if the specified sprite is touching this plan's rectangle.
   /// &lt;/summary&gt;
   /// &lt;param name="sprite"&gt;Sprite to test&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite's solidity rectangle is touching this plan's rectangle,
   /// otherwise false.&lt;/returns&gt;
   /// &lt;remarks&gt;"Touching" means one rectangle is overlapping the other, or the borders
   /// are immediately adjacent. The rectangles are not considered touching if the corners
   /// are only diagonally adjacent (kitty-corner). There must be some length of adjecent
   /// edge. This ensures that a plan that is blocked off by two diagonally-arranged
   /// solid blocks can't be touched (and thus potentially "activated") through the crack.
   /// &lt;/remarks&gt;
   [Description("Returns true if the specified sprite is touching this plan's rectangle")]
   public virtual bool IsSpriteTouching(SpriteBase sprite)
   {
      if (!sprite.isActive)
         return false;

      Rectangle spriteRect = new Rectangle(sprite.PixelX, sprite.PixelY, sprite.SolidWidth, sprite.SolidHeight);
      Rectangle targetRect = PlanRectangle;
      if (!spriteRect.IntersectsWith(Rectangle.Inflate(targetRect,2,2)))
         return false;
      if (spriteRect.IntersectsWith(Rectangle.Inflate(targetRect,2,0)) ||
         spriteRect.IntersectsWith(Rectangle.Inflate(targetRect,0,2)))
         return true;
      else
         return false;
   }

   /// &lt;summary&gt;
   /// Determines if the specified part of the specified sprite is within the plan's rectangle.
   /// &lt;/summary&gt;
   /// &lt;param name="sprite"&gt;Sprite whose position will be tested&lt;/param&gt;
   /// &lt;param name="RelativePosition"&gt;Specifies a point within the sprite to test&lt;/param&gt;
   /// &lt;returns&gt;True if the specified point within the specified sprite's solidity rectangle is
   /// within the plan's rectangle.&lt;/returns&gt;
   /// &lt;remarks&gt;Unlike &lt;see cref="IsSpriteTouching"/&gt;, this can only return true when the sprite
   /// and the plan's rectangle actually overlap because the point is inside the sprite's
   /// rectangle, and must also be inside the plan's rectangle to return true.
   /// &lt;seealso cref="GetSpriteWithin"/&gt;&lt;seealso cref="IsSpriteWithinPolygon"/&gt;&lt;/remarks&gt;
   [Description("Returns true if the specified part of the specified sprite is within the plan's rectangle")]
   public virtual bool IsSpriteWithin(SpriteBase sprite, RelativePosition RelativePosition)
   {
      System.Drawing.Point rp = sprite.GetRelativePosition(RelativePosition);
      Rectangle targetRect = PlanRectangle;
      return targetRect.Contains(rp);
   }

   /// &lt;summary&gt;
   /// Determines if the specified part of any active sprite in the specified category is within the plan's rectangle.
   /// &lt;/summary&gt;
   /// &lt;param name="Sprites"&gt;Sprite collection to be checked&lt;/param&gt;
   /// &lt;param name="RelativePosition"&gt;Specifies a point within each sprite to test&lt;/param&gt;
   /// &lt;param name="Skip"&gt;Indicates the index to skip over. All sprite indexes up to and including
   /// Skip will be skipped in teh search. This allows the function to be called repeatedly,
   /// passing the previous return value as the Skip value to retrieve the next applicable sprite
   /// index. Specify -1 to search all sprites in the collection.&lt;/param&gt;
   /// &lt;returns&gt;-1 if no active sprite is found in the collection where the specified point of the sprite's
   /// solidity rectangle is within the plan's rectangle. Otherwise the 0-based index of the
   /// first matching sprite is returned.&lt;/returns&gt;
   /// &lt;remarks&gt;This is the same as performing &lt;see cref="IsSpriteWithin"/&gt; for each active sprite
   /// in a collection (beginning with the sprite whose index is after Skip).
   /// &lt;seealso cref="IsSpriteWithin"/&gt;&lt;/remarks&gt;
   [Description("Returns the index of the first active sprite whose specified coordinate is within the plan's rectangle, or -1 if none exist. Indexes up through Skip will be ignored.")]
   public virtual int GetSpriteWithin(SpriteCollection Sprites, RelativePosition RelativePosition, int Skip)
   {
      for (int i=Skip+1; i &lt; Sprites.Count; i++)
      {
         if (Sprites[i].isActive &amp;&amp; (IsSpriteWithin(Sprites[i], RelativePosition)))
            return i;
      }
      return -1;
   }

   /// &lt;summary&gt;
   /// Determines if the specified sprite was touching this plan's rectangle in the previous frame.
   /// &lt;/summary&gt;
   /// &lt;param name="sprite"&gt;Sprite to test&lt;/param&gt;
   /// &lt;returns&gt;True if the specified sprite was touching this plan's rectangle previously, or false
   /// if it wasn't.&lt;/returns&gt;
   /// &lt;remarks&gt;This function is identical to &lt;see cref="IsSpriteTouching"/&gt; except that it operates
   /// on the sprite's previous position instead of its current position. This is useful for
   /// determining if the sprite just started touching a plan's rectangle or was already touching
   /// it. Often times it's desirable to perform an automated action like a message only
   /// when a sprite initially touches a plan's rectangle. It's not as desirable for plan rules
   /// that also require other conditions to activate.
   /// Consider, for example, a plan that displays
   /// a message when the sprite touches it. This plan can automatically display the message only
   /// when the sprite first touches the plan, and everything will be fine. But what happens if
   /// it's also required that a button be pressed to activate the rule?  The player may start
   /// touching the plan without touching the button.  Then when the player presses the button,
   /// the rule won't activate because this is no longer the frame when the sprite initially
   /// started touching the plan, so the plan may never get activated.
   /// &lt;/remarks&gt;
   [Description("Returns true if the specified sprite was touching this plan's rectangle in the previous frame")]
   public virtual bool WasSpriteTouching(SpriteBase sprite)
   {
      Rectangle spriteRect = new Rectangle(sprite.OldPixelX, sprite.OldPixelY, sprite.SolidWidth, sprite.SolidHeight);
      Rectangle targetRect = PlanRectangle;
      if (!spriteRect.IntersectsWith(Rectangle.Inflate(targetRect,2,2)))
         return false;
      if (spriteRect.IntersectsWith(Rectangle.Inflate(targetRect,2,0)) ||
         spriteRect.IntersectsWith(Rectangle.Inflate(targetRect,0,2)))
         return true;
      else
         return false;
   }


   /// &lt;summary&gt;
   /// Scroll all layers on this plan's layer's map so that the specified sprite is within the visible area of the map.
   /// &lt;/summary&gt;
   /// &lt;param name="Sprite"&gt;Specified which sprite will be scrolled into view.&lt;/param&gt;
   /// &lt;param name="UseScrollMargins"&gt;If true, the layer will scroll the sprite into the scroll margins
   /// of the map, otherwise it will only be scrolled just far enough for the sprite to be fully visible
   /// on the display.&lt;/param&gt;
   /// &lt;remarks&gt;For multi-player games, it may be desirable to set UseScrollMargins to false
   /// to allow at least one player to get closer to the edge of the screen without trying to
   /// keep it scrolled so strictly within the scroll margin area.
   /// &lt;seealso cref="PushSpriteIntoView"/&gt;&lt;/remarks&gt;
   [Description("Scroll all layers on this plan's layer's map so that the specified sprite is within the visible area of the map.  If UseScrollMargins is true, the layer will scroll the sprite into the scroll margins of the map.")]
   public virtual void ScrollSpriteIntoView(SpriteBase Sprite, bool UseScrollMargins)
   {
      ParentLayer.ScrollSpriteIntoView(Sprite, UseScrollMargins);
   }

   /// &lt;summary&gt;
   /// Alter the velocity of the specified sprite to go toward a coordinate associated with the current plan.
   /// &lt;/summary&gt;
   /// &lt;param name="Sprite"&gt;Sprite whose velocity will be affected&lt;/param&gt;
   /// &lt;param name="CoordinateIndex"&gt;Indicates the 0-based index of the coordinate in the current plan toward which the sprite will be pushed&lt;/param&gt;
   /// &lt;param name="Force"&gt;How hard to push the sprite in tenths of a pixel per frame per frame&lt;/param&gt;
   /// &lt;remarks&gt;Use this in combination with &lt;see cref="CheckNextCoordinate"/&gt; to make a
   /// sprite follow a series of coordinates in a path. This function is identical to
   /// &lt;see cref="PushSpriteTowardPoint"/&gt; except that it is designed only to operate on
   /// coordinates within the current plan (designated by coordinate index).&lt;/remarks&gt;
   /// &lt;example&gt;
   /// See &lt;see cref="StopSprite"/&gt; for an example.
   /// &lt;/example&gt;
   [Description("Alter the velocity of the specified sprite to go toward a coordinate associated with the current plan.  CoordinateIndex indicates which coordinate in the plan to head toward, and Force is how hard to push the sprite in tenths of a pixel per frame per frame")]
   public virtual void PushSpriteTowardCoordinate(SpriteBase Sprite, int CoordinateIndex, int Force)
   {
      PushSpriteTowardPoint(Sprite, this[CoordinateIndex], Force);
   }

   /// &lt;summary&gt;
   /// Alter the velocity of the specified sprite to go toward a specified location.
   /// &lt;/summary&gt;
   /// &lt;param name="Sprite"&gt;The sprite whose velocity will be affected&lt;/param&gt;
   /// &lt;param name="Target"&gt;Specifies a point toward which the sprite will be pushed&lt;/param&gt;
   /// &lt;param name="Force"&gt;How hard to push the sprite in tenths of a pixel per frame per frame&lt;/param&gt;
   /// &lt;remarks&gt;This function is a more generalized form of &lt;see cref="PushSpriteTowardCoordinate"/&gt;.
   /// Rather than pushing a sprite toward a coordinate in the current plan, it can push it toward
   /// any location that can be represented as a point.&lt;/remarks&gt;
   /// &lt;example&gt;
   /// This example pushes the sprite toward the mouse location.
   /// &lt;code&gt;PushSpriteTowardPoint(m_ParentLayer.m_Plasma_1, ParentLayer.GetMousePosition(), 40);&lt;/code&gt;
   /// &lt;/example&gt;
   [Description("Alter the velocity of the specified sprite to go toward a specified location.  Force is how hard to push the sprite in tenths of a pixel per frame per frame")]
   public virtual void PushSpriteTowardPoint(SpriteBase Sprite, Point Target, int Force)
   {
      double dx = Target.X - Sprite.PixelX;
      double dy = Target.Y - Sprite.PixelY;

      // Normalize target vector to magnitude of Force parameter
      double dist = Math.Sqrt(dx * dx + dy * dy);
      if (dist &gt; 0)
      {
         dx = dx * Force / dist / 10;
         dy = dy * Force / dist / 10;

         // Push sprite
         Sprite.dx += dx;
         Sprite.dy += dy;
      }
   }

   /// &lt;summary&gt;
   /// Make a sprite move toward the next coordinate in the plan when appropriate.
   /// &lt;/summary&gt;
   /// &lt;param name="Sprite"&gt;Sprite that is following coordinates in this plan&lt;/param&gt;
   /// &lt;param name="CoordinateIndex"&gt;Zero-based index of the coordinate within the plan toward which the sprite is currently heading.&lt;/param&gt;
   /// &lt;param name="WaitCounter"&gt;A variable that is used to count frames while this sprite is waiting at a coordinate for a time period specified by the coordinate's &lt;see cref="Coordinate.weight"/&gt; to elapse.&lt;/param&gt;
   /// &lt;returns&gt;The index of the coordinate toward which the sprite should be heading.&lt;/returns&gt;
   /// &lt;remarks&gt;&lt;para&gt;This function determines if the sprite should head toward the next coordinate by
   /// checking if the sprite is within this plan's &lt;see cref="TargetDistance"/&gt; of the specified
   /// coordinate. If it is, then it checks the coordinate's &lt;see cref="Coordinate.weight"/&gt;,
   /// to see if the sprite is supposed to wait at this coordinate.  If it's not supposed to wait,
   /// the function returns the next coordinate index right away. If it is supposed to wait,
   /// the function will only return the next coordinate index if the sprite has waited the
   /// specified number of frames at the current coordinate.&lt;/para&gt;
   /// &lt;para&gt;Normally two sprite parameters are used in conjunction with a sprite that follows
   /// a series of coordinates in a plan, and they are both passed into this function. One
   /// parameter tracks the index of the coordinate toward which the the sprite is currently
   /// heading. The other tracks how long the sprite has waited at the current coordinate.
   /// The coordinate parameter is passed in as the the input for &lt;paramref name="CoordinateIndex"/&gt;
   /// and also specified to receive the output of the function. The wait counter is passed for
   /// the last parameter and is automatically updated when needed because it is passed by reference.
   /// &lt;/para&gt;&lt;seealso cref="PushSpriteTowardCoordinate"/&gt;&lt;/remarks&gt;
   /// &lt;example&gt;
   /// This example demonstrates the common usage of this function on a sprite named "Plasma 1".
   /// &lt;code&gt;m_ParentLayer.m_Plasma_1.CoordIndex = CheckNextCoordinate(m_ParentLayer.m_Plasma_1, m_ParentLayer.m_Plasma_1.CoordIndex, ref m_ParentLayer.m_Plasma_1.WaitCounter);&lt;/code&gt;
   /// For a more complete example, see &lt;see cref="StopSprite"/&gt;.
   /// &lt;/example&gt;
   [Description("Determine whether the sprite is within the TargetDistance of the specified coordinate, and has waited for the number of frames determined by the coordinate's weight based on the specified WaitCounter after reaching it.  If so, return the next CoordinateIndex, otherwise return the current CoordinateIndex.")]
   public virtual int CheckNextCoordinate(SpriteBase Sprite, int CoordinateIndex, ref int WaitCounter)
   {
      if (WaitCounter &gt; 0)
      {
         if (++WaitCounter &gt; this[CoordinateIndex].weight)
         {
            WaitCounter = 0;
            return (CoordinateIndex + 1) % Count;
         }
         else
            return CoordinateIndex;
      }
      int dx = this[CoordinateIndex].x - Sprite.PixelX;
      int dy = this[CoordinateIndex].y - Sprite.PixelY;
      if (Math.Sqrt(dx * dx + dy * dy) &lt;= TargetDistance)
      {
         if (this[CoordinateIndex].weight &gt; 0)
            WaitCounter++;
         else
            return (CoordinateIndex + 1) % Count;
      }
      return CoordinateIndex;
   }

   /// &lt;summary&gt;
   /// Cause the specified sprite to follow the coordinates in this plan as a path.
   /// &lt;/summary&gt;
   /// &lt;param name="Sprite"&gt;Sprite that will follow this plan's path.&lt;/param&gt;
   /// &lt;param name="CoordinateIndex"&gt;0-based index of the coordinate in this plan toward which the sprite is currently heading.  This is usually a parameter of the sprite.&lt;/param&gt;
   /// &lt;param name="WaitCounter"&gt;Counter that tracks how long a sprite has waited at a particular coordinage. This is usualyl a parameter of the sprite.&lt;/param&gt;
   /// &lt;remarks&gt;This function combines a number of other path-following rule functions into a single
   /// simple function that you can use to make a sprite follow a path with just a single rule.
   /// The following rule functions are combined within this function:
   /// &lt;see cref="IsSpriteActive"/&gt;,
   /// &lt;see cref="PushSpriteTowardCoordinate"/&gt;,
   /// &lt;see cref="StopSprite"/&gt;
   /// &lt;see cref="CheckNextCoordinate"/&gt;,
   /// &lt;note type="caution"&gt;When using this function to follow a path, the sprite definition
   /// itself is responsible for limiting the speed (see &lt;see cref="SpriteBase.LimitVelocity"/&gt;) and
   /// performing the actual movement (see &lt;see cref="SpriteBase.MoveByVelocity"/&gt;).&lt;/note&gt;
   /// &lt;/remarks&gt;
   [Description("Cause the specified sprite to follow the coordinates in this plan as a path, provided some parameters where the current point index and wait counter can be stored.")]
   public virtual void FollowPath(SpriteBase Sprite, ref int CoordinateIndex, ref int WaitCounter)
   {
      if (Sprite.isActive)
      {
         if (WaitCounter == 0)
            PushSpriteTowardCoordinate(Sprite, CoordinateIndex, 10);
         else
            StopSprite(Sprite);
         CoordinateIndex = CheckNextCoordinate(Sprite, CoordinateIndex, ref WaitCounter);
      }
   }

   /// &lt;summary&gt;
   /// Stops the sprite's current motion
   /// &lt;/summary&gt;
   /// &lt;param name="Sprite"&gt;Sprite to be stopped&lt;/param&gt;
   /// &lt;remarks&gt;This stops the current sprite from moving by setting its
   /// &lt;see cref="SpriteBase.dx"/&gt; and &lt;see cref="SpriteBase.dy"/&gt; values
   /// to zero. This may be desired when a sprite reaches a coordinate in
   /// a path where it's supposed to wait, otherwise the sprite may continue
   /// to drift while it waits. One easy way to determine when a sprite is
   /// waiting at a coordinate is to check if the sprite's wait counter parameter
   /// is zero. The wait counter will only be non-zero when the sprite is waiting.
   /// &lt;seealso cref="CheckNextCoordinate"/&gt;
   /// &lt;/remarks&gt;
   /// &lt;example&gt;
   /// The following example shows the code used for a sprite named "Plasma 1" that
   /// follows a path and stops and waits at coordinates that have a non-zero weight.
   /// &lt;code lang="C#"&gt;
   /// // If active
   /// if (&lt;see cref="IsSpriteActive"/&gt;(m_ParentLayer.m_Plasma_1))
   /// {
   ///    // If not waiting
   ///    if ((m_ParentLayer.m_Plasma_1.WaitCounter == 0))
   ///    {
   ///       // Move sprite towards coordinate
   ///       &lt;see cref="PushSpriteTowardCoordinate"/&gt;(m_ParentLayer.m_Plasma_1, m_ParentLayer.m_Plasma_1.CoordIndex, 40);
   ///    }
   ///    else
   ///    {
   ///       // Else stop sprite
   ///       &lt;see cref="StopSprite"/&gt;(m_ParentLayer.m_Plasma_1);
   ///    }
   ///    // Move to next coordinate
   ///   m_ParentLayer.m_Plasma_1.CoordIndex = &lt;see cref="CheckNextCoordinate"/&gt;(m_ParentLayer.m_Plasma_1, m_ParentLayer.m_Plasma_1.CoordIndex, ref m_ParentLayer.m_Plasma_1.WaitCounter);
   /// }
   /// &lt;/code&gt;
   /// &lt;/example&gt;
   [Description("Set the velocity of the specified sprite to zero")]
   public virtual void StopSprite(SpriteBase Sprite)
   {
      Sprite.dx = Sprite.dy = 0;
   }

   /// &lt;summary&gt;
   /// Determines whether the solidity rectangle of the specified sprite overlaps that
   /// of any sprite in the specified category.
   /// &lt;/summary&gt;
   /// &lt;param name="SourceSprite"&gt;A sprite that will be checked for collisions&lt;/param&gt;
   /// &lt;param name="Targets"&gt;A category of sprites against which collisions will be tested&lt;/param&gt;
   /// &lt;returns&gt;The 0-based index of the sprite within &lt;paramref name="Targets"/&gt; if a collision is occurring, otherwise -1.&lt;/returns&gt;
   /// &lt;remarks&gt;This can be used to force a simple rectangular collision test even if one or both
   /// sprites involved have a Mask Alpha level greater than 0.  This method is recommended
   /// for improved performance when pixel-perfect collision detection is not required.
   /// &lt;seealso cref="TestCollisionMask"/&gt;&lt;/remarks&gt;
   [Description("Determine whether the solidity rectangle of the specified sprite overlaps that of any sprite in the specified category. Return the index of the sprite within the category if a collision is occurring, otherwise return -1.")]
   public virtual int TestCollisionRect(SpriteBase SourceSprite, SpriteCollection Targets)
   {
      return SourceSprite.TestCollisionRect(Targets);
   }

   /// &lt;summary&gt;
   /// Determines if the specified sprite instace is active.
   /// &lt;/summary&gt;
   /// &lt;param name="Sprite"&gt;Sprite instance to test&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite is active, false otherwise.&lt;/returns&gt;
   /// &lt;remarks&gt;The main differences between an active sprite and an inactive
   /// sprite are than only active sprites are drawn when they are in the visible
   /// part of the map, and only active sprites' rules are processed. Using
   /// IsSpriteActive is a good way to determine if a sprite is currently valid
   /// for use because inactive sprites should not have any functions running on
   /// them except to activate them. Most functions will trigger an error message
   /// in debug mode if they find that they are operating on an inactive sprite.
   /// &lt;/remarks&gt;
   /// &lt;example&gt;See &lt;see cref="StopSprite"/&gt; for an example of
   /// IsSpriteActive.&lt;/example&gt;
   [Description("Determines if the specified sprite instace is active.")]
   public virtual bool IsSpriteActive(SpriteBase Sprite)
   {
      return Sprite.isActive;
   }


   /// &lt;summary&gt;
   /// Moves the specified sprite to the specified plan's rectangle, aligned to the specified corner/edge.
   /// &lt;/summary&gt;
   /// &lt;param name="Sprite"&gt;Sprite to be moved&lt;/param&gt;
   /// &lt;param name="Plan"&gt;Specifies a target location&lt;/param&gt;
   /// &lt;param name="Alignment"&gt;Specifies how the sprite's solidity rectangle will be aligned with the target plan's rectangle&lt;/param&gt;
   /// &lt;remarks&gt;The specified &lt;paramref name="Plan"/&gt; must be a 2-point plan (specifying a rectangle)
   /// or the function will ignore the request (and display an error in debug mode).
   /// The sprite will be aligned inside the rectangle according to &lt;paramref name="Alignment"/&gt;,
   /// so, for example, if RelativePosition.RightMiddle is specified, the midpoint of the
   /// right side of the sprite's solidity rectangle will be aligned to the midpoint of the
   /// right side of the plan's rectangle.&lt;/remarks&gt;
   [Description("Moves the specified sprite to the specified plan's rectangle, aligned to the specified corner/edge.")]
   public virtual void TransportToPlan(SpriteBase Sprite, PlanBase Plan, RelativePosition Alignment)
   {
      System.Diagnostics.Debug.Assert(!Plan.PlanRectangle.IsEmpty, "TransportToPlan was called on a plan that does not have a rectangle defined.");
      if (Plan.PlanRectangle.IsEmpty)
         return;
      switch(Alignment)
      {
         case RelativePosition.TopLeft:
         case RelativePosition.TopCenter:
         case RelativePosition.TopRight:
            Sprite.y = Plan.PlanRectangle.Y;
            break;
         case RelativePosition.LeftMiddle:
         case RelativePosition.CenterMiddle:
         case RelativePosition.RightMiddle:
            Sprite.y = Plan.PlanRectangle.Y + (int)((Plan.PlanRectangle.Height - Sprite.SolidHeight)/2);
            break;
         default:
            Sprite.y = Plan.PlanRectangle.Y + Plan.PlanRectangle.Height - Sprite.SolidHeight;
            break;
      }
      switch(Alignment)
      {
         case RelativePosition.TopLeft:
         case RelativePosition.LeftMiddle:
         case RelativePosition.BottomLeft:
            Sprite.x = Plan.PlanRectangle.X;
            break;
         case RelativePosition.TopCenter:
         case RelativePosition.CenterMiddle:
         case RelativePosition.BottomCenter:
            Sprite.x = Plan.PlanRectangle.X + (int)((Plan.PlanRectangle.Width - Sprite.SolidWidth)/2);
            break;
         default:
            Sprite.x = Plan.PlanRectangle.X + Plan.PlanRectangle.Width - Sprite.SolidWidth;
            break;
      }
   }
   
   /// &lt;summary&gt;
   /// Associate the state of the input device for the specified player with the inputs on the specified sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="PlayerNumber"&gt;A number from 1 to &lt;see cref="Project.MaxPlayers"/&gt; indicating which
   /// player's input settings to use.&lt;/param&gt;
   /// &lt;param name="Target"&gt;Specifies which sprite the player should control&lt;/param&gt;
   /// &lt;remarks&gt;This is the basic means by which the input device, as customized for a
   /// particular player, is associated with a sprite, so that the input will control
   /// the sprite for that player. In many cases, it may be easier to use the sprite
   /// definition's version of &lt;see cref="SpriteBase.MapPlayerToInputs"/&gt; so that this
   /// doesn't have to be repeated on every map, however in a multi-player game, it may be
   /// easier or necessary to distinguish the individual players on each map if each player
   /// uses the same sprite definition.&lt;/remarks&gt;
   [Description("Associate the state of the input device for the specified player (1-4) with the inputs on the specified sprite.")]
   public virtual void MapPlayerToInputs(int PlayerNumber, SpriteBase Target)
   {
      Target.MapPlayerToInputs(PlayerNumber);
   }

   #endregion

   /// &lt;summary&gt;
   /// Retrieves a list of coordinates contained in this plan
   /// &lt;/summary&gt;
   protected virtual Coordinate[] Coordinates
   {
      get
      {
         return null;
      }
   }

   /// &lt;summary&gt;
   /// Retrieves the coordinate specified by a 0-based index for this plan
   /// &lt;/summary&gt;
   /// &lt;example&gt;
   /// The following code shows how you might limit the value of a coordinate so that
   /// it doesn't exceed the value of the weight assigned to the first coordinate in
   /// a plan. This indexer property ("this[]") is used to access the coordinates.
   ///&lt;code&gt;if (Counter.AnimationCounter.CurrentValue &gt; this[0].weight)
   ///   Counter.AnimationCounter.CurrentValue = this[0].weight;&lt;/code&gt;
   ///&lt;/example&gt;
   public virtual Coordinate this[int index]
   {
      get
      {
         return Coordinates[index];
      }
   }

   /// &lt;summary&gt;
   /// Retrieves the number of coordinates that this plan contains
   /// &lt;/summary&gt;
   public virtual int Count
   {
      get
      {
         if (Coordinates == null)
            return 0;
         return Coordinates.Length;
      }
   }

   /// &lt;summary&gt;
   /// Executes this plan's rules if any exist.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;An error is raised if no rules exist on this plan.&lt;/remarks&gt;
   public virtual void ExecuteRulesInternal()
   {
      throw new NotImplementedException("Attempted to execute rules on plan " + this.GetType().Name + " without any rules");
   }

   /// &lt;summary&gt;
   /// Allows customization of the way &lt;see cref="ExecuteRulesInternal"/&gt; is called.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The default implementation simply calls ExecuteRulesInternal,
   /// but a partial class of the derived class may override this behavior,
   /// calling ExecuteRulesInternal conditionally.&lt;/remarks&gt;
   public virtual void ExecuteRules() { ExecuteRulesInternal(); }

   /// &lt;summary&gt;
   /// Specifies one of the 4 color channels: alpha, red, green or blue.
   /// &lt;/summary&gt;
   public enum ColorChannel
   {
      Blue,
      Green,
      Red,
      Alpha
   }
  
   #region Inventory / Overlay
   /// &lt;summary&gt;
   /// Specifies a drawing style for inventory/status-type bars drawn with &lt;see cref="DrawCounterAsTile"/&gt;.
   /// &lt;/summary&gt;
   public enum DrawStyle
   {
      /// &lt;summary&gt;
      /// The specified tile is drawn stretched to fill the width of plan, and the right side
      /// is cropped according to the counter value.
      /// &lt;/summary&gt;
      /// &lt;remarks&gt;When the counter reaches the maximum, the full tile is drawn, otherwise
      /// the clipping size is scaled according to the ratio of the counter's current value to
      /// its maximum value. The tile image is only stretched horizontally. The vertical size
      /// remains at the tile's original height.&lt;/remarks&gt;
      ClipRightToCounter,
      /// &lt;summary&gt;
      /// The specified tile is drawn stretched rightward according to the counter value.
      /// &lt;/summary&gt;
      /// &lt;remarks&gt;When the counter reaches its maximum, the tile will fill the plan rectangle's width.
      /// Otherwise the image is scaled down horizontally to fill the left portion of the plan
      /// rectangle as determined by the ratio of the counter's current value to its
      /// maximum value.&lt;/remarks&gt;
      StretchRightToCounter,
      /// &lt;summary&gt;
      /// The specified tile is draw unscaled from left to right, repeated according
      /// to the counter value and plan size.
      /// &lt;/summary&gt;
      /// &lt;remarks&gt;When the counter reaches its maximum, the tile will be repeated from the
      /// plan's left side to its right side, as many whole copies as can fit in the plan
      /// rectangle.  Otherwise, the number of copies of the tile that are drawn is based
      /// on the counter value and the maximum number than can be drawn in the plan rectangle.
      /// The result is rounded to a whole number (partial tiles are not drawn). Because of
      /// the way this style works, you will probably want to make sure the number of copies
      /// of the tile that can fit in the plan rectangle exactly matches the counter's maximum
      /// value.&lt;/remarks&gt;
      RepeatRightToCounter,
      /// &lt;summary&gt;
      /// The specified tile is drawn stretched to fill the height of the plan, and the top is
      /// cropped according to the counter value.
      /// &lt;/summary&gt;
      /// &lt;remarks&gt;When the counter reaches the maximum, the full tile is drawn, otherwise
      /// the clipping size is scaled according to the ratio of the counter's current value to
      /// its maximum value. The tile image is only stretched vertically. The horizontal size
      /// remains at the tile's original width.&lt;/remarks&gt;
      ClipTopToCounter,
      /// &lt;summary&gt;
      /// The specified tile is drawn stretched upward from the bottom of the plan according
      /// to the counter value.
      /// &lt;/summary&gt;
      /// &lt;remarks&gt;When the counter reaches its maximum, the tile will fill the plan rectangle's height.
      /// Otherwise the image is scaled down vertically to fill the bottom portion of the plan
      /// rectangle as determined by the ratio of the counter's current value to its
      /// maximum value.&lt;/remarks&gt;
      StretchTopToCounter,
      /// &lt;summary&gt;
      /// The specified tile is draw unscaled from bottom to top, repeated according
      /// to the counter value and plan size.
      /// &lt;/summary&gt;
      /// &lt;remarks&gt;When the counter reaches its maximum, the tile will be repeated from the
      /// plan's bottom to its top, as many whole copies as can fit in the plan rectangle.
      /// Otherwise, the number of copies of the tile that are drawn is based on the counter
      /// value and the maximum number than can be drawn in the plan rectangle.
      /// The result is rounded to a whole number (partial tiles are not drawn). Because of
      /// the way this style works, you will probably want to make sure the number of copies
      /// of the tile that can fit in the plan rectangle exactly matches the counter's maximum
      /// value.&lt;/remarks&gt;
      RepeatUpToCounter
   }

   /// &lt;summary&gt;
   /// Draw the value of a counter as a bar filled with a tile's image.
   /// &lt;/summary&gt;
   /// &lt;param name="TileIndex"&gt;Specifies the index of a tile from this plan's layer&lt;/param&gt;
   /// &lt;param name="counter"&gt;Specifies which counter's value is being drawn&lt;/param&gt;
   /// &lt;param name="style"&gt;Specifies a style with which the tile will fill the bar&lt;/param&gt;
   /// &lt;remarks&gt;The size of the plan determines the maximum proportions of the bar.
   /// The counter value determines the drawn/current size of the bar.
   /// See &lt;see cref="DrawStyle"/&gt; for details about the different ways in which the bar
   /// can be filled.&lt;/remarks&gt;
   [Description("Draw the specified tile from the layer's tileset in this plan's rectangle according to the specified counter value")]
   public virtual void DrawCounterAsTile(int TileIndex, Counter counter, DrawStyle style)
   {
      System.Diagnostics.Debug.Assert(!PlanRectangle.IsEmpty, "DrawCounterAsTile was called on a plan that does not have a rectangle defined");
      if (PlanRectangle.IsEmpty)
         return;
      if (counter.CurrentValue == 0)
         return;
      MapBase map = ParentLayer.ParentMap;
      Display disp = map.Display;
      Tileset ts = ParentLayer.Tileset;
      Frameset fr = ts.GetFrameset(ParentLayer.ParentMap.Display);
      Rectangle CurrentView = ParentLayer.ParentMap.CurrentView;

      int lastColor = 0;

      switch(style)
      {
         case DrawStyle.ClipRightToCounter:
            disp.Scissor(new Rectangle(
               PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
               PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y,
               PlanRectangle.Width * counter.CurrentValue / counter.MaxValue,
               PlanRectangle.Height));
            if ((corners == null) &amp;&amp; (ts[TileIndex].CurrentFrame.Length &gt; 0))
               corners = new PointF[fr[0].Corners.Length];
            foreach(int frameIndex in ts[TileIndex].CurrentFrame)
            {
               for (int i = 0; i &lt; corners.Length; i++)
               {
                  corners[i].X = fr[frameIndex].Corners[i].X * PlanRectangle.Width / ts.TileWidth;
                  corners[i].Y = fr[frameIndex].Corners[i].Y;
               }

               if (fr[frameIndex].Color != lastColor)
               {
                  disp.SetColor(fr[frameIndex].Color);
                  lastColor = fr[frameIndex].Color;
               }
               disp.DrawFrame(fr[frameIndex].GraphicSheetTexture,
                  fr[frameIndex].SourceRect, corners,
                  PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
                  PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y);
            }
            break;
         case DrawStyle.StretchRightToCounter:
            disp.ScissorOff();
            if ((corners == null) &amp;&amp; (ts[TileIndex].CurrentFrame.Length &gt; 0))
               corners = new PointF[fr[0].Corners.Length];
            foreach (int frameIndex in ts[TileIndex].CurrentFrame)
            {
               for (int i = 0; i &lt; corners.Length; i++)
               {
                  corners[i].X = fr[frameIndex].Corners[i].X * PlanRectangle.Width * counter.CurrentValue / counter.MaxValue / ts.TileWidth;
                  corners[i].Y = fr[frameIndex].Corners[i].Y;
               }

               if (fr[frameIndex].Color != lastColor)
               {
                  disp.SetColor(fr[frameIndex].Color);
                  lastColor = fr[frameIndex].Color;
               }
               disp.DrawFrame(fr[frameIndex].GraphicSheetTexture,
                  fr[frameIndex].SourceRect, corners,
                  PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
                  PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y);
            }
            break;
         case DrawStyle.RepeatRightToCounter:
            foreach(int frameIndex in ts[TileIndex].CurrentFrame)
            {
               int FillWidth = PlanRectangle.Width * counter.CurrentValue / counter.MaxValue;
               if (fr[frameIndex].Color != lastColor)
               {
                  disp.SetColor(fr[frameIndex].Color);
                  lastColor = fr[frameIndex].Color;
               }
               for (int repeat = 0; repeat &lt; (int)Math.Ceiling(FillWidth / (float)ts.TileWidth); repeat++)
               {
                  disp.DrawFrame(fr[frameIndex].GraphicSheetTexture,
                     fr[frameIndex].SourceRect, fr[frameIndex].Corners,
                     PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X + repeat * ts.TileWidth,
                     PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y);
               }
            }
            break;
         case DrawStyle.ClipTopToCounter:
         {
            int FillHeight = PlanRectangle.Height * counter.CurrentValue / counter.MaxValue;
            if ((corners == null) &amp;&amp; (ts[TileIndex].CurrentFrame.Length &gt; 0))
               corners = new PointF[fr[0].Corners.Length];
            disp.Scissor(new Rectangle(
               PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
               PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y +
               PlanRectangle.Height - FillHeight, PlanRectangle.Width, FillHeight));
            foreach(int frameIndex in ts[TileIndex].CurrentFrame)
            {
               for (int i = 0; i &lt; corners.Length; i++)
               {
                  corners[i].X = fr[frameIndex].Corners[i].X;
                  corners[i].Y = fr[frameIndex].Corners[i].Y * PlanRectangle.Height / ts.TileHeight;
               }
               if (fr[frameIndex].Color != lastColor)
               {
                  disp.SetColor(fr[frameIndex].Color);
                  lastColor = fr[frameIndex].Color;
               }
               disp.DrawFrame(fr[frameIndex].GraphicSheetTexture,
                  fr[frameIndex].SourceRect, corners,
                  PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
                  PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y);
            }
         }
            break;
         case DrawStyle.StretchTopToCounter:
         {
            disp.ScissorOff();
            int FillHeight = PlanRectangle.Height * counter.CurrentValue / counter.MaxValue;
            if ((corners == null) &amp;&amp; (ts[TileIndex].CurrentFrame.Length &gt; 0))
               corners = new PointF[fr[0].Corners.Length];
            foreach(int frameIndex in ts[TileIndex].CurrentFrame)
            {
               for (int i = 0; i &lt; corners.Length; i++)
               {
                  corners[i].X = fr[frameIndex].Corners[i].X;
                  corners[i].Y = fr[frameIndex].Corners[i].Y * FillHeight / ts.TileHeight;
               }

               if (fr[frameIndex].Color != lastColor)
               {
                  disp.SetColor(fr[frameIndex].Color);
                  lastColor = fr[frameIndex].Color;
               }
               disp.DrawFrame(fr[frameIndex].GraphicSheetTexture,
                  fr[frameIndex].SourceRect, corners,
                  PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
                  PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y + PlanRectangle.Height - FillHeight);
            }
         }
            break;
         case DrawStyle.RepeatUpToCounter:
            foreach(int frameIndex in ts[TileIndex].CurrentFrame)
            {
               int FillHeight = PlanRectangle.Height * counter.CurrentValue / counter.MaxValue;
               disp.ScissorOff();
               if (fr[frameIndex].Color != lastColor)
               {
                  disp.SetColor(fr[frameIndex].Color);
                  lastColor = fr[frameIndex].Color;
               }
               for (int repeat = 0; repeat &lt; (int)Math.Ceiling(FillHeight / (float)ts.TileHeight); repeat++)
               {
                  disp.DrawFrame(fr[frameIndex].GraphicSheetTexture, fr[frameIndex].SourceRect, fr[frameIndex].Corners,
                     PlanRectangle.X + ParentLayer.CurrentPosition.X + CurrentView.X,
                     PlanRectangle.Y + ParentLayer.CurrentPosition.Y + CurrentView.Y + PlanRectangle.Height - repeat * ts.TileHeight - ts.TileHeight);
               }
            }
            break;
      }
      disp.Flush();
   }

   /// &lt;summary&gt;
   /// Display a counter value as a number with a label in the current plan's rectangle.
   /// &lt;/summary&gt;
   /// &lt;param name="Label"&gt;String containing the text of the label&lt;/param&gt;
   /// &lt;param name="counter"&gt;Counter whose value will be displayed&lt;/param&gt;
   /// &lt;param name="color"&gt;Color of the label and quantity text&lt;/param&gt;
   /// &lt;remarks&gt;The label and quantity are merged into a single string of
   /// text and drawn at the top left corner of the plan's rectangle.&lt;/remarks&gt;
   [Description("Display a counter value as a number with a label in the current plan's rectangle")]
   public virtual void DrawCounterWithLabel(string Label, Counter counter, System.Drawing.KnownColor color)
   {
      System.Diagnostics.Debug.Assert(!PlanRectangle.IsEmpty, "DrawCounterAsTile was called on a plan that does not have a rectangle defined");
      if (PlanRectangle.IsEmpty)
         return;
      
      Display disp = ParentLayer.ParentMap.Display;
      disp.ScissorOff();
      disp.SetColor(Color.FromKnownColor(color));
      disp.DrawText(Label.ToString() + counter.CurrentValue.ToString(), PlanRectangle.Left, PlanRectangle.Top);
      disp.Flush();
   }
   #endregion

   protected virtual void CopyTiles(PlanBase Source, PlanBase Target, RelativePosition RelativePosition)
   {
      int src_left = (int)(Source.PlanRectangle.X / Source.ParentLayer.Tileset.TileWidth);
      int src_top = (int)(Source.PlanRectangle.Y / Source.ParentLayer.Tileset.TileHeight);
      int src_right = (int)((Source.PlanRectangle.X + Source.PlanRectangle.Width - 1) / Source.ParentLayer.Tileset.TileWidth);
      int src_bottom = (int)((Source.PlanRectangle.Y + Source.PlanRectangle.Height - 1) / Source.ParentLayer.Tileset.TileHeight);

      int dst_left = (int)(Target.PlanRectangle.X / Target.ParentLayer.Tileset.TileWidth);
      int dst_top = (int)(Target.PlanRectangle.Y / Target.ParentLayer.Tileset.TileHeight);
      int dst_right = (int)((Target.PlanRectangle.X + Target.PlanRectangle.Width - 1) / Target.ParentLayer.Tileset.TileWidth);
      int dst_bottom = (int)((Target.PlanRectangle.Y + Target.PlanRectangle.Height - 1) / Target.ParentLayer.Tileset.TileHeight);

      for (int y = src_top; y &lt;= src_bottom; y++)
      {
         int targety;
         switch(RelativePosition)
         {
            case RelativePosition.TopLeft:
            case RelativePosition.TopCenter:
            case RelativePosition.TopRight:
               targety = dst_top + y - src_top;
               break;
            case RelativePosition.LeftMiddle:
            case RelativePosition.CenterMiddle:
            case RelativePosition.RightMiddle:
               targety = y + (int)(dst_top + dst_bottom - src_top - src_bottom) / 2;
               break;
            default:
               targety = dst_bottom + y - src_bottom;
               break;
         }
         if (targety &lt; 0)
            continue;
         if (targety &gt;= Target.ParentLayer.VirtualRows)
            break;
         for (int x = src_left; x &lt;= src_right; x++)
         {
            int targetx;
            switch(RelativePosition)
            {
               case RelativePosition.TopLeft:
               case RelativePosition.LeftMiddle:
               case RelativePosition.BottomLeft:
                  targetx = dst_left + x - src_left;
                  break;
               case RelativePosition.TopCenter:
               case RelativePosition.CenterMiddle:
               case RelativePosition.BottomCenter:
                  targetx = x + (int)(dst_left + dst_right - src_left - src_right) / 2;
                  break;
               default:
                  targetx = dst_right + x - src_right;
                  break;
            }
            if (targetx &lt; 0)
               continue;
            if (targetx &gt;= Target.ParentLayer.VirtualColumns)
               break;
            
            Target.ParentLayer[targetx,targety] = Source.ParentLayer[x,y];
         }
      }
   }

   /// &lt;summary&gt;
   /// Copy tiles from this plan's rectangle to another plan's rectangle.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Specifies another plan specifying a location to which tiles will be copied&lt;/param&gt;
   /// &lt;param name="RelativePosition"&gt;Specifies the alignment of the tiles in the target rectangle if
   /// this plan's rectangle is a different size&lt;/param&gt;
   /// &lt;remarks&gt;If the source rectangle is larger than the target rectangle, the copy
   /// locations will be aligned according to RelativePosition, and the copied tiles
   /// will be allowed to overflow the target rectangle.  For example, if the alignment
   /// is &lt;see cref="RelativePosition.RightMiddle"/&gt;, the right middle tile of the source
   /// rectangle will be copied into the right middle tile of the target rectangle, and
   /// build around there regardless of the target rectangle's size.&lt;/remarks&gt;
   [Description("Copy tiles from this plan's rectangle to another plan's rectangle.")]
   public virtual void CopyTo(PlanBase Target, RelativePosition RelativePosition)
   {
      CopyTiles(this, Target, RelativePosition);
   }

   /// &lt;summary&gt;
   /// Copy tiles from the specified plan's rectangle to this plan's rectangle.
   /// &lt;/summary&gt;
   /// &lt;param name="Source"&gt;Specifies another plan specifying a location from which tiles will be copied&lt;/param&gt;
   /// &lt;param name="RelativePosition"&gt;Specifies the alignment of the tiles in this plan's rectangle if
   /// the source plan's rectangle is a different size&lt;/param&gt;
   /// &lt;remarks&gt;If the source rectangle is larger than the target rectangle, the copy
   /// locations will be aligned according to RelativePosition, and the copied tiles
   /// will be allowed to overflow the target rectangle.  For example, if the alignment
   /// is &lt;see cref="RelativePosition.RightMiddle"/&gt;, the right middle tile of the source
   /// rectangle will be copied into the right middle tile of the target rectangle, and
   /// build around there regardless of the target rectangle's size.&lt;/remarks&gt;
   [Description("Copy tiles from the specified plan's rectangle to this plan's rectangle.")]
   public virtual void CopyFrom(PlanBase Source, RelativePosition RelativePosition)
   {
      CopyTiles(Source, this, RelativePosition);
   }

   /// &lt;summary&gt;
   /// Determines if the specified sprite's specified input is pressed.
   /// &lt;/summary&gt;
   /// &lt;param name="Sprite"&gt;Sprite whose inputs will be examined&lt;/param&gt;
   /// &lt;param name="Input"&gt;Specifies which input will be examined&lt;/param&gt;
   /// &lt;param name="InitialOnly"&gt;When true only return true if the input has just been pressed and was not pressed before&lt;/param&gt;
   /// &lt;returns&gt;True if the input is pressed, false otherwise.&lt;/returns&gt;
   /// &lt;remarks&gt;The &lt;see cref="SpriteBase.IsInputPressed"/&gt; function for sprite definitions is
   /// more commonly used, but this allows you to test a specific sprite's inputs on a specific
   /// layer.&lt;/remarks&gt;
   [Description("Determine if the specified sprite's specified input is pressed.  InitialOnly causes this to return true only if the input has just been pressed and was not pressed before.")]
   public virtual bool IsInputPressed(SpriteBase Sprite, SpriteBase.InputBits Input, bool InitialOnly)
   {
      return Sprite.IsInputPressed(Input, InitialOnly);
   }

   /// &lt;summary&gt;
   /// Ensure that all the inputs currently being pressed on the specified sprite are henceforth processed as already pressed.
   /// &lt;/summary&gt;
   /// &lt;param name="Sprite"&gt;Sprite whose inputs will be shifted.&lt;/param&gt;
   /// &lt;remarks&gt;This is usually handled by &lt;see cref="MapPlayerToInputs"/&gt;, but if you
   /// have customized the factors that affect the inputs, you may need to manually
   /// shift the current inputs into the old inputs to allow correct handling for
   /// "InitialOnly" parameters.&lt;/remarks&gt;
   [Description("Ensure that all the inputs currently being pressed on the specified sprite are henceforth processed as already pressed.")]
   public virtual void CopyInputsToOld(SpriteBase Sprite)
   {
      Sprite.oldinputs = Sprite.inputs;
   }

   /// &lt;summary&gt;
   /// Create a new (dynamic) instance of the specified sprite type at the first coordinate
   /// in this plan.
   /// &lt;/summary&gt;
   /// &lt;param name="SpriteDefinition"&gt;Specifies the type of sprite that will be created.&lt;/param&gt;
   /// &lt;param name="RelativePosition"&gt;Specified a coordinate within the sprite that should be
   /// matched up with the first coordinate of the plan.&lt;/param&gt;
   /// &lt;remarks&gt;&lt;para&gt;As opposed to &lt;see cref="ActivateSprite"/&gt;, which activates a pre-defined
   /// instance of a sprite, this function will actually create a new sprite instance on the
   /// fly (referred to as a "dynamic" sprite instance). Dynamic sprites cannot be referred
   /// to directly by other rules because they don't have names associated with them, therefore
   /// it's recommended that &lt;see cref="ActivateSprite"/&gt; be used when more control is
   /// desired. However, &lt;see cref="AddSpriteAtPlan"/&gt; doesn't require you to pre-define each
   /// possible instance.&lt;/para&gt;
   /// &lt;para&gt;Dynamic sprites are added to the end of each category that they belong to
   /// (categories are defined in terms of sprite definitions, so a dynamic sprite knows
   /// the categories in which it should participate). This happens as the sprite is created.
   /// When the sprite is deactivated, it will automatically be removed from all categories
   /// as part of &lt;see cref="LayerBase.ProcessSprites"/&gt;.&lt;/para&gt;
   /// &lt;para&gt;The maximum number of sprites that can be active on a layer at once is
   /// defined by &lt;see cref="SpriteCollection.maxCollectionSize"/&gt;. This includes static
   /// sprites as well as dynamic sprites. The purpose of this maximum is not a technical
   /// limitation (feel free to change the code in SpriteCollection.cs to increase the maximum
   /// all you like). It only exists to help developers realize when sprite instances are
   /// "leaking" (not being cleaned up or deactivated properly) or when more sprites than
   /// necessary are being created. In many cases, the engine can actually handle quite a
   /// bit more than 100 sprites without significant performance impact.&lt;/para&gt;
   /// &lt;para&gt;All parameters of a newly created sprite instance are always initialized
   /// to zero. Furthermore, new sprite instances will not refer to any solidity,
   /// and will begin in the first
   /// frame of the first state, but you can use rules to affect &lt;see cref="GeneralRules.lastCreatedSprite"/&gt;
   /// to set values of the new sprite, or define rules on the created sprite type to make it
   /// initialize itself appropriately.&lt;/para&gt;
   /// &lt;para&gt;If this plan has no coordinates, the sprite is created at the top left corner of
   /// the layer, and not adjusted according to &lt;paramref name="RelativePosition"/&gt;.
   /// &lt;/para&gt;&lt;seealso cref="SpriteBase.AddSpriteHere"/&gt;&lt;seealso cref="SpriteBase.TileAddSprite"/&gt;&lt;/remarks&gt;
   [Description("Add a new instance of the specified sprite type to this plan's layer such that the specified position within the sprite corresponds to the first coordinate in this plan")]
   public virtual void AddSpriteAtPlan([Editor("SpriteDefinition", "UITypeEditor")] System.Type SpriteDefinition, RelativePosition RelativePosition)
   {
      System.Reflection.ConstructorInfo constructor = SpriteDefinition.GetConstructor(new System.Type[]
      {
         typeof(LayerBase), typeof(double), typeof(double), typeof(double), typeof(double), typeof(int), typeof(int), typeof(bool), typeof(Display), typeof(Solidity), typeof(int), typeof(bool)
      });
      lastCreatedSprite = (SpriteBase)constructor.Invoke(new object[]
      {
         ParentLayer, 0, 0, 0, 0, 0, 0, true, ParentLayer.ParentMap.Display, null, -1, true
      });
      if (Count &gt; 0)
      {
         System.Drawing.Point offset = lastCreatedSprite.GetRelativePosition(RelativePosition);
         lastCreatedSprite.x = Coordinates[0].x - offset.X;
         lastCreatedSprite.y = Coordinates[0].y - offset.Y ;
      }
   }

   /// &lt;summary&gt;
   /// Move the specified sprite to the position of the mouse cursor and set the sprite's button inputs based on mouse button states.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Specifies the sprite to be moved.&lt;/param&gt;
   /// &lt;param name="InstantMove"&gt;If true, the sprite will be moved immediately without regard to
   /// the existing position or solidity or anything else.  If false, the sprite's position will
   /// not be immediately changed, but its velocity will be set so that the sprite will end up at
   /// the mouse cursor's location after &lt;see cref="SpriteBase.MoveByVelocity"/&gt; executes. Note that moving
   /// the sprite instantly will ignore solidity and will not work well with sprites riding on
   /// this sprite, while allowing just the velocity to be set will allow this, but limit the
   /// sprite's movement based on solidity.&lt;/param&gt;
   /// &lt;param name="hotSpot"&gt;Which part of the sprite will move to the mouse point.&lt;/param&gt;
   /// &lt;remarks&gt;Before the button inputs are mapped from the mouse to the sprite,
   /// the existing inputs are copied from &lt;see cref="SpriteBase.inputs"/&gt; to &lt;see cref="SpriteBase.oldinputs"/&gt;
   /// so other rules will be able to determine which buttons were pressed before.
   /// &lt;/remarks&gt;
   [Description("Move the specified sprite to the position of the mouse cursor and set the sprite's button inputs based on mouse button states. If InstantMove is true, the sprite will be moved immediately, otherwise it the velocity will be set to move when MoveByVelocity runs.")]
   public virtual void MapMouseToSprite(SpriteBase Target, bool InstantMove, RelativePosition hotSpot)
   {
      Target.MapMouseToSprite(InstantMove, hotSpot);
   }


   /// &lt;summary&gt;
   /// If any sprite in the specified category is within the bounds of this plan or
   /// the Target plan, and is pressing the specified Trigger, transport it to the
   /// other plan.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Specifies the plan representing the other end of this doorway&lt;/param&gt;
   /// &lt;param name="Sprites"&gt;Specifies a category of sprites that can activate this doorway&lt;/param&gt;
   /// &lt;param name="Trigger"&gt;Specifies which input bit on the sprite will cause the
   /// sprite to activate the doorway and be transported to the other end.&lt;/param&gt;
   /// &lt;returns&gt;If any sprites were transported, the index within the collection of the first
   /// sprite that was transported, otherwise -1&lt;/returns&gt;
   /// &lt;remarks&gt;This function handles both ends of a doorway and will allow a sprite to travel
   /// from this end to the Target plan or vice versa when the conditions are met. In order for
   /// the conditions to be met, the center of the sprite must be within the bounds of this
   /// plan rectangle or the Target plan rectangle, and (all) the specified Trigger input(s) must
   /// be on/pressed, and must not have been in the same state before (this prevents the sprite from
   /// flipping repeatedly between both ends of the doorway). If the conditions are met,
   /// the sprite will be transported such that the bottom center of the sprite will match up
   /// with the opposite plan rectangle's bottom center.&lt;/remarks&gt;
   [Description("If any sprite in the specified category is within the bounds of this plan or the Target plan, and is pressing the specified Trigger, transport it to the other plan.")]
   public virtual int Door(PlanBase Target, SpriteCollection Sprites, SpriteBase.InputBits Trigger)
   {
      int result = -1;
      for (int i=0; i&lt;Sprites.Count; i++)
      {
         if (Sprites[i].isActive)
         {
            PlanBase outDoor;
            if (IsSpriteWithin(Sprites[i], RelativePosition.CenterMiddle))
               outDoor = Target;
            else if (Target.IsSpriteWithin(Sprites[i], RelativePosition.CenterMiddle))
               outDoor = this;
            else
               continue;
            if (((Trigger &amp; Sprites[i].inputs) == Trigger) &amp;&amp;
               ((Sprites[i].inputs &amp; Trigger) != (Sprites[i].oldinputs &amp; Trigger)))
            {
               result = i;
               TransportToPlan(Sprites[i], outDoor, RelativePosition.BottomCenter);
               CopyInputsToOld(Sprites[i]);
            }
         }
      }
      return result;
   }

   #region IEnumerable Members

   /// &lt;summary&gt;
   /// Allows a the coordinates of a plan to be enumerated with a foreach loop.
   /// &lt;/summary&gt;
   /// &lt;returns&gt;An object that enumerates this plan's coordinates.&lt;/returns&gt;
   public virtual System.Collections.IEnumerator GetEnumerator()
   {
      if (Coordinates == null)
         new System.Collections.ArrayList().GetEnumerator();
      return Coordinates.GetEnumerator();
   }

   #endregion
}</Text>
  </SourceCode>
  <SourceCode Name="GeneralRules.cs" IsCustomObject="false">
    <Text>/*
 * Created using Scrolling Game Development Kit 2.0
 * See Project.cs for copyright/licensing details
 */
using System;
using System.ComponentModel;
using System.Diagnostics;

/// &lt;summary&gt;
/// Implements rules common to sprites and plans
/// &lt;/summary&gt;
[Serializable()]
public abstract partial class GeneralRules
{
   protected static SaveUnit saveUnit = null;
   protected static System.Collections.Hashtable memorySaveSlots = new System.Collections.Hashtable();
   protected static System.Random randomGen = new System.Random();
   protected static long fpsStartTime;
   protected static long fpsFrameCount;

   /// &lt;summary&gt;
   /// Contains the last sprite created with &lt;see cref="PlanBase.AddSpriteAtPlan"/&gt;,
   /// &lt;see cref="SpriteBase.TileAddSprite"/&gt; or &lt;see cref="SpriteBase.AddSpriteHere"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This reference can be used to initialize various properties of a sprite
   /// that was just created. It can't be used to set parameters on the sprite that are
   /// specific to that sprite type unless it is cast to the correct type (which is not
   /// supported in the interface for defining rules). That should be done from within
   /// the sprite's rules by checking for a specific parameter value (like "IsInitialized")
   /// being 0 or 1, for example.&lt;/remarks&gt;
   public static SpriteBase lastCreatedSprite;

   /// &lt;summary&gt;
   /// Retrieves the layer that contains this object.
   /// &lt;/summary&gt;
   public abstract LayerBase ParentLayer
   {
      get;
   }

   /// &lt;summary&gt;
   /// Limit the frame rate of the game to the specified number of frames per second.  Call this only once per frame.
   /// &lt;/summary&gt;
   /// &lt;param name="fps"&gt;Frames per second.&lt;/param&gt;
   /// &lt;remarks&gt;If this is called twice per frame, the effect would be to
   /// limit the frame rate to half the specified value, and more calls will
   /// make the game run even slower.&lt;/remarks&gt;
   [Description("Limit the frame rate of the game to the specified number of frames per second.  Call this only once per frame.")]
   public virtual void LimitFrameRate(int fps)
   {
      long freq;
      long frame;
      freq = System.Diagnostics.Stopwatch.Frequency;
      frame = System.Diagnostics.Stopwatch.GetTimestamp();
      while ((frame - fpsStartTime) * fps &lt; freq * fpsFrameCount)
      {
         int sleepTime = (int)((fpsStartTime * fps + freq * fpsFrameCount - frame * fps) * 1000 / (freq * fps));
         if (sleepTime &gt; 0) System.Threading.Thread.Sleep(sleepTime);
         frame = System.Diagnostics.Stopwatch.GetTimestamp();
      }
      if (++fpsFrameCount &gt; fps)
      {
         fpsFrameCount = 0;
         fpsStartTime = frame;
      }
   }


   /// &lt;summary&gt;
   /// Sets a different map as the one to be drawn on the game display.
   /// &lt;/summary&gt;
   /// &lt;param name="MapType"&gt;Specifies the map to switch to.&lt;/param&gt;
   /// &lt;param name="UnloadCurrent"&gt;If true, the current map will be unloaded first&lt;/param&gt;
   /// &lt;remarks&gt;&lt;para&gt;&lt;paramref name="MapType"/&gt; specifies a type of map rather than a specific
   /// instance of a map.
   /// This accomplishes two things. First, it allows the function to switch to a map that hasn't
   /// been initialized/created yet, thus allowing the map instance to only be created when
   /// necessary, and not before switching to it. This can improve performance because an instance
   /// of each map doesn't have to be created during game initialization. Secondly, it allows maps
   /// to be unloaded so that maps instances that don't need to remember their state can be released,
   /// freeing up whatever memory they were occupying. Each map defined in the IDE is compiled/generated as its
   /// own class when the project is compiled, and each map instance becomes an instance of the
   /// class. This conceivably allows multiple instances of the same map to exist, but this is not
   /// fully supported by default in the code provided with this environment.&lt;/para&gt;
   /// &lt;para&gt;When &lt;paramref name="UnloadCurrent"/&gt; is true, the old map will be unloaded while
   /// switching to the new map, freeing up the memory used by the old map's sprites and tiles
   /// (if no other references to the map exist). Eliminating the map from memory also reduces the
   /// amount of data that would be written to a saved game file. Finally it causes the map to be
   /// recreated/reset when returning to it in the future. When &lt;paramref name="UnloadCurrent"/&gt;
   /// is false, the map is retained and re-used next time the game switches to the map, which
   /// means the state of all the tiles and sprites will be remembered as they were when switching
   /// away from the map.&lt;/para&gt;
   /// &lt;seealso cref="UnloadMap"/&gt;&lt;/remarks&gt;
   [Description("Sets a different map as the one to be drawn on the game display.  If UnloadCurrent is true, the current map will be unloaded first (which causes it to be recreated/reset when returning to it).")]
   public virtual void SwitchToMap([Editor("MapType", "UITypeEditor")] Type MapType, bool UnloadCurrent)
   {
      System.Type source = Project.GameWindow.CurrentMap.GetType();
      if (UnloadCurrent)
         Project.GameWindow.UnloadMap(source);
      (Project.GameWindow.CurrentMap = Project.GameWindow.GetMap(MapType)).m_CameFromMapType = source;
   }

   /// &lt;summary&gt;
   /// Return to the map that was active before the last &lt;see cref="SwitchToMap"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;param name="UnloadCurrent"&gt;If true, the current map will be unloaded first&lt;/param&gt;
   /// &lt;remarks&gt;&lt;para&gt;Each map remembers where the game was before it became the current map.
   /// Calling this will return to that map, recreating it if it was unloaded. Since each
   /// map can only remember one previous map, you can't keep multiple instances of the same
   /// map in the history. For example, if you switch from a map called "Level1" to "Level2"
   /// then to "Level3" and then back to "Level2", you won't be able to return back to
   /// Level1 using ReturnToPreviousMap. Level2 would switch back to Level3 each time
   /// ReturnToPreviousMap is called.&lt;/para&gt;
   /// &lt;para&gt;If there is no previous map to return to, this function will have no effect.&lt;/para&gt;
   /// &lt;para&gt;See &lt;see cref="SwitchToMap"/&gt; for more information about unloading maps.&lt;/para&gt;&lt;/remarks&gt;
   [Description("Return to the map that was active before the last SwitchToMap.  If UnloadCurrent is true, the current map will be unloaded first (which causes it to be recreated/reset when returning to it).")]
   public virtual void ReturnToPreviousMap(bool UnloadCurrent)
   {
      System.Type source = Project.GameWindow.CurrentMap.m_CameFromMapType;
      if (source == null)
         source = Project.GameWindow.CurrentMap.GetType();
      if (UnloadCurrent)
         Project.GameWindow.UnloadMap(Project.GameWindow.CurrentMap.GetType());
      Project.GameWindow.CurrentMap = Project.GameWindow.GetMap(source);
   }

   /// &lt;summary&gt;
   /// Determines if there is a previous map to return to.
   /// &lt;/summary&gt;
   /// &lt;returns&gt;True if calling &lt;see cref="ReturnToPreviousMap"/&gt; will have any effect,
   /// false otherwise.&lt;/returns&gt;
   [Description("Determines if there is a previous map to return to.")]
   public virtual bool CanReturnToPreviousMap()
   {
      return Project.GameWindow.CurrentMap.m_CameFromMapType != null;
   }

   /// &lt;summary&gt;
   /// Unloads the specified map.
   /// &lt;/summary&gt;
   /// &lt;param name="MapType"&gt;Specifies the class of map whose instance will be unloaded if
   /// it is loaded.&lt;/param&gt;
   /// &lt;remarks&gt;Unloading a map will free up any memory used by its tiles and sprites if no other
   /// code is referencing it. It also excludes it from the saved game data if the game is saved,
   /// which can significantly reduce the size of a saved game file. Finally it causes the tiles
   /// and sprites to be recreated/reset next time the map is loaded (switched to).
   /// &lt;seealso cref="SwitchToMap"/&gt;
   /// &lt;seealso cref="ReturnToPreviousMap"/&gt;&lt;/remarks&gt;
   [Description("Unloads the specified map, which will force it to be recreated/reset next time it is used.")]
   public virtual void UnloadMap([Editor("MapType", "UITypeEditor")] Type MapType)
   {
      Project.GameWindow.UnloadMap(MapType);
   }

   /// &lt;summary&gt;
   /// Includes a specified set of objects in the &lt;see cref="SaveUnit"/&gt; that will be saved with the next call to &lt;see cref="SaveGame"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;param name="Include"&gt;Specifies a category of objects that should be included&lt;/param&gt;
   /// &lt;remarks&gt;&lt;para&gt;There are many functions that can be used to specify what elements should be
   /// included in a saved game file.  This function is designed for setting up a very rough
   /// outline of what kind of data will be included in the save file.
   /// After this is called, the selection can be fine tuned with further calls to
   /// related functions in the See Also list.  If nothing is included in the &lt;see cref="SaveUnit"/&gt;
   /// before &lt;see cref="SaveGame"/&gt; is called, everything will be included by default.
   /// See &lt;see cref="SaveUnitInclusion"/&gt; for details about the meaning of different categories.&lt;/para&gt;
   /// &lt;para&gt;By including maps in a &lt;see cref="SaveUnit"/&gt;, all the tiles and sprites are remembered exactly as they
   /// were when the game was saved, but only for those maps that are included.  Maps that aren't
   /// included will be reset to their initial state next time they become active after loading
   /// that game.&lt;/para&gt;
   /// &lt;para&gt;By including only counters (and not maps) in a &lt;see cref="SaveUnit"/&gt;, you can store some
   /// general information in a &lt;see cref="SaveUnit"/&gt; in a significantly smaller file, and use that information
   /// to re-initialize some general properties of the game. For example, the number of lives
   /// and inventory owned by the player (assuming inventory is stored in counters) might be
   /// adequate for some games (if you don't have to worry about items being available again
   /// on maps that have been reset to their initial state, or if you have few enough items that
   /// you can initialize them based on counter values).&lt;/para&gt;
   /// &lt;seealso cref="IncludeCounterInSaveUnit"/&gt;
   /// &lt;seealso cref="ExcludeCounterFromSaveUnit"/&gt;
   /// &lt;seealso cref="IncludeMapInSaveUnit"/&gt;
   /// &lt;seealso cref="ExcludeMapFromSaveUnit"/&gt;
   /// &lt;seealso cref="SaveGame"/&gt;&lt;/remarks&gt;
   [Description("Includes a specified set of objects in the SaveUnit that will be saved with the next call to SaveGame")]
   public virtual void IncludeInSaveUnit(SaveUnitInclusion Include)
   {
      if (saveUnit == null)
         saveUnit = new SaveUnit();

      switch (Include)
      {
         case SaveUnitInclusion.AllMaps:
            saveUnit.Maps = Project.GameWindow.LoadedMaps;
            saveUnit.AllMaps = true;
            break;
         case SaveUnitInclusion.AllCounters:
            {
               saveUnit.Counters = new System.Collections.ArrayList();
               System.Reflection.PropertyInfo[] counterProps = typeof(Counter).GetProperties(
                  System.Reflection.BindingFlags.Public |
                  System.Reflection.BindingFlags.GetProperty |
                  System.Reflection.BindingFlags.Static);
               foreach (System.Reflection.PropertyInfo counterProp in counterProps)
                  saveUnit.Counters.Add(new CounterRef((Counter)counterProp.GetValue(null, null)));
            }
            break;
         case SaveUnitInclusion.WhichMapIsCurrent:
            saveUnit.CurrentMapType = Project.GameWindow.CurrentMap.GetType();
            break;
         case SaveUnitInclusion.WhichMapIsOverlaid:
            if (Project.GameWindow.OverlayMap == null)
               saveUnit.OverlayMapType = typeof(System.DBNull);
            else
               saveUnit.OverlayMapType = Project.GameWindow.OverlayMap.GetType();
            break;
         case SaveUnitInclusion.PlayerOptions:
            saveUnit.PlayerOptions = Project.GameWindow.Players;
            break;
      }
   }

   /// &lt;summary&gt;
   /// Include the specified counter in the &lt;see cref="SaveUnit"/&gt; that will be saved with the next call to &lt;see cref="SaveGame"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;param name="Counter"&gt;Specifies a counter whose value will be saved when &lt;see cref="SaveGame"/&gt;
   /// is called.&lt;/param&gt;
   /// &lt;remarks&gt;If you want to include only a few select counters in a &lt;see cref="SaveUnit"/&gt;,
   /// you can use this function to select them before calling &lt;see cref="SaveGame"/&gt;.
   /// See &lt;see cref="IncludeInSaveUnit"/&gt; for more information about save units.
   /// &lt;seealso cref="ExcludeCounterFromSaveUnit"/&gt;
   /// &lt;seealso cref="IncludeMapInSaveUnit"/&gt;
   /// &lt;seealso cref="ExcludeMapFromSaveUnit"/&gt;
   /// &lt;seealso cref="SaveGame"/&gt;&lt;/remarks&gt;
   [Description("Include the specified counter in the SaveUnit that will be saved with the next call to SaveGame")]
   public virtual void IncludeCounterInSaveUnit(Counter Counter)
   {
      if (saveUnit == null)
      {
         saveUnit = new SaveUnit();
      }
      if (saveUnit.Counters == null)
      {
         saveUnit.Counters = new System.Collections.ArrayList();
         saveUnit.Counters.Add(new CounterRef(Counter));
         return;
      }
      foreach (CounterRef cr in saveUnit.Counters)
      {
         if (cr.instance == Counter)
            return;
      }
      saveUnit.Counters.Add(Counter);
   }

   /// &lt;summary&gt;
   /// Exclude the specified counter from the &lt;see cref="SaveUnit"/&gt; that will be saved with the next call to &lt;see cref="SaveGame"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;param name="Counter"&gt;Specifies a counter to remove from the &lt;see cref="SaveUnit"/&gt;&lt;/param&gt;
   /// &lt;remarks&gt;If you want to save most counters, but exclude a few, you can call
   /// &lt;see cref="IncludeInSaveUnit"/&gt; to include all counters and then exclude a few
   /// with this function.
   /// See &lt;see cref="IncludeInSaveUnit"/&gt; for more information about save units.
   /// &lt;seealso cref="IncludeCounterInSaveUnit"/&gt;
   /// &lt;seealso cref="IncludeMapInSaveUnit"/&gt;
   /// &lt;seealso cref="ExcludeMapFromSaveUnit"/&gt;
   /// &lt;seealso cref="SaveGame"/&gt;&lt;/remarks&gt;
   [Description("Exclude the specified counter from the SaveUnit that will be saved with the next call to SaveGame")]
   public virtual void ExcludeCounterFromSaveUnit(Counter Counter)
   {
      if ((saveUnit == null) || (saveUnit.Counters == null))
         return;
      for (int i = 0; i &lt; saveUnit.Counters.Count; i++)
      {
         if (((CounterRef)(saveUnit.Counters[i])).instance == Counter)
         {
            saveUnit.Counters.RemoveAt(i);
            return;
         }
      }
   }

   /// &lt;summary&gt;
   /// Include the specified map in the &lt;see cref="SaveUnit"/&gt; that will be saved with the next call to &lt;see cref="SaveGame"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;param name="MapType"&gt;Specifies a map to include in the &lt;see cref="SaveUnit"/&gt;&lt;/param&gt;
   /// &lt;remarks&gt;If you only want to include a few maps in a &lt;see cref="SaveUnit"/&gt;, specify
   /// which maps to save with this function. Only loaded maps will be saved. If this function
   /// is called on a map type that refers to a map that is not loaded, it will be ignored, and
   /// the specified map type will still be reset next time it becomes active after loading
   /// the game.
   /// See &lt;see cref="IncludeInSaveUnit"/&gt; for more information about save units.
   /// &lt;seealso cref="IncludeCounterInSaveUnit"/&gt;
   /// &lt;seealso cref="ExcludeCounterFromSaveUnit"/&gt;
   /// &lt;seealso cref="ExcludeMapFromSaveUnit"/&gt;
   /// &lt;seealso cref="SaveGame"/&gt;&lt;/remarks&gt;
   [Description("Include the specified map in the SaveUnit that will be saved with the next call to SaveGame.")]
   public virtual void IncludeMapInSaveUnit([Editor("MapType", "UITypeEditor")] Type MapType)
   {
      if (Project.GameWindow.LoadedMaps.ContainsKey(MapType))
      {
         if (saveUnit == null)
            saveUnit = new SaveUnit();
         if (saveUnit.Maps == null)
            saveUnit.Maps = new System.Collections.Hashtable();
         saveUnit.Maps[MapType] = Project.GameWindow.LoadedMaps[MapType];
      }
   }

   /// &lt;summary&gt;
   /// Remove the specified map in from the &lt;see cref="SaveUnit"/&gt; that will be saved with the next call to &lt;see cref="SaveGame"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;param name="MapType"&gt;Specifies a map to exclude from the &lt;see cref="SaveUnit"/&gt;&lt;/param&gt;
   /// &lt;remarks&gt;
   /// If you want to save most maps, but not all, you can call &lt;see cref="IncludeInSaveUnit"/&gt;
   /// to include all maps, and then call this to exclude a few. Maps not included in the save
   /// unit (and maps that were not loaded when the game was saved, even if they are "included")
   /// will be reset next time they become active after loading that &lt;see cref="SaveUnit"/&gt;. Often times an
   /// overly map does not contain any important state information, so excluding an overlay map
   /// from a &lt;see cref="SaveUnit"/&gt; might be a good use of this function.
   /// See &lt;see cref="IncludeInSaveUnit"/&gt; for more information about save units.
   /// &lt;seealso cref="IncludeCounterInSaveUnit"/&gt;
   /// &lt;seealso cref="ExcludeCounterFromSaveUnit"/&gt;
   /// &lt;seealso cref="IncludeMapInSaveUnit"/&gt;
   /// &lt;seealso cref="SaveGame"/&gt;&lt;/remarks&gt;
   [Description("Remove the specified map in from the SaveUnit that will be saved with the next call to SaveGame.")]
   public virtual void ExcludeMapFromSaveUnit([Editor("MapType", "UITypeEditor")] Type MapType)
   {
      if ((saveUnit == null) || (saveUnit.Maps == null))
         return;
      if (saveUnit.Maps.ContainsKey(MapType))
         saveUnit.Maps.Remove(MapType);
   }

   /// &lt;summary&gt;
   /// Save the current &lt;see cref="SaveUnit"/&gt; into the specified save slot.
   /// &lt;/summary&gt;
   /// &lt;param name="Slot"&gt;Specifies a number to uniquely identify this &lt;see cref="SaveUnit"/&gt;. If saved to a file, this number plue the ".sav" extension becomes the filename.&lt;/param&gt;
   /// &lt;param name="InMemory"&gt;If true, no file will be created; the current state of the game is stored in a "slot" in memory (and lost when the game exits). Otherwise the game data is saved to a file.&lt;/param&gt;
   /// &lt;remarks&gt;After saving the game, the &lt;see cref="SaveUnit"/&gt; is cleared so that any further inclusions
   /// will start from an empty set.  When the game is saved, the state of the maps and counters
   /// are saved in their current state rather than the state they were in when
   /// &lt;see cref="IncludeInSaveUnit"/&gt; and related functions were called. One exception to this
   /// rule is &lt;see cref="SaveUnitInclusion.WhichMapIsCurrent"/&gt;, which will store the map that
   /// was current when &lt;see cref="IncludeInSaveUnit"/&gt; was called rather than than when the
   /// game is actually saved (if these happen to be different). It's possible to save a game
   /// in a memory slot as well as a file slot. These are considered different slots and can
   /// store different save images even if they use the same number. Otherwise, if a game
   /// already exists in a particular slot, it is overwritten.
   /// &lt;seealso cref="IncludeInSaveUnit"/&gt;
   /// &lt;seealso cref="IncludeCounterInSaveUnit"/&gt;
   /// &lt;seealso cref="ExcludeCounterFromSaveUnit"/&gt;
   /// &lt;seealso cref="IncludeMapInSaveUnit"/&gt;
   /// &lt;seealso cref="ExcludeMapFromSaveUnit"/&gt;
   /// &lt;seealso cref="LoadGame"/&gt;
   /// &lt;seealso cref="DeleteSave"/&gt;
   /// &lt;/remarks&gt;
   [Description("Save the current save unit into the specified save slot, and reset the save unit. If InMemory is true, no file will be created, otherwise the game is saved to a file.")]
   public virtual void SaveGame(int Slot, bool InMemory)
   {
      System.IO.Stream stm;
      if (InMemory)
         stm = new System.IO.MemoryStream();
      else
         stm = new System.IO.FileStream(System.IO.Path.Combine(
            System.Windows.Forms.Application.UserAppDataPath, Slot.ToString() + ".sav"),
            System.IO.FileMode.Create, System.IO.FileAccess.Write);
      using (stm)
      {
         if (saveUnit == null)
         {
            IncludeInSaveUnit(SaveUnitInclusion.AllMaps);
            IncludeInSaveUnit(SaveUnitInclusion.AllCounters);
            IncludeInSaveUnit(SaveUnitInclusion.WhichMapIsCurrent);
            IncludeInSaveUnit(SaveUnitInclusion.WhichMapIsOverlaid);
            IncludeInSaveUnit(SaveUnitInclusion.PlayerOptions);
         }
         System.Runtime.Serialization.Formatters.Binary.BinaryFormatter bf = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();
         bf.Serialize(stm, saveUnit);
         if (InMemory)
            memorySaveSlots[Slot] = ((System.IO.MemoryStream)stm).ToArray();
         saveUnit = null;
      }
   }

   /// &lt;summary&gt;
   /// Restore the state of the objects contained in the specified save slot.
   /// &lt;/summary&gt;
   /// &lt;param name="Slot"&gt;Specifies a number that uniquely identifies which game to load&lt;/param&gt;
   /// &lt;param name="InMemory"&gt;If true, the memory slot is used, otherwise the file associated with the slot is loaded&lt;/param&gt;
   /// &lt;remarks&gt;
   /// If there is no data in the specified slot, an error occurs. Use &lt;see cref="SaveExists"/&gt;
   /// to determine if data is available to load from a particular slot.
   /// Counters that were not included in the &lt;see cref="SaveUnit"/&gt; will retain the same value they
   /// had before the game was loaded. Similarly, maps that are not included in the save
   /// unit will retain the same state they had before the game was loaded instead of
   /// being reset or loaded from the file. One exception is if
   /// &lt;see cref="SaveUnitInclusion.AllMaps"/&gt; was ever included in the &lt;see cref="SaveUnit"/&gt; (even
   /// if some maps were later excluded). In this case, all maps that were not included
   /// in the &lt;see cref="SaveUnit"/&gt; will be reset next time they are visited.
   /// &lt;seealso cref="SaveGame"/&gt;
   /// &lt;seealso cref="SaveExists"/&gt;
   /// &lt;seealso cref="DeleteSave"/&gt;
   /// &lt;/remarks&gt;
   [Description("Restore the state of the objects contained in the specified save slot. If InMemory is true, the memory slot is used, otherwise the file associated with the slot is loaded.")]
   public virtual void LoadGame(int Slot, bool InMemory)
   {
      System.IO.Stream stm;

      if (InMemory)
         stm = new System.IO.MemoryStream((byte[])memorySaveSlots[Slot], false);
      else
         stm = new System.IO.FileStream(System.IO.Path.Combine(
            System.Windows.Forms.Application.UserAppDataPath, Slot.ToString() + ".sav"),
            System.IO.FileMode.Open, System.IO.FileAccess.Read);

      using (stm)
      {
         System.Runtime.Serialization.Formatters.Binary.BinaryFormatter bf = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();
         SaveUnit unit = (SaveUnit)bf.Deserialize(stm);
         if (unit.Maps != null)
         {
            if (unit.AllMaps)
               Project.GameWindow.LoadedMaps = unit.Maps;
            else
               foreach (System.Collections.DictionaryEntry de in unit.Maps)
                  Project.GameWindow.LoadedMaps[de.Key] = de.Value;
            // If sprites exist on any layer of any map whose static state cache has not
            // been initialized, initialize them now.
            foreach (MapBase mb in Project.GameWindow.LoadedMaps.Values)
            {
               // Loop through each property of each map class
               foreach (System.Reflection.PropertyInfo lpi in mb.GetType().GetProperties())
               {
                  // If the property represents a map layer
                  if (lpi.PropertyType.IsSubclassOf(typeof(LayerBase)))
                  {
                     // Retrieve the layer object
                     LayerBase l = (LayerBase)lpi.GetValue(mb, null);
                     // Loop though each sprite in the layer's sprite collection
                     foreach (SpriteBase sp in l.m_Sprites)
                     {
                        Type spriteType = sp.GetType();
                        // Get the property containing the sprite type's cached list of states
                        System.Reflection.FieldInfo statesField = spriteType.GetField("m_SpriteStates",
                           System.Reflection.BindingFlags.GetField |
                           System.Reflection.BindingFlags.NonPublic |
                           System.Reflection.BindingFlags.Static);
                        // If the sprite has not initialized its states
                        if (statesField.GetValue(sp) == null)
                        {
                           // Call the static method that initializes the sprite's states.
                           System.Reflection.MethodInfo initMethod = spriteType.GetMethod("InitializeStates",
                              System.Reflection.BindingFlags.InvokeMethod |
                              System.Reflection.BindingFlags.NonPublic |
                              System.Reflection.BindingFlags.Static);
                           initMethod.Invoke(null, new object[] { Project.GameWindow.GameDisplay });
                        }
                     }
                  }
               }
            }
         }
         if (unit.CurrentMapType != null)
            Project.GameWindow.CurrentMap = Project.GameWindow.GetMap(unit.CurrentMapType);
         else
            Project.GameWindow.CurrentMap = Project.GameWindow.GetMap(Project.GameWindow.CurrentMap.GetType());
         if (unit.OverlayMapType != null)
         {
            if (unit.OverlayMapType == typeof(System.DBNull))
               Project.GameWindow.OverlayMap = null;
            else
               Project.GameWindow.OverlayMap = Project.GameWindow.GetMap(unit.OverlayMapType);
         }
         else if (Project.GameWindow.OverlayMap != null)
            Project.GameWindow.OverlayMap = Project.GameWindow.GetMap(Project.GameWindow.OverlayMap.GetType());
         if (unit.PlayerOptions != null)
            Project.GameWindow.Players = unit.PlayerOptions;
         // Counters auto-magically take care of themselves via CounterRef
      }
   }

   /// &lt;summary&gt;
   /// Determines if saved game data exists in the specified slot.
   /// &lt;/summary&gt;
   /// &lt;param name="Slot"&gt;Specifies a number that uniquely identifies the slot to check&lt;/param&gt;
   /// &lt;param name="InMemory"&gt;If true, checks to see if the specified memory slot has saved
   /// game data available, otherwise checks to see if a file with the specified number
   /// exists for loading game data.&lt;/param&gt;
   /// &lt;returns&gt;True if data can be loaded from the specified slot, false otherwise.&lt;/returns&gt;
   /// &lt;remarks&gt;
   /// Memory slots and file slots are distinct. If a memory slot has game data in it,
   /// a file slot with the same number may not, and vice versa.  Furthermore a memory slot may
   /// have different game data stored in it than a file slot with the same number.
   /// &lt;seealso cref="LoadGame"/&gt;
   /// &lt;seealso cref="SaveGame"/&gt;
   /// &lt;seealso cref="DeleteSave"/&gt;&lt;/remarks&gt;
   [Description("Determines if saved game data exists in the specified slot.  Checks for the existence of a file if InMemory is false.")]
   public virtual bool SaveExists(int Slot, bool InMemory)
   {
      if (InMemory)
         return memorySaveSlots.ContainsKey(Slot);
      return System.IO.File.Exists(System.IO.Path.Combine(
         System.Windows.Forms.Application.UserAppDataPath, Slot.ToString() + ".sav"));
   }

   /// &lt;summary&gt;
   /// Empties the specified save slot.
   /// &lt;/summary&gt;
   /// &lt;param name="Slot"&gt;Specifies a number that uniquely identifies a saved game&lt;/param&gt;
   /// &lt;param name="InMemory"&gt;If false, a file is deleted, otherwise a memory slot is cleared.&lt;/param&gt;
   /// &lt;remarks&gt;An error occurs if the specified slot is a file slot and there is no data to delete.
   /// Memory slots and file slots are distinct. If a memory slot has game data in it,
   /// a file slot with the same number may not, and vice versa.  Furthermore a memory slot may
   /// have different game data stored in it than a file slot with the same number.
   /// &lt;seealso cref="LoadGame"/&gt;
   /// &lt;seealso cref="SaveGame"/&gt;
   /// &lt;seealso cref="SaveExists"/&gt;&lt;/remarks&gt;
   [Description("Empties the specified save slot.  If InMemory is false, a file is deleted, otherwise a memory slot is cleared.")]
   public virtual void DeleteSave(int Slot, bool InMemory)
   {
      if (InMemory)
         memorySaveSlots.Remove(Slot);
      else
         System.IO.File.Delete(System.IO.Path.Combine(
            System.Windows.Forms.Application.UserAppDataPath, Slot.ToString() + ".sav"));
   }

   /// &lt;summary&gt;
   /// If multiple views are visible, this determines which view is currently active.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Only the currently active view is affected by functions like
   /// &lt;see cref="PlanBase.ScrollSpriteIntoView"/&gt;, and only the current view is
   /// drawn by &lt;see cref="MapBase.Draw"/&gt;. &lt;see cref="MapBase.DrawAllViews"/&gt; is called
   /// during the main loop to cycle through each visible view (changing this value)
   /// and draw it. The scope of this value is limited to the map, so setting it
   /// affects only the map containing this object.&lt;/remarks&gt;
   [Browsable(false)]
   public virtual int CurrentView
   {
      get
      {
         return ParentLayer.ParentMap.CurrentViewIndex;
      }
      set
      {
         ParentLayer.ParentMap.CurrentViewIndex = (byte)value;
      }
   }

   /// &lt;summary&gt;
   /// Sets the current state of a sprite based on a category and index into the category.
   /// &lt;/summary&gt;
   /// &lt;param name="Category"&gt;Category containing the sprite to be affected&lt;/param&gt;
   /// &lt;param name="SpriteIndex"&gt;Zero-based index into the category, specifying a sprite&lt;/param&gt;
   /// &lt;param name="State"&gt;Numeric value referring to a state of the specified sprite.&lt;/param&gt;
   [Description("Sets the current state of a sprite based on a category and index into the category.")]
   public virtual void SetCategorySpriteState(SpriteCollection Category, int SpriteIndex, int State)
   {
      Debug.Assert(Category[SpriteIndex].isActive, "SetCategorySpriteState attempted to set the state of an inactive sprite.");
      Category[SpriteIndex].state = State;
   }

   /// &lt;summary&gt;
   /// Turn off the overlay map.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This disables all drawing and rules in the overlay map.&lt;/remarks&gt;
   [Description("Turn off the overlay map. This disables all drawing and rules in the overlay map.")]
   public virtual void ClearOverlay()
   {
      Project.GameWindow.OverlayMap = null;
   }

   /// &lt;summary&gt;
   /// Set the overlay map.
   /// &lt;/summary&gt;
   /// &lt;param name="MapType"&gt;Specifies a map that should be loaded into the overlay&lt;/param&gt;
   /// &lt;remarks&gt;This is very similar to &lt;see cref="SwitchToMap"/&gt;, but it affects the overlay
   /// map instead of the main map.&lt;/remarks&gt;
   [Description("Set the overlay map.")]
   public virtual void SetOverlay([Editor("MapType", "UITypeEditor")] Type MapType)
   {
      Project.GameWindow.OverlayMap = Project.GameWindow.GetMap(MapType);
   }

   /// &lt;summary&gt;
   /// Turn on or off a flag associated with the current map.
   /// &lt;/summary&gt;
   /// &lt;param name="FlagIndex"&gt;A value from 0 to 30 indicating which flag to set or clear&lt;/param&gt;
   /// &lt;param name="Value"&gt;True to set the flag or false to clear it&lt;/param&gt;
   /// &lt;remarks&gt;Each map has a built-in variable &lt;see cref="MapBase.MapFlags"/&gt; that can be used
   /// to store 30 boolean values associated with the map.  This could be used instead of counters
   /// to turn on or off major features of the map, for example, whether the map has been
   /// completed and will allow the player to exit the map without completing it. Such a task is
   /// more suited to a map flag than a counter because there must be exactly one flag per map,
   /// and the flag will automatically be available for each map that is created.
   /// &lt;seealso cref="SetTargetMapFlag"/&gt;
   /// &lt;seealso cref="IsMapFlagOn"/&gt;&lt;/remarks&gt;
   [Description("Turn on or off a flag associated with the current map.  FlagIndex must be a value from 0 through 30.")]
   public virtual void SetMapFlag(int FlagIndex, bool Value)
   {
      if (Value)
         ParentLayer.ParentMap.MapFlags |= 1 &lt;&lt; FlagIndex;
      else
         ParentLayer.ParentMap.MapFlags &amp;= ~(1 &lt;&lt; FlagIndex);
   }

   /// &lt;summary&gt;
   /// Turn on or off a flag associated with the specified map.
   /// &lt;/summary&gt;
   /// &lt;param name="MapType"&gt;Specifies a map whose flag will be set&lt;/param&gt;
   /// &lt;param name="FlagIndex"&gt;A value from 0 to 30 specifying which flag to set or clear&lt;/param&gt;
   /// &lt;param name="Value"&gt;True to set the flag or false to clear it&lt;/param&gt;
   /// &lt;remarks&gt;This operates like &lt;see cref="SetMapFlag"/&gt;, but can operate on any map
   /// rather than just the current map.  This could be used, for example, to set a flag that
   /// would cause all the sprites on any particular map (even if it is not the current map)
   /// to be frozen next time the player visits it, assuming all sprite definitions check
   /// the flag before allowing the sprite to move.
   /// &lt;seealso cref="SetMapFlag"/&gt;
   /// &lt;seealso cref="IsMapFlagOn"/&gt;&lt;/remarks&gt;
   [Description("Turn on or off a flag associated with the specified map. FlagIndex must be a value from 0 through 30.")]
   public virtual void SetTargetMapFlag([Editor("MapType", "UITypeEditor")] Type MapType, int FlagIndex, bool Value)
   {
      if (Value)
         Project.GameWindow.GetMap(MapType).MapFlags |= 1 &lt;&lt; FlagIndex;
      else
         Project.GameWindow.GetMap(MapType).MapFlags &amp;= ~(1 &lt;&lt; FlagIndex);
   }

   /// &lt;summary&gt;
   /// Determine if the specified map-specific flag on the current map is on.
   /// &lt;/summary&gt;
   /// &lt;param name="FlagIndex"&gt;A number from 0 to 30 specifying which flag to check&lt;/param&gt;
   /// &lt;returns&gt;True if the specified flag is set, or false if it is not.&lt;/returns&gt;
   [Description("Determine if the specified map-specific flag on the current map is on.")]
   public virtual bool IsMapFlagOn(int FlagIndex)
   {
      return ((ParentLayer.ParentMap.MapFlags &amp; (1 &lt;&lt; FlagIndex)) != 0);
   }

   /// &lt;summary&gt;
   /// Unload all maps that aren't currently visible.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This unloads all maps except the current map and the overlay map.
   /// They will be reset next time they become active.&lt;/remarks&gt;
   [Description("Unload all maps that aren't currently visible (as the current map or overlay map).")]
   public virtual void UnloadBackgroundMaps()
   {
      Project.GameWindow.UnloadBackgroundMaps();
   }

   /// &lt;summary&gt;
   /// Quit the game by closing the main window.
   /// &lt;/summary&gt;
   [Description("Quit the game by closing the main window.")]
   public virtual void QuitGame()
   {
      Project.GameWindow.Quit();
   }

   /// &lt;summary&gt;
   /// Determines if a specified key is being pressed.
   /// &lt;/summary&gt;
   /// &lt;param name="key"&gt;Which key to check&lt;/param&gt;
   /// &lt;returns&gt;True if the specified key is currently pressed, false otherwise&lt;/returns&gt;
   [Description("Returns true if the specified key is currently pressed")]
   public virtual bool IsKeyPressed(Key key)
   {
      return Project.GameWindow.KeyboardState[key];
   }

   /// &lt;summary&gt;
   /// Return a random number within a specified range.
   /// &lt;/summary&gt;
   /// &lt;param name="Minimum"&gt;Minimum value that can be returned&lt;/param&gt;
   /// &lt;param name="Maximum"&gt;Maximum bound of the range; this value will never be returned&lt;/param&gt;
   /// &lt;returns&gt;A random integer greater than or equal to Minimum and less than Maximum.
   /// This value is based on a random seed that was generated based on the current time when
   /// the program started.&lt;/returns&gt;
   [Description("Return a random number greater than or equal to Minimum and less than Maximum.")]
   public virtual int GetRandomNumber(int Minimum, int Maximum)
   {
      return randomGen.Next(Minimum, Maximum);
   }

   /// &lt;summary&gt;
   /// Change a counter's value with a pre-defined operation.
   /// &lt;/summary&gt;
   /// &lt;param name="Operation"&gt;Specified a pre-defined operation to execute on a counter&lt;/param&gt;
   /// &lt;returns&gt;True if the counter value hit a limit, false otherwise. For an operation that
   /// stops at a limit, true will only be returned if the counter was unable to change. For an
   /// operation that loops, true indicates that the counter looped. For operators that set the
   /// counter to a limit, true is returned if the counter was already at the limit value, false
   /// otherwise.&lt;/returns&gt;
   /// &lt;remarks&gt;Counter values can be changed directly with the "=" function, but
   /// using a pre-defined operation, you can easily cause the counter to loop when
   /// it hits a limit, which is useful for counters linked to tile animations.&lt;/remarks&gt;
   [Description("Change a counter's value with a pre-defined operation. Return true if the counter hits a limit or is left unchanged.")]
   public virtual bool ChangeCounter(Counter Counter, CounterOperation Operation)
   {
      switch (Operation)
      {
         case CounterOperation.IncrementAndStop:
            if (Counter.CurrentValue &lt; Counter.MaxValue)
               Counter.CurrentValue += 1;
            else
               return true;
            return false;
         case CounterOperation.DecrementAndStop:
            if (Counter.CurrentValue &gt; Counter.MinValue)
               Counter.CurrentValue -= 1;
            else
               return true;
            return false;
         case CounterOperation.IncrementAndLoop:
            if (Counter.CurrentValue &lt; Counter.MaxValue)
            {
               Counter.CurrentValue += 1;
               return false;
            }
            Counter.CurrentValue = Counter.MinValue;
            return true;
         case CounterOperation.DecrementAndLoop:
            if (Counter.CurrentValue &gt; Counter.MinValue)
            {
               Counter.CurrentValue -= 1;
               return false;
            }
            Counter.CurrentValue = Counter.MaxValue;
            return true;
         case CounterOperation.SetToMinimum:
            if (Counter.CurrentValue == Counter.MinValue)
               return true;
            Counter.CurrentValue = Counter.MinValue;
            return false;
         case CounterOperation.SetToMaximum:
            if (Counter.CurrentValue == Counter.MaxValue)
               return true;
            Counter.CurrentValue = Counter.MaxValue;
            return false;
      }
      return false;
   }

   /// &lt;summary&gt;
   /// Determines if the specified mouse button is pressed.
   /// &lt;/summary&gt;
   /// &lt;param name="Button"&gt;Specifies which button to check.&lt;/param&gt;
   /// &lt;returns&gt;True if the button is pressed, false if it is not pressed.&lt;/returns&gt;
   [Description("Determines if touch was initiated or mouse was clicked this frame.")]
   public virtual bool Clicked()
   {
      return (0 != System.Windows.Forms.Control.MouseButtons) &amp;&amp;
         ((GameForm.oldMouseButtons &amp; System.Windows.Forms.Control.MouseButtons) == 0);
   }

   /// &lt;summary&gt;
   /// When the mouse drags over the display, scroll the map along with it.
   /// &lt;/summary&gt;
   [Description("When the mouse drags over the display, scroll the map along with it.")]
   public virtual void DragMap()
   {
      if (0 != (GameForm.oldMouseButtons &amp; System.Windows.Forms.Control.MouseButtons &amp; System.Windows.Forms.MouseButtons.Left))
      {
         int mapX = (int)((ParentLayer.CurrentPosition.X - ParentLayer.AbsolutePosition.X) / ParentLayer.ScrollRate.Width);
         int mapY = (int)((ParentLayer.CurrentPosition.Y - ParentLayer.AbsolutePosition.Y) / ParentLayer.ScrollRate.Height);
         int mouseOffsetX = System.Windows.Forms.Control.MousePosition.X - GameForm.oldMousePosition.X;
         int mouseOffsetY = System.Windows.Forms.Control.MousePosition.Y - GameForm.oldMousePosition.Y;
         Project.GameWindow.CurrentMap.Scroll(new System.Drawing.Point(mapX + mouseOffsetX, mapY + mouseOffsetY));
      }
   }

   #region "Messages"
   /// &lt;summary&gt;
   /// Determines in which view(s) a message will appear.
   /// &lt;/summary&gt;
   public enum MessageView
   {
      /// &lt;summary&gt;
      /// Display messages in the view that is active when the message is created.
      /// &lt;/summary&gt;
      Current,
      /// &lt;summary&gt;
      /// Display messages in all views
      /// &lt;/summary&gt;
      All,
      /// &lt;summary&gt;
      /// Display messages in the first (top or left) view
      /// &lt;/summary&gt;
      First,
      /// &lt;summary&gt;
      /// Display messages in the second view: bottom or right in 2-view layout, top-right in 4-view layout.
      /// &lt;/summary&gt;
      Second,
      /// &lt;summary&gt;
      /// Display messages in the bottom-left view
      /// &lt;/summary&gt;
      Third,
      /// &lt;summary&gt;
      /// Display messages in the bottom-right view
      /// &lt;/summary&gt;
      Fourth
   }
   /// &lt;summary&gt;
   /// Specifies a button or buttons on a player's input controller.
   /// &lt;/summary&gt;
   [Flags()]
   public enum ButtonSpecifier
   {
      /// &lt;summary&gt;
      /// The first button as defined by the player options
      /// &lt;/summary&gt;
      First = 1,
      /// &lt;summary&gt;
      /// The second button as defined by the player options
      /// &lt;/summary&gt;
      Second = 2,
      /// &lt;summary&gt;
      /// The third button as defined by the player options
      /// &lt;/summary&gt;
      Third = 4,
      /// &lt;summary&gt;
      /// The fourth button as defined by the player options
      /// &lt;/summary&gt;
      Fourth = 8,
      /// &lt;summary&gt;
      /// Disable input from the player while waiting for a button;
      /// prevent it from affecting the player's sprite.
      /// &lt;/summary&gt;
      FreezeInputs = 16
   }

   protected static Tileset FontTileset = null;
   protected const int maxMessages = 4;
   protected static MessageLayer[] activeMessages = new MessageLayer[maxMessages];
   protected static int activeMessageCount = 0;
   protected static System.Drawing.Color messageBackground = System.Drawing.Color.FromArgb(128, 64, 0, 255);
   protected static MessageView msgView = MessageView.Current;
   protected static RelativePosition msgPos = RelativePosition.CenterMiddle;
   protected const int messageMargin = 6;
   /// &lt;summary&gt;
   /// Zero-based player index that will be assigned to newly created messages
   /// &lt;/summary&gt;
   protected static int currentPlayer = 0;
   protected static ButtonSpecifier dismissButton = ButtonSpecifier.First | ButtonSpecifier.FreezeInputs;
   protected static byte[] dismissPhase = null;

   /// &lt;summary&gt;
   /// Represents a message created and displayed by &lt;see cref="ShowMessage"/&gt;.
   /// &lt;/summary&gt;
   public partial class MessageLayer : ByteLayer
   {
      public readonly System.Drawing.Color background;
      public MessageView view;
      public ButtonSpecifier dismissButton;
      /// &lt;summary&gt;
      /// 0-based player index whose controls affect this message
      /// &lt;/summary&gt;
      public int player;

      /// &lt;summary&gt;
      /// Creates a message layer object
      /// &lt;/summary&gt;
      /// &lt;param name="Tileset"&gt;Each tile in this tileset represents a unicode character starting with
      /// tile number 0 representing unicode character 0.&lt;/param&gt;
      /// &lt;param name="Parent"&gt;Map that will host this layer.&lt;/param&gt;
      /// &lt;param name="nColumns"&gt;Number of columns of text this layer can represent.&lt;/param&gt;
      /// &lt;param name="nRows"&gt;Number of rows of text this layer can represent.&lt;/param&gt;
      /// &lt;param name="Position"&gt;Position of the top-left corner of this layer within the map.&lt;/param&gt;
      /// &lt;param name="background"&gt;Background color for the box containing this message.&lt;/param&gt;
      /// &lt;param name="player"&gt;0-based player number whose button can dismiss this message.&lt;/param&gt;
      /// &lt;param name="dismissButton"&gt;Which of the player's buttons can dismiss this message.&lt;/param&gt;
      /// &lt;param name="msgView"&gt;Which view(s) will the message appear in.&lt;/param&gt;
      public MessageLayer(Tileset Tileset, MapBase Parent, int nColumns, int nRows,
         System.Drawing.Point Position, System.Drawing.Color background, int player,
         ButtonSpecifier dismissButton, MessageView msgView) :
         base(Tileset, Parent, 0, 0, 0, 0, nColumns, nRows, 0, 0, Position,
         new System.Drawing.SizeF(0, 0), LightingMode.Disabled, 0, 0, null)
      {
         this.background = background;
         this.player = player;
         this.dismissButton = dismissButton;
         if (msgView == MessageView.Current)
         {
            switch (Parent.CurrentViewIndex)
            {
               case 0:
                  view = MessageView.First;
                  break;
               case 1:
                  view = MessageView.Second;
                  break;
               case 2:
                  view = MessageView.Third;
                  break;
               case 3:
                  view = MessageView.Fourth;
                  break;
            }
         }
         else
            view = msgView;
      }
   }

   /// &lt;summary&gt;
   /// Handles button pressses from a player with respect to displayed messages
   /// &lt;/summary&gt;
   /// &lt;param name="playerNumber"&gt;1-based player index&lt;/param&gt;
   /// &lt;param name="player"&gt;Player object providing the inputs.&lt;/param&gt;
   /// &lt;returns&gt;True if input can be passed to the player or false if the player
   /// is "frozen" viewing a message.&lt;/returns&gt;
   public static bool PlayerPressButton(int playerNumber, IPlayer player)
   {
      for (int i = 0; i &lt; activeMessageCount; i++)
      {
         MessageLayer msg = activeMessages[i];
         if (msg.player == playerNumber - 1)
         {
            bool dismissPressed = false;
            if ((0 != (msg.dismissButton &amp; ButtonSpecifier.First)) &amp;&amp; player.Button1)
               dismissPressed = true;
            if ((0 != (msg.dismissButton &amp; ButtonSpecifier.Second)) &amp;&amp; player.Button2)
               dismissPressed = true;
            if ((0 != (msg.dismissButton &amp; ButtonSpecifier.Third)) &amp;&amp; player.Button3)
               dismissPressed = true;
            if ((0 != (msg.dismissButton &amp; ButtonSpecifier.Fourth)) &amp;&amp; player.Button4)
               dismissPressed = true;

            // dismissPhase[x]:
            // 0 = No frames have passed yet
            // 1 = Frames have passed and the dismiss button was initially pressed
            // 2 = Frames have passed and the dismiss button is not pressed
            // 3 = Dismiss button was not pressed, but now it is.

            if (dismissPhase == null)
               dismissPhase = new byte[Project.MaxPlayers];

            if (dismissPressed)
            {
               if ((dismissPhase[msg.player] == 0) || (dismissPhase[msg.player] == 2))
                  dismissPhase[msg.player]++;
            }
            else
            {
               if (dismissPhase[msg.player] &lt; 2)
                  dismissPhase[msg.player] = 2;
               else if (dismissPhase[msg.player] &gt; 2)
               {
                  DismissMessage(i);
                  dismissPhase[msg.player] = 0;
               }
            }

            if (0 != (msg.dismissButton &amp; ButtonSpecifier.FreezeInputs))
            {
               return false;
            }
         }
      }
      return true;
   }

   private static void DismissMessage(int messageIndex)
   {
      for (int i = messageIndex; i &lt; activeMessageCount - 1; i++)
         activeMessages[i] = activeMessages[i + 1];
      activeMessageCount--;
   }

   /// &lt;summary&gt;
   /// Sets the background for new messages added with &lt;see cref="ShowMessage"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;param name="background"&gt;Names a color for the background of new messages.&lt;/param&gt;
   /// &lt;param name="alpha"&gt;Transparency level of the color: 255 = opaque, 128=50% transparent.&lt;/param&gt;
   [Description("Sets the background for new messages added with ShowMessage. Alpha 255 = opaque, alpha 128=50% transparent.")]
   public virtual void SetMessageBackground(System.Drawing.KnownColor background, byte alpha)
   {
      System.Drawing.Color c = System.Drawing.Color.FromKnownColor(background);
      messageBackground = System.Drawing.Color.FromArgb(alpha, c.R, c.G, c.B);
   }

   /// &lt;summary&gt;
   /// Determines which player and which button will dismiss newly created messages.
   /// &lt;/summary&gt;
   /// &lt;param name="DismissButton"&gt;Which of the player's buttons will dismiss the message&lt;/param&gt;
   /// &lt;param name="Player"&gt;Player number 1 to 4&lt;/param&gt;
   [Description("Determines which player and which button will dismiss newly created messages. Player is a number 1 to 4.")]
   public virtual void SetMessageDismissal(ButtonSpecifier DismissButton, int Player)
   {
      dismissButton = DismissButton;
      currentPlayer = Player - 1;
   }

   /// &lt;summary&gt;
   /// Adds a message to the display.
   /// &lt;/summary&gt;
   /// &lt;param name="Message"&gt;Message text as a quoted string.  Use \r\n to insert new lines
   /// into the message.&lt;/param&gt;
   /// &lt;remarks&gt;Up to 4 messages may be displayed.  No automatic word wrap or centering
   /// is performed.  All formatting is determined by the content of the string.&lt;/remarks&gt;
   [Description("Adds a message to the display. Up to 4 messages may be displayed.")]
   public virtual void ShowMessage([Editor("Message", "UITypeEditor")] string Message)
   {
      if (activeMessageCount &gt;= maxMessages)
         throw new InvalidOperationException("Maximum number of displayed messages exceeded");
      activeMessages[activeMessageCount++] = CreateMessage(Message);
   }

   /// &lt;summary&gt;
   /// Clears all active messages from the display.
   /// &lt;/summary&gt;
   [Description("Clears all active messages from the display")]
   public virtual void ClearAllMessages()
   {
      activeMessageCount = 0;
   }

   /// &lt;summary&gt;
   /// Draws all active messages.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This function is called by the framework after drawing the overlay map.&lt;/remarks&gt;
   public static void DrawMessages()
   {
      for (int i = 0; i &lt; activeMessageCount; i++)
      {
         MessageLayer msg = activeMessages[i];
         Display disp = msg.ParentMap.Display;
         byte oldView = msg.ParentMap.CurrentViewIndex;
         switch (msg.view)
         {
            case MessageView.Current:
               DrawMessage(msg, disp);
               break;
            case MessageView.All:
               for (byte v = 0; v &lt; Project.MaxViews; v++)
               {
                  msg.ParentMap.CurrentViewIndex = v;
                  DrawMessage(msg, disp);
               }
               break;
            case MessageView.First:
               msg.ParentMap.CurrentViewIndex = 0;
               DrawMessage(msg, disp);
               break;
            case MessageView.Second:
               msg.ParentMap.CurrentViewIndex = 1;
               DrawMessage(msg, disp);
               break;
            case MessageView.Third:
               msg.ParentMap.CurrentViewIndex = 2;
               DrawMessage(msg, disp);
               break;
            case MessageView.Fourth:
               msg.ParentMap.CurrentViewIndex = 3;
               DrawMessage(msg, disp);
               break;
         }
         msg.ParentMap.CurrentViewIndex = oldView;
      }
   }

   protected static void DrawMessage(MessageLayer msg, Display disp)
   {
      disp.Scissor(msg.ParentMap.CurrentView);
      System.Drawing.Rectangle messageRect = new System.Drawing.Rectangle(
         msg.CurrentPosition.X + msg.ParentMap.CurrentView.X,
         msg.CurrentPosition.Y + msg.ParentMap.CurrentView.Y,
         msg.VirtualColumns * msg.Tileset.TileWidth,
         msg.VirtualRows * msg.Tileset.TileHeight);
      messageRect.Inflate(messageMargin, messageMargin);
      disp.SetColor(msg.background);
      disp.FillRectangle(messageRect);
      disp.SetColor(System.Drawing.Color.White);
      disp.DrawRectangle(messageRect, 0);
      msg.Draw();
   }

   /// &lt;summary&gt;
   /// Set the tileset used as the source for characters in messages.
   /// &lt;/summary&gt;
   /// &lt;param name="Tileset"&gt;Tileset whose tiles will be used to represent characters
   /// for messages. The tile numbers correspond to ASCII values of the characters
   /// used in the messages.&lt;/param&gt;
   [Description("Set the tileset used as the source for characters in messages")]
   public virtual void SetMessageFont(Tileset Tileset)
   {
      FontTileset = Tileset;
   }

   protected virtual MessageLayer CreateMessage(string Message)
   {
      if (FontTileset == null)
         FontTileset = (Tileset)(typeof(Tileset).GetProperties(
            System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.GetProperty | System.Reflection.BindingFlags.Public)
            [0].GetValue(null, null));

      byte[] charBytes = System.Text.Encoding.Unicode.GetBytes(Message);
      Display disp = ParentLayer.ParentMap.Display;
      int x = 0, y = 1;
      int maxWidth = 1;
      for (int charIdx = 0; charIdx &lt; charBytes.Length; charIdx += 2)
      {
         if (Message[charIdx / 2] == '\n')
         {
            x = 0;
            y++;
         }
         else if (Message[charIdx / 2] != '\r')
         {
            if (++x &gt; maxWidth)
               maxWidth = x;
         }
      }

      System.Drawing.Size messageSize = new System.Drawing.Size(
         maxWidth * FontTileset.TileWidth, y * FontTileset.TileHeight);
      System.Drawing.Size viewSize = ParentLayer.ParentMap.CurrentView.Size;

      System.Drawing.Point ptMessage = System.Drawing.Point.Empty;

      switch (msgPos)
      {
         case RelativePosition.TopLeft:
         case RelativePosition.LeftMiddle:
         case RelativePosition.BottomLeft:
            ptMessage.X = viewSize.Width / 4 - messageSize.Width / 2;
            if (ptMessage.X &lt; messageMargin)
               ptMessage.X = messageMargin;
            break;
         case RelativePosition.TopCenter:
         case RelativePosition.CenterMiddle:
         case RelativePosition.BottomCenter:
            ptMessage.X = (viewSize.Width - messageSize.Width) / 2;
            break;
         case RelativePosition.TopRight:
         case RelativePosition.RightMiddle:
         case RelativePosition.BottomRight:
            ptMessage.X = viewSize.Width * 3 / 4 - messageSize.Width / 2;
            if (ptMessage.X + messageSize.Width &gt; viewSize.Width - messageMargin)
               ptMessage.X = viewSize.Width - messageSize.Width - messageMargin;
            break;
      }

      switch (msgPos)
      {
         case RelativePosition.TopLeft:
         case RelativePosition.TopCenter:
         case RelativePosition.TopRight:
            ptMessage.Y = viewSize.Height / 4 - messageSize.Height / 2;
            if (ptMessage.Y &lt;= 0)
               ptMessage.Y = 1;
            break;
         case RelativePosition.LeftMiddle:
         case RelativePosition.CenterMiddle:
         case RelativePosition.RightMiddle:
            ptMessage.Y = (viewSize.Height - messageSize.Height) / 2;
            break;
         case RelativePosition.BottomLeft:
         case RelativePosition.BottomCenter:
         case RelativePosition.BottomRight:
            ptMessage.Y = viewSize.Height * 3 / 4 - messageSize.Height / 2;
            if (ptMessage.Y + messageSize.Height &gt;= viewSize.Height)
               ptMessage.Y = viewSize.Height - messageSize.Height - 1;
            break;
      }

      MessageLayer result = new MessageLayer(
         FontTileset, ParentLayer.ParentMap, maxWidth, y, ptMessage,
         messageBackground, currentPlayer, dismissButton, msgView);

      x = 0;
      y = 0;
      for (int charIdx = 0; charIdx &lt; charBytes.Length; charIdx += 2)
      {
         if (Message[charIdx / 2] == '\n')
         {
            x = 0;
            y++;
         }
         else if (Message[charIdx / 2] != '\r')
         {
            result[x++, y] = charBytes[charIdx];
         }
      }

      return result;
   }
   #endregion
}

/// &lt;summary&gt;
/// Specifies an operation to perform on a counter.
/// &lt;/summary&gt;
public enum CounterOperation
{
   /// &lt;summary&gt;
   /// Add 1 to the counter value. If the counter was at it's maximum value, leave it there.
   /// &lt;/summary&gt;
   IncrementAndStop,
   /// &lt;summary&gt;
   /// Subtract 1 from the counter value. If the counter was at it's minimum value, leave it there.
   /// &lt;/summary&gt;
   DecrementAndStop,
   /// &lt;summary&gt;
   /// Add 1 to the counter value. If the counter was at it's maximum value, set it to its minimum value.
   /// &lt;/summary&gt;
   IncrementAndLoop,
   /// &lt;summary&gt;
   /// Subtract 1 from the counter value. If the counter was at it's minimum value, set it to its maximum value.
   /// &lt;/summary&gt;
   DecrementAndLoop,
   /// &lt;summary&gt;
   /// Set the counter to its minimum value.
   /// &lt;/summary&gt;
   SetToMinimum,
   /// &lt;summary&gt;
   /// Set the counter to its maximum value.
   /// &lt;/summary&gt;
   SetToMaximum
}

/// &lt;summary&gt;
/// This is used to specify general categories of objects to be included
/// in a saved game (save unit).
/// &lt;/summary&gt;
/// &lt;remarks&gt;This is used with &lt;see cref="GeneralRules.IncludeInSaveUnit"/&gt;.
/// &lt;seealso cref="GeneralRules.IncludeInSaveUnit"/&gt;
/// &lt;seealso cref="GeneralRules.LoadGame"/&gt;&lt;/remarks&gt;
public enum SaveUnitInclusion
{
   /// &lt;summary&gt;
   /// Includes all loaded maps.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Including all maps in a &lt;see cref="SaveUnit"/&gt; causes all maps to be loaded
   /// or reset when the game is loaded. Maps that were in memory when the game was saved
   /// will be loaded from the file, while the rest will be reset. In that sense, it is
   /// including even maps that aren't loaded because it causes all maps to be reset when the
   /// game is loaded, and then only the stored maps are restored from the file.&lt;/remarks&gt;
   AllMaps,
   /// &lt;summary&gt;
   /// Includes the values of all counters defined in the project.
   /// &lt;/summary&gt;
   AllCounters,
   /// &lt;summary&gt;
   /// Includes an indicator of which map was the currently active map when the game was saved.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;If this is not included, the current map will be the same map that was active
   /// before the game was loaded, which may be reset if that map was not included in the
   /// &lt;see cref="SaveUnit"/&gt;. The indicator is determined at the time that &lt;see cref="GeneralRules.IncludeInSaveUnit"/&gt;
   /// is called, unlike most other members which are stored at the time &lt;see cref="GeneralRules.SaveGame"/&gt;
   /// is called.&lt;/remarks&gt;
   WhichMapIsCurrent,
   /// &lt;summary&gt;
   /// Includes an indicator of which map was set as the overlay map when the game was saved.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;If this is not included, the overlay map will remain unchanged when loading
   /// the game stored in this save unit. The indicator is determined at the time that
   /// &lt;see cref="GeneralRules.IncludeInSaveUnit"/&gt; is called, unlike most other members
   /// which are stored at the time &lt;see cref="GeneralRules.SaveGame"/&gt; is called.&lt;/remarks&gt;
   WhichMapIsOverlaid,
   /// &lt;summary&gt;
   /// Includes player preferences that determine which input devices the players are using and
   /// the keyboad layout.
   /// &lt;/summary&gt;
   PlayerOptions
}

/// &lt;summary&gt;
/// Specifies an arrangement for multiple scrolling views on a single display
/// &lt;/summary&gt;
/// &lt;remarks&gt;This is used with &lt;see cref="GeneralRules.SetViewLayout"/&gt;.
/// There is no space between the views in any of these layouts, but an overlay layer could
/// be used to draw separators on top of the views.
/// &lt;seealso cref="GeneralRules.SetViewLayout"/&gt;&lt;/remarks&gt;
public enum ViewLayout
{
   /// &lt;summary&gt;
   /// A single view that fills the display
   /// &lt;/summary&gt;
   Single,
   /// &lt;summary&gt;
   /// Two views side by side, equally split
   /// &lt;/summary&gt;
   LeftRight,
   /// &lt;summary&gt;
   /// Two views, one above the other, equally split
   /// &lt;/summary&gt;
   TopBottom,
   /// &lt;summary&gt;
   /// Four views occupying the four corners of the display, equally split
   /// &lt;/summary&gt;
   FourCorners
}

/// &lt;summary&gt;
/// Retains information about what has been included for a saved game.
/// &lt;/summary&gt;
/// &lt;remarks&gt;The information included in a SaveUnit only selects which information
/// will be saved, but does not actually store a copy of it. The data for these objects
/// is copied from the objects referenced in the SaveUnit at the time that
/// &lt;see cref="GeneralRules.SaveGame"/&gt; is called. One exception is &lt;see cref="SaveUnitInclusion.WhichMapIsCurrent"/&gt;,
/// which stores an indicator of the current map at the time &lt;see cref="GeneralRules.IncludeInSaveUnit"/&gt; is
/// called.&lt;/remarks&gt;
[Serializable()]
public partial class SaveUnit
{
   public SaveUnit()
   {
   }
   /// &lt;summary&gt;
   /// Indicates whether &lt;see cref="SaveUnitInclusion.AllMaps"/&gt; was included.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This is significant because &lt;see cref="GeneralRules.LoadGame"/&gt; behaves differently
   /// with respect to maps that were not stored in the &lt;see cref="SaveUnit"/&gt; when this
   /// is true or false. If all maps were included, then maps that were not stored are
   /// reset while the game ie being loaded, otherwise they are left as they were before
   /// the game was loaded.&lt;/remarks&gt;
   public bool AllMaps = false;
   /// &lt;summary&gt;
   /// Refers to all maps that will be saved
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The key of this collection is the type of the map and the value refers to the
   /// instance of the map data.&lt;/remarks&gt;
   public System.Collections.Hashtable Maps = null;
   /// &lt;summary&gt;
   /// This indicator remembers which map was current, or is null if the indicator is not saved
   /// &lt;/summary&gt;
   public System.Type CurrentMapType = null;
   /// &lt;summary&gt;
   /// This indicator remembers which map was used as an overlay.  It's null if the indicator is
   /// not saved, and typeof(System.DBNull) if the overlay map is empty.
   /// &lt;/summary&gt;
   public System.Type OverlayMapType = null;
   /// &lt;summary&gt;
   /// An array of &lt;see cref="CounterRef"/&gt; objects used to include counters in a &lt;see cref="SaveUnit"/&gt;
   /// &lt;/summary&gt;
   public System.Collections.ArrayList Counters = null;
   /// &lt;summary&gt;
   /// Stores player preferenes.
   /// &lt;/summary&gt;
   public IPlayer[] PlayerOptions = null;
}

/// &lt;summary&gt;
/// This class provides a kind of indirect reference to a counter for the purposes
/// of saving and loading counter values in a &lt;see cref="SaveUnit"/&gt;.
/// &lt;/summary&gt;
/// &lt;remarks&gt;Since counters are global objects, it doesn't work well to add a counter
/// directly to the save unit because then loading the save unit will leave the
/// loaded counter values contained in the &lt;see cref="SaveUnit"/&gt; object. But by
/// providing this wrapper that has code specifically for loading ans storing counters,
/// the value of the global counters can automatically be linked to those in a
/// &lt;see cref="SaveUnit"/&gt;.&lt;/remarks&gt;
[Serializable()]
public partial class CounterRef : System.Runtime.Serialization.ISerializable
{
   public string counterName;
   public Counter instance;

   public CounterRef(Counter counter)
   {
      instance = counter;
      System.Reflection.PropertyInfo[] counterProps = typeof(Counter).GetProperties(
         System.Reflection.BindingFlags.Public |
         System.Reflection.BindingFlags.GetProperty |
         System.Reflection.BindingFlags.Static);
      foreach (System.Reflection.PropertyInfo counterProp in counterProps)
      {
         Counter inst = (Counter)counterProp.GetValue(null, null);
         if (inst == counter)
         {
            counterName = counterProp.Name;
            break;
         }
      }
   }

   private CounterRef(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
   {
      counterName = info.GetString("CounterName");
      instance = (Counter)(typeof(Counter).GetProperty(counterName,
         System.Reflection.BindingFlags.Public |
         System.Reflection.BindingFlags.GetProperty |
         System.Reflection.BindingFlags.Static).GetValue(null, null));
      instance.CurrentValue = info.GetInt32("CounterValue");
   }

   public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
   {
      info.AddValue("CounterName", counterName);
      info.AddValue("CounterValue", instance.CurrentValue);
   }
}

/// &lt;summary&gt;
/// Refers to the position of a predefined point relative to a rectangle
/// &lt;/summary&gt;
/// &lt;remarks&gt;Many operations involving the position of one object relative to another
/// object rely on RelativePosition to determine how the two objects' rectangles are
/// aligned. The positions defined in this enumeration generally refer to
/// a point inside the rectangle at the specified position. For example, RightMiddle
/// would refer to the point immediately within the middle of the right side of the
/// rectangle. In the case of aligning two rectangles, this means that the right
/// sides will match up exactly and the vertical center of one rectangle would be
/// aligned with the vertical center of the other.&lt;/remarks&gt;
public enum RelativePosition
{
   TopLeft,
   TopCenter,
   TopRight,
   LeftMiddle,
   CenterMiddle,
   RightMiddle,
   BottomLeft,
   BottomCenter,
   BottomRight
}</Text>
  </SourceCode>
  <SourceCode Name="SpriteBase.cs" IsCustomObject="false">
    <Text>/*
 * Created using Scrolling Game Development Kit 2.0
 * See Project.cs for copyright/licensing details
 */
using System;
using System.ComponentModel;
using System.Diagnostics;

/// &lt;summary&gt;
/// Base class for all sprite definitions.
/// &lt;/summary&gt;
[Serializable()]
public abstract partial class SpriteBase : GeneralRules
{
   /// &lt;summary&gt;
   /// Horizontal coordinate of the sprite within its layer.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Because a sprite can move at non-integer rates, the position is tracked
   /// as a floating point number. &lt;seealso cref="PixelX"/&gt;&lt;/remarks&gt;
   public double x;
   /// &lt;summary&gt;
   /// Vertical coordinage of the sprite within its layer.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Because a sprite can move at non-integer rates, the position is tracked
   /// as a floating point number. &lt;seealso cref="PixelY"/&gt;&lt;/remarks&gt;
   public double y;
   /// &lt;summary&gt;
   /// Horizontal velocity of the sprite in pixels per frame
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Negative numbers represent leftward movement while positive numbers
   /// represent rightward movement. This value only represents the final velocity
   /// of the sprite relative to the layer. If the sprite is riding a platform,
   /// see &lt;see cref="LocalDX"/&gt;.&lt;seealso cref="dy"/&gt;&lt;/remarks&gt;
   public double dx;
   /// &lt;summary&gt;
   /// Vertical velocity of the sprite in pixels per frame
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Negative numbers represent upward movement while positive numbers
   /// represent downward movement. This value only represents the final velocity
   /// of the sprite relative to the layer. If the sprite is riding a platform,
   /// see &lt;see cref="LocalDY"/&gt;.&lt;seealso cref="dx"/&gt;&lt;/remarks&gt;
   public double dy;
   /// &lt;summary&gt;
   /// The value of this sprite's &lt;see cref="x"/&gt; coordinate on the previous frame.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This value is set during &lt;see cref="MoveByVelocity"/&gt;.
   /// &lt;seealso cref="OldPixelX"/&gt;&lt;seealso cref="oldY"/&gt;&lt;/remarks&gt;
   public double oldX;
   /// &lt;summary&gt;
   /// The value of this sprite's &lt;see cref="y"/&gt; coordinate on the previous frame.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This value is set during &lt;see cref="MoveByVelocity"/&gt;.
   /// &lt;seealso cref="OldPixelY"/&gt;&lt;seealso cref="oldX"/&gt;&lt;/remarks&gt;
   public double oldY;
   /// &lt;summary&gt;
   /// Numeric value corresponding to the sprite's current state.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;A value of 0 represents the first state listed in this sprite's
   /// list of states. Each subsequent state is the value of the previous plus 1.
   /// You can refer to the sprites State enumeration to refer to states by name, but
   /// the result must be explicitly converted to an integer.
   /// &lt;seealso cref="SwitchToState"/&gt;
   /// &lt;/remarks&gt;
   /// &lt;example&gt;&lt;c&gt;state = (int)State.Left&lt;/c&gt;&lt;/example&gt;
   public int state;
   /// &lt;summary&gt;
   /// Numeric value corresponding to the sprite's current frame.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The number of valid frames depend on the current state. Each state
   /// has its own sequence of frames. The frame that is displayed depends both on
   /// the number of frames and the repeat count of each frame. &lt;seealso cref="Animate"/&gt;&lt;/remarks&gt;
   public int frame;
   /// &lt;summary&gt;
   /// Stores the inputs that are currently being "pressed" on this sprite.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Normally the inputs of a sprite are set by a player, but could
   /// also by explicitly set by rules and other input sources such as saved
   /// input (replaying a previous input sequence). You can cause the sprite
   /// to accelerate in the directions dictated by the input bits with
   /// &lt;see cref="AccelerateByInputs"/&gt;.&lt;seealso cref="AccelerateByInputs"/&gt;
   /// &lt;seealso cref="IsInputPressed"/&gt;&lt;seealso cref="SetInputState"/&gt;
   /// &lt;seealso cref="ClearInputs"/&gt;&lt;seealso cref="MapKeyToInput"/&gt;
   /// &lt;seealso cref="MapPlayerToInputs"/&gt;&lt;seealso cref="oldinputs"/&gt;&lt;/remarks&gt;
   public InputBits inputs;
   /// &lt;summary&gt;
   /// Remembers the inputs that were active on this sprite in the previous frame
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This value is used to determine when a player (or other input source)
   /// has just started pressing an input versus continued pressing an input that was
   /// already pressed. It is copied from &lt;see cref="inputs"/&gt; when
   /// &lt;see cref="MapPlayerToInputs"/&gt; is called.&lt;seealso cref="inputs"/&gt;
   /// &lt;seealso cref="MapPlayerToInputs"/&gt;&lt;seealso cref="IsInputPressed"/&gt;&lt;/remarks&gt;
   public InputBits oldinputs;
   /// &lt;summary&gt;
   /// Determines if this sprite is currently active.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Only active sprites will be drawn and process rules. Attempting to
   /// refer to an inactive sprite from an active rule (on an active sprite or plan)
   /// will result in an error message in debug mode. &lt;seealso cref="Deactivate"/&gt;
   /// &lt;seealso cref="TileActivateSprite"/&gt;&lt;/remarks&gt;
   public bool isActive;
   protected LayerBase layer;
   protected Solidity m_solidity;
   /// &lt;summary&gt;
   /// A combination of &lt;see cref="ModulateRed"/&gt;, &lt;see cref="ModulateGreen"/&gt;,
   /// &lt;see cref="ModulateBlue"/&gt; and &lt;see cref="ModulateAlpha"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;&lt;para&gt;This member stores the actual data for all 4 of the Modulate properties
   /// that affect the sprite's color. Using the Modulate properties is easier to
   /// read and understand, but setting this property directly is simple and faster
   /// in terms of the amount of code.&lt;/para&gt;
   /// &lt;para&gt;This number consists of 4 bytes, which are, in order from least significant
   /// to most significant: Blue, Greed, Red, Alpha.  To to retrieve the alpha component of
   /// this value, you would divide it by 16777216 or shift the bits rightward 24 places.
   /// &lt;/para&gt;&lt;/remarks&gt;
   public int color;

   /// &lt;summary&gt;
   /// Horizontal velocity relative to the sprite's environment (like a platform)
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;If the sprite is riding a platform, changes to the sprite's velocity
   /// should affect this instead of &lt;see cref="dx"/&gt;. When the sprite is not riding
   /// a platform, this value will be set to double.NaN.&lt;/remarks&gt;
   public double LocalDX;
   /// &lt;summary&gt;
   /// Vertical velocity relative to the sprite's environment
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;If the sprite is riding an object within which it can move vertically
   /// (platforms only allow the sprite to move within the platform horizontally), changes
   /// to the sprite's velocity should affect this instead of &lt;see cref="dy"/&gt;.
   /// When the sprite is not riding such an object, this value will be set to double.NaN.&lt;/remarks&gt;
   public double LocalDY;

   /// &lt;summary&gt;
   /// Contains all the possible bits that can be set in a sprite's &lt;see cref="inputs"/&gt; and
   /// &lt;see cref="oldinputs"/&gt; properties.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Multiple bits may be set at once if multiple inputs are being pressed on this
   /// sprite at the same time.&lt;/remarks&gt;
   [FlagsAttribute()]
   public enum InputBits
   {
      /// &lt;summary&gt;
      /// Refers to an input that causes the sprite to move up or accelerate
      /// &lt;/summary&gt;
      Up = 1,
      /// &lt;summary&gt;
      /// Refers to an input that causes the sprite to move or turn right
      /// &lt;/summary&gt;
      Right = 2,
      /// &lt;summary&gt;
      /// Refers to an input that causes the sprite to move down or decelerate
      /// &lt;/summary&gt;
      Down = 4,
      /// &lt;summary&gt;
      /// Refers to an input that causes the sprite to move or turn left
      /// &lt;/summary&gt;
      Left = 8,
      /// &lt;summary&gt;
      /// Refers to 1 of 4 customizable inputs on the sprite.
      /// &lt;/summary&gt;
      Button1 = 16,
      /// &lt;summary&gt;
      /// Refers to 1 of 4 customizable inputs on the sprite.
      /// &lt;/summary&gt;
      Button2 = 32,
      /// &lt;summary&gt;
      /// Refers to 1 of 4 customizable inputs on the sprite.
      /// &lt;/summary&gt;
      Button3 = 64,
      /// &lt;summary&gt;
      /// Refers to 1 of 4 customizable inputs on the sprite.
      /// &lt;/summary&gt;
      Button4 = 128
   }

   /// &lt;summary&gt;
   /// Used to refer to 4 primary directions.
   /// &lt;/summary&gt;
   public enum Direction
   {
      Up,
      Right,
      Down,
      Left
   }

   /// &lt;summary&gt;
   /// Defines the basis for a sprite's animation
   /// &lt;/summary&gt;
   public enum SpriteAnimationType
   {
      /// &lt;summary&gt;
      /// Each frame that passes in the game will cause the sprite to advance its animation by one frame.
      /// &lt;/summary&gt;
      ByFrame,
      /// &lt;summary&gt;
      /// The sprite's animation will advance according to how many pixels it will move horizontally each frame.
      /// &lt;/summary&gt;
      ByHorizontalVelocity,
      /// &lt;summary&gt;
      /// The sprite's animation will advance according to how many pixels it will move vertically each frame.
      /// &lt;/summary&gt;
      ByVerticalVelocity,
      /// &lt;summary&gt;
      /// The sprite's animation will advance according to how many pixels it moves each frame in any direction (using the distance formula).
      /// &lt;/summary&gt;
      ByVectorVelocity
   }

   /// &lt;summary&gt;
   /// Constructs a new sprite instance given all its base properties.
   /// &lt;/summary&gt;
   /// &lt;param name="layer"&gt;Layer that contains the sprite.&lt;/param&gt;
   /// &lt;param name="x"&gt;Initial horizontal coordinate within the layer&lt;/param&gt;
   /// &lt;param name="y"&gt;Initial vertical coordinate within the layer&lt;/param&gt;
   /// &lt;param name="dx"&gt;Initial horizontal velocity&lt;/param&gt;
   /// &lt;param name="dy"&gt;Initial vertical velocity&lt;/param&gt;
   /// &lt;param name="state"&gt;Initial state&lt;/param&gt;
   /// &lt;param name="frame"&gt;Initial frame within the initial state&lt;/param&gt;
   /// &lt;param name="active"&gt;Determines if the sprite is initially active&lt;/param&gt;
   /// &lt;param name="solidity"&gt;Which solidity definition does the sprite initially react to&lt;/param&gt;
   /// &lt;param name="color"&gt;Initial color modulation settings&lt;/param&gt;
   /// &lt;remarks&gt;&lt;para&gt;This cannot be called directly because SpriteBase is an abstract class,
   /// but it is called by the derived constructors on each individual sprite definition.&lt;/para&gt;
   /// &lt;para&gt;The sprite assumes that this is the layer to which it is added and will use it when
   /// looking for other objects or properties in the layer.&lt;/para&gt;&lt;/remarks&gt;
   public SpriteBase(LayerBase layer, double x, double y, double dx, double dy, int state, int frame, bool active, Solidity solidity, int color)
   {
      this.layer = layer;
      this.x = this.oldX = x;
      this.y = this.oldY = y;
      this.dx = dx;
      this.dy = dy;
      this.state = state;
      this.frame = frame;
      this.isActive = active;
      this.m_solidity = solidity;
      this.color = color;
      this.LocalDX = double.NaN;
      this.LocalDY = double.NaN;
   }

   #region Properties
   /// &lt;summary&gt;
   /// Horizontal position of the sprite within the layer rounded toward zero to yield an integer.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This can only be changed by changing the sprite's &lt;see cref="dx"/&gt; property.&lt;/remarks&gt;
   public int PixelX
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access PixelX on an inactive sprite");
         // If you don't have the left edge of your map protected by a solid boundary,
         // and the different behavior of the left edge is bugging you, you can use this
         // return statement to work around the rounding difference of negative numbers,
         // but it involves just a bit of unnecessary overhead, and looks rather clumsy:
         // return (int)(x+16)-16;
         return (int)x;
      }
   }

   /// &lt;summary&gt;
   /// Vertical position of the sprite within the layer rounded toward zero to yield an integer.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This can only be changed by changing the sprite's &lt;see cref="dy"/&gt; property.&lt;/remarks&gt;
   public int PixelY
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access PixelY on an inactive sprite");
         return (int)y;
      }
   }

   /// &lt;summary&gt;
   /// The horizontal coordinate that the sprite is expected to be at on the next frame based on its
   /// current position and velocity, rounded toward zero to yield an integer pixel coordinate.
   /// &lt;seealso cref="x"/&gt;&lt;seealso cref="dx"/&gt;
   /// &lt;/summary&gt;
   public int ProposedPixelX
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access ProposedPixelX on an inactive sprite");
         // If you don't have the left edge of your map protected by a solid boundary,
         // and the different behavior of the left edge is bugging you, you can use this
         // return statement to work around the rounding difference of negative numbers,
         // but it involves just a bit of unnecessary overhead, and looks rather clumsy:
         // return (int)(x+dx+16)-16
         return (int)(x + dx);
      }
   }

   /// &lt;summary&gt;
   /// The vertical coordinate that the sprite is expected to be at on the next frame based on its
   /// current position and velocity, rounded toward zero to yield an integer pixel coordinate.
   /// &lt;seealso cref="y"/&gt;&lt;seealso cref="dy"/&gt;
   /// &lt;/summary&gt;
   public int ProposedPixelY
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access ProposedPixelY on an inactive sprite");
         return (int)(y + dy);
      }
   }

   /// &lt;summary&gt;
   /// The horizontal pixel coordinate that the sprite was at on the previous frame
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;A pixel coordinate is the actual coordinate (&lt;see cref="oldX"/&gt; in this case)
   /// rounded toward zero to yield an integer.&lt;/remarks&gt;
   public int OldPixelX
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access OldPixelX on an inactive sprite");
         return (int)oldX;
      }
   }

   /// &lt;summary&gt;
   /// The vertical pixel coordinate that the sprite was at on the previous frame
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;A pixel coordinate is the actual coordinate (&lt;see cref="oldY"/&gt; in this case)
   /// rounded toward zero to yield an integer.&lt;/remarks&gt;
   public int OldPixelY
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access OldPixelY on an inactive sprite");
         return (int)oldY;
      }
   }

   /// &lt;summary&gt;
   /// Retrieves information about the state that the sprite is currently in.
   /// &lt;/summary&gt;
   public SpriteState CurrentState
   {
      get
      {
         Debug.Assert(this.isActive, "Attempted to access CurrentState on an inactive sprite");
         return this[state];
      }
   }

   /// &lt;summary&gt;
   /// Retrieves information about the layer in which the sprite resides.
   /// &lt;/summary&gt;
   public override LayerBase ParentLayer
   {
      get
      {
         return layer;
      }
   }
   #endregion

   #region Abstract members
   /// &lt;summary&gt;
   /// How many pixels wide is the solid area of this sprite.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The solid area of the sprite is the area that avoids overlapping
   /// solid areas of the map. The width is measured from the origin and
   /// extends rightward. &lt;seealso cref="SolidHeight"/&gt;&lt;/remarks&gt;
   public abstract int SolidWidth
   {
      [Description("Returns the width of the sprite's solid area")]
      get;
   }

   /// &lt;summary&gt;
   /// How many pixels high is the solid area of this sprite. 
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The solid area of the sprite is the area that avoids overlapping
   /// solid areas of the map. The height is measured from the origin and
   /// extends downward. &lt;seealso cref="SolidWidth"/&gt;&lt;/remarks&gt;
   public abstract int SolidHeight
   {
      [Description("Returns the height of the sprite's solid area")]
      get;
   }

   /// &lt;summary&gt;
   /// Returns information about a specified state of this sprite
   /// &lt;/summary&gt;
   /// &lt;example&gt;The following code shows how you might retrieve the height
   /// of a sprite's crouching state assuming it has one:
   /// &lt;code&gt;crouchHeight = this[State.Crouch].LocalBounds.Height;&lt;/code&gt;&lt;/example&gt;
   public abstract SpriteState this[int state]
   {
      get;
   }

   /// &lt;summary&gt;
   /// Executes all the rules associated with this sprite.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;&lt;see cref="ProcessRules"/&gt; is the recommended alternative to execute the sprite's
   /// rules only once per frame by only calling ExecuteRules when the sprites rules haven't
   /// already been executed this frame. &lt;seealso cref="Processed"/&gt;&lt;/remarks&gt;
   protected abstract void ExecuteRules();

   /// &lt;summary&gt;
   /// Resets all parameter values defined on the specific sprite definition to 0.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This is helpful in resetting a sprite's state without knowing specifically
   /// what its parameters are.  Then the sprite can internally re-initialize itself when
   /// it sees that it's parameters have been reset to 0.&lt;/remarks&gt;
   public abstract void ClearParameters();

   /// &lt;summary&gt;
   /// Remove the sprite from its designated categories.
   /// USE ONLY on dynamically added sprites.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This is used by functions involved with the creation and deactivation of
   /// dynamically created sprites to ensure that a deactivated sprite no longer exists
   /// in any categories/collections. It's called by &lt;see cref="SpriteCollection.Clean"/&gt;,
   /// which is called by &lt;see cref="LayerBase.ProcessSprites"/&gt;.&lt;/remarks&gt;
   public abstract void RemoveFromCategories();

   #endregion

   #region Public Methods
   /// &lt;summary&gt;
   /// Returns information about the visual boundaries of the sprite's currently displayed frame(s).
   /// &lt;/summary&gt;
   /// &lt;returns&gt;Rectangle object containing layer-relative coordinates that encompass the
   /// sprite's current image.&lt;/returns&gt;
   public virtual System.Drawing.Rectangle GetBounds()
   {
      Debug.Assert(this.isActive, "Attempted to execute GetBounds on an inactive sprite");
      System.Drawing.Rectangle result = CurrentState.LocalBounds;
      result.Offset(PixelX, PixelY);
      return result;
   }

   /// &lt;summary&gt;
   /// Get a list of frameset frames that the sprite is currently displaying
   /// &lt;/summary&gt;
   /// &lt;returns&gt;
   /// Array of Frame objects representing the currently displayed frames.
   /// &lt;/returns&gt;
   /// &lt;remarks&gt;The array will only have more than one element if the sprite
   /// is currently displaying a composite frame.  The frames are ordered from
   /// background to foreground.&lt;/remarks&gt;
   public virtual Frame[] GetCurrentFramesetFrames()
   {
      Debug.Assert(this.isActive, "Attempted to execute GetCurrentFramesetFrames on an inactive sprite");
      SpriteState curstate = CurrentState;
      Frameset stateframes = curstate.Frameset;
      int[] subframes = curstate.GetFrame(frame);
      Frame[] result = new Frame[subframes.Length];
      for (int idx = 0; idx &lt; result.Length; idx++)
         result[idx] = stateframes[subframes[idx]];
      return result;
   }

   /// &lt;summary&gt;
   /// Execute the rules for this sprite if they have not already been executed this frame
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This checks &lt;see cref="Processed"/&gt; and calls &lt;see cref="ExecuteRules"/&gt;
   /// if it's not set, setting &lt;see cref="Processed"/&gt; to true first.  This function
   /// can be overridden in a partial class of the derived sprite to call ExecuteRules
   /// based on other conditions.&lt;/remarks&gt;
   public virtual void ProcessRules()
   {
      if ((!Processed) &amp;&amp; (this.isActive))
      {
         // Help prevent infinite recursion
         Processed = true;
         ExecuteRules();
      }
   }

   #endregion

   #region Sprite Interaction
   #region Rider Feature
   /// &lt;summary&gt;
   /// Stores the platform sprite (the sprite that this sprite rides on).
   /// If not set, then the sprite is not riding anything.
   /// &lt;/summary&gt;
   public SpriteBase RidingOn;
   /// &lt;summary&gt;
   /// Determines if this sprite's definition's rules have been processed yet this frame
   /// &lt;/summary&gt;
   [NonSerialized()]
   public bool Processed;

   /// &lt;summary&gt;
   /// Adjust this sprite's velocity according to the motion of the platform it is riding
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Apply this rule before &lt;see cref="ReactToSolid"/&gt; in order to prevent
   /// the platform from allowing the sprite to move through solids.&lt;/remarks&gt;
   [Description("Moves this sprite according to the motion of the platform it is riding.")]
   public virtual void ReactToPlatform()
   {
      Debug.Assert(this.isActive, "Attempted to execute ReactToPlatform on an inactive sprite");
      if (RidingOn == null)
         return;

      // Don't try to process the platform's rules if it's already moved.
      // Even though this is already being checked in ProcessRules, circular
      // references (which shouldn't exist) would lead to deadlock.
      if (!RidingOn.Processed)
         // Ensure that the sprite that this sprite is riding moves first
         RidingOn.ProcessRules();

      if ((RidingOn.isActive == false) || (x + SolidWidth &lt; RidingOn.oldX) || (x &gt; RidingOn.oldX + RidingOn.SolidWidth) ||
         (y + SolidHeight &lt; RidingOn.oldY - 1) || (y + SolidHeight &gt;= RidingOn.oldY + RidingOn.SolidHeight))
      {
         StopRiding();
         return;
      }

      if (double.IsNaN(LocalDX))
         Debug.Fail("LocalDX is not a number");
      else
         dx = LocalDX + RidingOn.dx;
      dy = RidingOn.y - SolidHeight - y;
   }

   /// &lt;summary&gt;
   /// Determine if the sprite is riding another sprite
   /// &lt;/summary&gt;
   /// &lt;returns&gt;True if this sprite is currently riding on another sprite&lt;/returns&gt;
   [Description("Determine if the sprite is riding another sprite")]
   public bool IsRidingPlatform()
   {
      Debug.Assert(this.isActive, "Attempted to execute IsRidingPlatform on an inactive sprite");
      return RidingOn != null;
   }

   /// &lt;summary&gt;
   /// Stop riding the sprite that this sprite is currently riding, if any.
   /// &lt;/summary&gt;
   [Description("Stop riding the sprite that this sprite is currently riding, if any.")]
   public virtual void StopRiding()
   {
      Debug.Assert(this.isActive, "Attempted to execute StopRiding on an inactive sprite");
      LocalDX = double.NaN;
      RidingOn = null;
   }

   /// &lt;summary&gt;
   /// Tests to see if this sprite is landing on a platform (from above), and if so,
   /// make the sprite ride the platform.
   /// &lt;/summary&gt;
   /// &lt;param name="PlatformList"&gt;List of platform sprites to check&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite landed on a platform, False if it is already riding a platform or doesn't need to&lt;/returns&gt;
   /// &lt;remarks&gt;
   /// This should be called after sprites are moved, but before
   /// they are drawn.&lt;/remarks&gt;
   [Description("Tests to see if this sprite is landing on a platform (from above). If it is, the sprite will begin riding the platform.")]
   public virtual bool LandDownOnPlatform(SpriteCollection PlatformList)
   {
      Debug.Assert(this.isActive, "Attempted to execute LandDownOnPlatform on an inactive sprite");
      if (RidingOn != null)
         return false;
      foreach (SpriteBase spr in PlatformList)
      {
         if (!spr.isActive)
            continue;
         if ((oldY + SolidHeight &lt;= spr.oldY) &amp;&amp;
            (y + SolidHeight &gt; spr.y) &amp;&amp;
            (x + SolidWidth &gt; spr.x) &amp;&amp;
            (x &lt; spr.x + spr.SolidWidth))
         {
            RidingOn = spr;
            spr.ProcessRules();
            LocalDX = dx - spr.dx;
            dy = spr.y - SolidHeight - y;
            return true;
         }
      }
      return false;
   }
   #endregion

   /// &lt;summary&gt;
   /// Determine whether the solidity rectangle of the sprite overlaps that of any sprite in the specified category.
   /// &lt;/summary&gt;
   /// &lt;param name="Targets"&gt;A sprite category containing sprites that will be checked for collision
   /// with this sprite.&lt;/param&gt;
   /// &lt;returns&gt;The index of the sprite within the category if a collision is occurring, otherwise -1.&lt;/returns&gt;
   /// &lt;remarks&gt;This can be used to force a simple rectangular collision test even if one or both
   /// sprites involved have a Mask Alpha level greater than 0.  This method is recommended
   /// for improved performance when pixel-perfect collision detection is not required.
   /// &lt;seealso cref="TestCollisionMask"/&gt;&lt;/remarks&gt;
   [Description("Determine whether the solidity rectangle of the sprite overlaps that of any sprite in the specified category. Return the index of the sprite within the category if a collision is occurring, otherwise return -1.")]
   public virtual int TestCollisionRect(SpriteCollection Targets)
   {
      if (!isActive)
         return -1;
      for (int idx = 0; idx &lt; Targets.Count; idx++)
      {
         SpriteBase TargetSprite = Targets[idx];
         if ((TargetSprite == this) || (!TargetSprite.isActive))
            continue;
         int x1 = PixelX;
         int w1 = SolidWidth;
         int x2 = TargetSprite.PixelX;
         int w2 = TargetSprite.SolidWidth;
         int y1 = PixelY;
         int h1 = SolidHeight;
         int y2 = TargetSprite.PixelY;
         int h2 = TargetSprite.SolidHeight;

         if ((x1 + w1 &gt; x2) &amp;&amp; (x2 + w2 &gt; x1) &amp;&amp; (y1 + h1 &gt; y2) &amp;&amp; (y2 + h2 &gt; y1))
            return idx;
      }
      return -1;
   }
   #endregion

   #region Movement
   /// &lt;summary&gt;
   /// Increment or decrement horizontal velocity 
   /// &lt;/summary&gt;
   /// &lt;param name="delta"&gt;Amount by which to change velocity in pixels per frame per frame&lt;/param&gt;
   [Description("Increment or decrement horizontal velocity")]
   public virtual void AlterXVelocity(double delta)
   {
      Debug.Assert(this.isActive, "Attempted to execute AlterXVelocity on an inactive sprite");
      dx += delta;
   }

   /// &lt;summary&gt;
   /// Increment or decrement vertical velocity 
   /// &lt;/summary&gt;
   /// &lt;param name="delta"&gt;Amount by which to change velocity in pixels per frame per frame&lt;/param&gt;
   [Description("Increment or decrement vertical velocity")]
   public virtual void AlterYVelocity(double delta)
   {
      Debug.Assert(this.isActive, "Attempted to execute AlterYVelocity on an inactive sprite");
      dy += delta;
   }

   /// &lt;summary&gt;
   /// Move this sprite according to its current velocity
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The &lt;see cref="oldX"/&gt; and &lt;see cref="oldY"/&gt; properties are
   /// set from the current position and a new position is calculated into
   /// &lt;see cref="x"/&gt; and &lt;see cref="y"/&gt; by adding &lt;see cref="dx"/&gt; and
   /// &lt;see cref="dy"/&gt; to them respectively.&lt;/remarks&gt;
   [Description("Move this sprite according to its current velocity")]
   public virtual void MoveByVelocity()
   {
      Debug.Assert(this.isActive, "Attempted to execute MoveByVelocity on an inactive sprite");
      oldX = x;
      oldY = y;
      x += dx;
      y += dy;
   }

   /// &lt;summary&gt;
   /// If the velocity of the sprite is more than the specified maximum, normalize it so that
   /// it's going the same direction, but at no more that the specified maximum speed.
   /// &lt;/summary&gt;
   /// &lt;param name="Maximum"&gt;Specifies the maximum speed in pixels per frame&lt;/param&gt;
   /// &lt;remarks&gt;&lt;para&gt;The speed of the sprite is calculated with the distance formula, so a sprite
   /// moving 3 pixels horizontally and 4 pixels vertically, for example, is considered to be
   /// moving 5 pixels.&lt;/para&gt;
   /// &lt;para&gt;If the sprite is riding a platform, the maximum velocity is applied relative to
   /// the platform. For example, if the platform is moving rightward at 3 pixels per frame,
   /// and the sprite is moving rightward at 5 pixels per frame relative to the platform (8
   /// pixels per frame in absolute terms), and the maximum is set to 4 pixels per frame,
   /// the sprite's &lt;see cref="LocalDX"/&gt; will be reduced to 4 rather than to 1&lt;/para&gt;.&lt;/remarks&gt;
   [Description("Limit the velocity of the sprite to the specified maximum pixels per frame (affects only local velocity when applicable)")]
   public virtual void LimitVelocity(int Maximum)
   {
      Debug.Assert(this.isActive, "Attempted to execute LimitVelocity on an inactive sprite");
      double useDX, useDY;
      if (double.IsNaN(LocalDX))
         useDX = dx;
      else
         useDX = LocalDX;
      if (double.IsNaN(LocalDY))
         useDY = dy;
      else
         useDY = LocalDY;
      double dist = useDX * useDX + useDY * useDY;
      if (dist &gt; Maximum * Maximum)
      {
         dist = Math.Sqrt(dist);
         useDX = useDX * Maximum / dist;
         useDY = useDY * Maximum / dist;
         if (double.IsNaN(LocalDX))
            dx = useDX;
         else
            LocalDX = useDX;
         if (double.IsNaN(LocalDY))
            dy = useDY;
         else
            LocalDY = useDY;
      }
   }

   /// &lt;summary&gt;
   /// Reduces the sprite's velocity to simulate friction.
   /// &lt;/summary&gt;
   /// &lt;param name="RetainPercentVertical"&gt;What percent (0 to 100) of the sprite's horizontal velocity
   /// (&lt;see cref="dx"/&gt;) is retained.&lt;/param&gt;
   /// &lt;param name="RetainPercentHorizontal"&gt;What percent (0 to 100) of the sprite's vertical
   /// velocity (&lt;see cref="dy"/&gt;) is retained.&lt;/param&gt;
   /// &lt;remarks&gt;Note that inertia may have unexpected side-effects on gravity.  For example,
   /// if RetainPercentVertical is set to zero, this will cause the sprite to start from a
   /// vertical velocity of 0 on every frame, which will result in gravity being unable to
   /// accumulate any effect.  It's best to set RetainPercentVertical to a high number or 100
   /// when gravity is in effect. A gravity effect is simply an automatic adjustment to the
   /// Y velocity with &lt;see cref="AlterYVelocity"/&gt;.&lt;/remarks&gt;
   [Description("Reduces the sprite's velocity to simulate friction.  RetainPercent is a number 0 to 100 indicating how much inertia is retained.")]
   public virtual void ReactToInertia(int RetainPercentVertical, int RetainPercentHorizontal)
   {
      Debug.Assert(this.isActive, "Attempted to execute ReactToInertia on an inactive sprite");
      if (double.IsNaN(LocalDX))
      {
         if (Math.Abs(dx) &lt; .01)
            dx = 0;
         else
            dx *= RetainPercentHorizontal / 100.0f;
      }
      else
      {
         if (Math.Abs(LocalDX) &lt; .01)
            LocalDX = 0;
         else
            LocalDX *= RetainPercentHorizontal / 100.0f;
      }
      if (double.IsNaN(LocalDY))
      {
         if (Math.Abs(dy) &lt; .01)
            dy = 0;
         else
            dy *= RetainPercentVertical / 100.0f;
      }
      else
      {
         if (Math.Abs(LocalDY) &lt; .01)
            LocalDY = 0;
         else
            LocalDY *= RetainPercentVertical / 100.0f;
      }
   }

   /// &lt;summary&gt;
   /// Determines if the sprite is moving in the specified direction at all.
   /// &lt;/summary&gt;
   /// &lt;param name="Direction"&gt;Determines which direction to check&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite has any movement in the specified direction, otherwise false.&lt;/returns&gt;
   [Description("Returns true if the sprite is moving in the specified direction")]
   public virtual bool IsMoving(Direction Direction)
   {
      Debug.Assert(this.isActive, "Attempted to execute IsMoving on an inactive sprite");
      double useDX, useDY;
      if (double.IsNaN(LocalDX))
         useDX = dx;
      else
         useDX = LocalDX;
      if (double.IsNaN(LocalDY))
         useDY = dy;
      else
         useDY = LocalDY;

      switch (Direction)
      {
         case Direction.Left:
            return useDX &lt; 0;
         case Direction.Right:
            return useDX &gt; 0;
         case Direction.Up:
            return useDY &lt; 0;
         case Direction.Down:
            return useDY &gt; 0;
      }
      return false;
   }

   /// &lt;summary&gt;
   /// Scroll all layers on this sprite's layer's map so that the sprite is within visible area of the map.
   /// &lt;/summary&gt;
   /// &lt;param name="UseScrollMargins"&gt;If true, scroll the sprite into the scroll margins of the map. Otherwise just scroll the layers var enough so the sprite is within the edges of the display.&lt;/param&gt;
   /// &lt;remarks&gt;For a multi-player game where both players are in the same view, you may want to
   /// set UseScrollMargins to false in order to allow the players to get closer to the edge of the
   /// display when moving apart from one another. This function will not affect layers with a scroll
   /// rate of zero. &lt;seealso cref="PushSpriteIntoView"/&gt;
   /// &lt;/remarks&gt;
   [Description("Scroll all layers on this sprite's layer's map so that the sprite is within visible area of the map.  If UseScrollMargins is true, scroll the sprite into the scroll margins of the map.")]
   public virtual void ScrollSpriteIntoView(bool UseScrollMargins)
   {
      ParentLayer.ScrollSpriteIntoView(this, UseScrollMargins);
   }

   /// &lt;summary&gt;
   /// Compute the index of the nearest active sprite from the specified category and return it.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Sprite category whose sprites will be searched for sprites near this sprite.&lt;/param&gt;
   /// &lt;returns&gt;An integer representing the 0-based index of the nearest active sprite, or -1 if
   /// there are no active sprites in the specified category.&lt;/returns&gt;
   /// &lt;remarks&gt;The output of this function would commonly be stored in a sprite parameter for
   /// passing to &lt;see cref="PushTowardCategory "/&gt;.&lt;/remarks&gt;
   [Description("Compute the index of the nearest active sprite from the specified category and return it.")]
   public virtual int GetNearestSpriteIndex(SpriteCollection Target)
   {
      int minDist = int.MaxValue;
      int result = -1;
      for (int i = 0; i &lt; Target.Count; i++)
      {
         if ((!Target[i].isActive) || (Target[i] == this))
            continue;
         int xOff = Target[i].PixelX - PixelX;
         int yOff = Target[i].PixelY - PixelY;
         int dist = xOff * xOff + yOff * yOff;
         if (dist &lt; minDist)
         {
            minDist = dist;
            result = i;
         }
      }
      return result;
   }

   /// &lt;summary&gt;
   /// Push this sprite toward a sprite in the specified category.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Specifies a category containint the target
   /// sprite toward which this sprite will be pushed.&lt;/param&gt;
   /// &lt;param name="Index"&gt;Specifies the 0-based index of a sprite in the specified category.
   /// Use &lt;see cref="GetNearestSpriteIndex"/&gt; to compute the index of the nearest sprite, which
   /// can then be passed to this parameter.  Pass -1 in this parameter to push the sprite toward
   /// the current nearest sprite rather than a pre-computed index.&lt;/param&gt;
   /// &lt;param name="Force"&gt;Force in tenths of a pixel per frame per frame that will be applied.&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite was pushed, or false if there are no active sprites in the
   /// target category or the sprite is already overlapping the target.&lt;/returns&gt;
   /// &lt;remarks&gt;If there is no active sprite in the target category, or if the sprite is overlapping
   /// the target exactly, this function will have no effect.
   /// &lt;seealso cref="SetInputsTowardCategory"/&gt;
   /// &lt;seealso cref="PushTowardSprite"/&gt;
   /// &lt;seealso cref="SetInputsTowardSprite"/&gt;&lt;/remarks&gt;
   [Description("Push this sprite toward a sprite in the specified category. Use GetNearestSpriteIndex to compute the index of the nearest sprite and pass that to Index, or pass -1 to push toward the current nearest sprite. Force is in tenths of a pixel per frame per frame.")]
   public virtual bool PushTowardCategory(SpriteCollection Target, int Index, int Force)
   {
      Debug.Assert(this.isActive, "Attepmted to execute PushTowardCategory on an inactive sprite");
      Debug.Assert(Index &lt; Target.Count, "Attempted to PushTowardCategory on an index beyond the bounds of a collection");

      if (Index &lt; 0)
         Index = GetNearestSpriteIndex(Target);
      if (Index &lt; 0)
         return false;

      return PushTowardSprite(Target[Index], Force);
   }

   /// &lt;summary&gt;
   /// Push this sprite toward a specified sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Sprite toward which this sprite is pushed.&lt;/param&gt;
   /// &lt;param name="Force"&gt;Acceleration force in tenths of a pixel per frame per frame.&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite is pushed or false if the sprite is already overlapping
   /// the target.
   /// &lt;seealso cref="PushTowardCategory"/&gt;
   /// &lt;seealso cref="SetInputsTowardSprite"/&gt;
   /// &lt;seealso cref="SetInputsTowardCategory"/&gt;&lt;/returns&gt;
   public virtual bool PushTowardSprite(SpriteBase Target, int Force)
   {
      double vx = Target.PixelX - PixelX + (Target.SolidWidth - SolidWidth) / 2;
      double vy = Target.PixelY - PixelY + (Target.SolidHeight - SolidHeight) / 2;
      double dist = Math.Sqrt(vx * vx + vy * vy);
      if (dist &gt;= 1)
      {
         dx += vx * Force / dist / 10.0;
         dy += vy * Force / dist / 10.0;
         return true;
      }
      return false;
   }
   #endregion

   #region States and animation

   /// &lt;summary&gt;
   /// Advance the animation frame of this sprite according to its velocity or a constant rate.
   /// &lt;/summary&gt;
   /// &lt;param name="Correlation"&gt;Determines how and if the sprite's animation speed should be
   /// based on its movement.&lt;/param&gt;
   [Description("Advance the animation frame of this sprite according to its velocity or a constant rate")]
   public virtual void Animate(SpriteAnimationType Correlation)
   {
      Debug.Assert(this.isActive, "Attempted to execute Animate on an inactive sprite");
      switch (Correlation)
      {
         case SpriteAnimationType.ByFrame:
            frame++;
            break;
         case SpriteAnimationType.ByHorizontalVelocity:
            if (double.IsNaN(LocalDX))
               frame += System.Math.Abs(ProposedPixelX - PixelX);
            else
               frame += System.Math.Abs((int)LocalDX);
            break;
         case SpriteAnimationType.ByVerticalVelocity:
            if (double.IsNaN(LocalDY))
               frame += System.Math.Abs(ProposedPixelY - PixelY);
            else
               frame += System.Math.Abs((int)LocalDY);
            break;
         case SpriteAnimationType.ByVectorVelocity:
            {
               int tmpDx = ProposedPixelX - PixelX;
               int tmpDy = ProposedPixelY - PixelY;
               frame += (int)(System.Math.Sqrt(tmpDx * tmpDx + tmpDy * tmpDy));
            }
            break;
      }
   }

   /// &lt;summary&gt;
   /// Switch the sprite to the the specified state, ensuring that the sprite doesn't hit a solid.
   /// &lt;/summary&gt;
   /// &lt;param name="State"&gt;State to which the sprite will be switched&lt;/param&gt;
   /// &lt;param name="Alignment"&gt;Specifies a point within the sprite which will remain constant.  For example, RelativePosition.BottomCenter will ensure that the bottom center point of the new state aligns with the bottom center point of this state.&lt;/param&gt;
   /// &lt;returns&gt;True if the state could be switched, false if the new state's differing size would
   /// have caused the sprite the sprite to pass through a solid tile.&lt;/returns&gt;
   /// &lt;remarks&gt;This function is handy for performing action like switching from a crouching
   /// state to a standing state because it will prevent you from standing up if there is a low
   /// ceiling in the way. It also helps you align the two states properly. For example, if you
   /// switched from the crouching state to the standing state without moving the sprite at
   /// all, the origin (usually the top left corner of the sprite) would remain in the same place,
   /// which would cause the head to remain in the same place and the feet to stick through the
   /// floor. But by using the Alignment paremeter, you can make sure that the botton of the
   /// new state aligns with the bottom of the current state.&lt;/remarks&gt;
   [Description("Switch the sprite to the the specified state, ensuring that the specified alignment point in the new state lines up with the same point in the current state.  Returns false if the state could not switch due to solidity.")]
   public virtual bool SwitchToState([Editor("SpriteState", "UITypeEditor")] int State, RelativePosition Alignment)
   {
      Debug.Assert(this.isActive, "Attempted to execute SwitchToState on an inactive sprite");
      System.Drawing.Rectangle oldRect = new System.Drawing.Rectangle(PixelX, PixelY, SolidWidth, SolidHeight);
      int newWidth = this[State].SolidWidth;
      int newHeight = this[State].SolidHeight;
      double newX, newY;
      switch (Alignment)
      {
         case RelativePosition.TopCenter:
         case RelativePosition.CenterMiddle:
         case RelativePosition.BottomCenter:
            newX = x + (oldRect.Width - newWidth) / 2f;
            break;
         case RelativePosition.TopRight:
         case RelativePosition.RightMiddle:
         case RelativePosition.BottomRight:
            newX = x + oldRect.Width - newWidth;
            break;
         default:
            newX = x;
            break;
      }
      switch (Alignment)
      {
         case RelativePosition.LeftMiddle:
         case RelativePosition.CenterMiddle:
         case RelativePosition.RightMiddle:
            newY = y + (oldRect.Height - newHeight) / 2f;
            break;
         case RelativePosition.BottomLeft:
         case RelativePosition.BottomCenter:
         case RelativePosition.BottomRight:
            newY = y + oldRect.Height - newHeight;
            break;
         default:
            newY = y;
            break;
      }

      if (((int)Math.Ceiling(newY + newHeight) &gt; oldRect.Bottom) &amp;&amp; (layer.GetTopSolidPixel(new System.Drawing.Rectangle(
         (int)newX, oldRect.Bottom, newWidth, (int)Math.Ceiling(newY) + newHeight - oldRect.Bottom), m_solidity) != int.MinValue))
         return false;

      if (((int)newY &lt; oldRect.Top) &amp;&amp; (layer.GetBottomSolidPixel(new System.Drawing.Rectangle(
         (int)newX, (int)newY, newWidth, oldRect.Top - (int)newY), m_solidity) != int.MinValue))
         return false;

      if (((int)newX &lt; oldRect.Left) &amp;&amp; (layer.GetRightSolidPixel(new System.Drawing.Rectangle(
         (int)newX, (int)newY, oldRect.Left - (int)newX, newHeight), m_solidity) != int.MinValue))
         return false;

      if (((int)Math.Ceiling(newX + newWidth) &gt; oldRect.Right) &amp;&amp; (layer.GetLeftSolidPixel(new System.Drawing.Rectangle(
         oldRect.Right, (int)newY, (int)Math.Ceiling(newX) + newWidth - oldRect.Right, newHeight), m_solidity) != int.MinValue))
         return false;

      x = newX;
      y = newY;
      state = State;
      return true;
   }

   /// &lt;summary&gt;
   /// Determines if the sprite is in the specified range of states.
   /// &lt;/summary&gt;
   /// &lt;param name="FirstState"&gt;Minimum state number&lt;/param&gt;
   /// &lt;param name="LastState"&gt;Maximum state number&lt;/param&gt;
   /// &lt;returns&gt;Returns true if the sprite's current state is equal to &lt;paramref name="FirstState" /&gt; or
   /// &lt;paramref name="LastState" /&gt; or any state in between. False otherwise.&lt;/returns&gt;
   [Description("Determines if the sprite is in the specified range of states")]
   public virtual bool IsInState([Editor("SpriteState", "UITypeEditor")] int FirstState, [Editor("SpriteState", "UITypeEditor")] int LastState)
   {
      Debug.Assert(this.isActive, "Attempted to execute IsInState on an inactive sprite");
      return (state &gt;= FirstState) &amp;&amp; (state &lt;= LastState);
   }

   #endregion

   #region Input Processing
   /// &lt;summary&gt;
   /// Determine if the specified input is being pressed for this sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="Input"&gt;Which of thes sprite's inputs should be checked&lt;/param&gt;
   /// &lt;param name="InitialOnly"&gt;If this is true, the result will only be true if the input has just been pressed and was not pressed before.&lt;/param&gt;
   /// &lt;returns&gt;If &lt;paramref name="InitialOnly" /&gt; is set, true only when the specified input on this
   /// sprite has just been turned on or pressed, otherwise true if the input is currently on or
   /// "pressed" regardless of the previous state of the input.&lt;/returns&gt;
   /// &lt;remarks&gt;This function uses &lt;see cref="oldinputs"/&gt; to determine whether an input
   /// was pressed before or not (when InitialOnly is true). &lt;see cref="oldinputs"/&gt;
   /// is automatically managed by the &lt;see cref="MapPlayerToInputs"/&gt; function.
   /// &lt;seealso cref="oldinputs"/&gt;&lt;/remarks&gt;
   [Description("Determine if the specified input is being pressed for this sprite.  InitialOnly causes this to return true only if the input has just been pressed and was not pressed before.")]
   public virtual bool IsInputPressed(InputBits Input, bool InitialOnly)
   {
      Debug.Assert(this.isActive, "Attempted to execute IsInputPressed on an inactive sprite");
      return (0 != (inputs &amp; Input)) &amp;&amp;
         (!InitialOnly || (0 == (oldinputs &amp; Input)));
   }

   /// &lt;summary&gt;
   /// Turns on or off the specified input on this sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="Input"&gt;Indicates a particular input to be affected.&lt;/param&gt;
   /// &lt;param name="Press"&gt;True if the input should be turned on or "pressed", False if the
   /// input should be turned off or "released".&lt;/param&gt;
   /// &lt;remarks&gt;Although this function can be used to set a sprite's inputs based on rules,
   /// &lt;see cref="MapPlayerToInputs"/&gt; is the recommended means for setting inputs on a
   /// sprite. &lt;see cref="SetInputState"/&gt; does not affect &lt;see cref="oldinputs"/&gt;, so if
   /// you want to use this function with the InitialOnly feature of
   /// &lt;see cref="IsInputPressed"/&gt;, you will have to manage &lt;see cref="oldinputs"/&gt;
   /// manually.&lt;/remarks&gt;
   [Description("Turns on or off the specified input on this sprite.")]
   public virtual void SetInputState(InputBits Input, bool Press)
   {
      Debug.Assert(this.isActive, "Attempted to execute SetInputState on an inactive sprite");
      if (Press)
         inputs |= Input;
      else
         inputs &amp;= ~Input;
   }

   /// &lt;summary&gt;
   /// Turns off all current inputs on this sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="SetOldInputs"&gt;True if you want to remember the current set of inputs
   /// as the inputs for the previous frame (&lt;see cref="oldinputs"/&gt;).
   /// False if you just want to clear the inputs.&lt;/param&gt;
   [Description("Turns off all current inputs on this sprite.")]
   public virtual void ClearInputs(bool SetOldInputs)
   {
      Debug.Assert(this.isActive, "Attempted to execute ClearInputs on an inactive sprite");
      if (SetOldInputs)
         oldinputs = inputs;
      inputs = 0;
   }

   /// &lt;summary&gt;
   /// Associate the state of the input device for the specified player with the inputs on this sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="PlayerNumber"&gt;Player number 1 through 4. The number must not exceed
   /// the maximum number of players specified in the project properties and stored in
   /// &lt;see cref="Project.MaxPlayers"/&gt;.&lt;/param&gt;
   /// &lt;remarks&gt;&lt;para&gt;Before the inputs are mapped from the player's input device to the sprite,
   /// the existing inputs are copied from &lt;see cref="inputs"/&gt; to &lt;see cref="oldinputs"/&gt;
   /// so other rules will be able to determine which inputs were pressed before.&lt;/para&gt;
   /// &lt;para&gt;The input device is defined by the player at runtime, and may come from a
   /// joystick, gamepad or keyboard.&lt;/para&gt;&lt;/remarks&gt;
   [Description("Associate the state of the input device for the specified player (1-4) with the inputs on this sprite.")]
   public virtual void MapPlayerToInputs(int PlayerNumber)
   {
      Debug.Assert(this.isActive, "Attempted to execute MapPlayerToInput on an inactive sprite");
      if (PlayerNumber &gt; Project.MaxPlayers)
      {
         Debug.Fail("Attempted to map inactive player input");
         return;
      }
      oldinputs = inputs;
      IPlayer player = Project.GameWindow.Players[PlayerNumber - 1];
      inputs = 0;
      if (PlayerPressButton(PlayerNumber, player))
      {
         if (player.Up) inputs |= InputBits.Up;
         if (player.Left) inputs |= InputBits.Left;
         if (player.Right) inputs |= InputBits.Right;
         if (player.Down) inputs |= InputBits.Down;
         if (player.Button1) inputs |= InputBits.Button1;
         if (player.Button2) inputs |= InputBits.Button2;
         if (player.Button3) inputs |= InputBits.Button3;
         if (player.Button4) inputs |= InputBits.Button4;
      }
   }

   /// &lt;summary&gt;
   /// Accelerate this sprite according to which directional inputs are on/pressed.
   /// &lt;/summary&gt;
   /// &lt;param name="Acceleration"&gt;Specifies how much effect any input can have on acceleration in tenths of a pixel per frame per frame&lt;/param&gt;
   /// &lt;param name="Max"&gt;Specifies the maximum speed to which the sprite can accelerate along any particular axis in pixels per frame&lt;/param&gt;
   /// &lt;param name="HorizontalOnly"&gt;If this is true, only horizontal acceleration will be applied. (Often times in platform games,
   /// a sprite can move horizontally, but in order to move vertically, must jump.)&lt;/param&gt;
   /// &lt;remarks&gt;If the sprite's &lt;see cref="LocalDX"/&gt; or &lt;see cref="LocalDY"/&gt; properties are
   /// set (if the sprite is riding another sprite) this will affect the local velocity and
   /// affect &lt;see cref="dx"/&gt; and/or &lt;see cref="dy"/&gt; only indirectly.&lt;/remarks&gt;
   /// &lt;example&gt;
   /// The following example would accelerate a sprite horizontally at 1 pixel per frame per frame
   /// up to a maximum of 5 pixels per frame.
   /// &lt;code&gt;AccelerateByInputs(10, 5, true)&lt;/code&gt;&lt;/example&gt;
   [Description("Accelerate this sprite according to which directional inputs are on.  Acceleration is in tenths of a pixel per frame squared.  Max is in pixels per frame.")]
   public virtual void AccelerateByInputs(int Acceleration, int Max, bool HorizontalOnly)
   {
      Debug.Assert(this.isActive, "Attempted to execute AccelerateByInputs on an inactive sprite");
      if (!HorizontalOnly)
      {
         if (double.IsNaN(LocalDY))
         {
            if (0 != (inputs &amp; InputBits.Up))
               dy -= ((double)Acceleration) / 10.0d;
            if (dy &lt; -(double)Max)
               dy = -(double)Max;
            if (0 != (inputs &amp; InputBits.Down))
               dy += ((double)Acceleration) / 10.0d;
            if (dy &gt; (double)Max)
               dy = (double)Max;
         }
         else
         {
            if (0 != (inputs &amp; InputBits.Up))
               LocalDY -= ((double)Acceleration) / 10.0d;
            if (LocalDY &lt; -(double)Max)
               LocalDY = -(double)Max;
            if (0 != (inputs &amp; InputBits.Down))
               LocalDY += ((double)Acceleration) / 10.0d;
            if (LocalDY &gt; (double)Max)
               LocalDY = (double)Max;
         }
      }
      if (double.IsNaN(LocalDX))
      {
         if (0 != (inputs &amp; InputBits.Left))
            dx -= ((double)Acceleration) / 10.0d;
         if (dx &lt; -(double)Max)
            dx = -(double)Max;
         if (0 != (inputs &amp; InputBits.Right))
            dx += ((double)Acceleration) / 10.0d;
         if (dx &gt; (double)Max)
            dx = (double)Max;
      }
      else
      {
         if (0 != (inputs &amp; InputBits.Left))
            LocalDX -= ((double)Acceleration) / 10.0d;
         if (LocalDX &lt; -(double)Max)
            LocalDX = -(double)Max;
         if (0 != (inputs &amp; InputBits.Right))
            LocalDX += ((double)Acceleration) / 10.0d;
         if (LocalDX &gt; (double)Max)
            LocalDX = (double)Max;
      }
   }

   /// &lt;summary&gt;
   /// Set the state of the directional inputs on this sprite to move toward the specified sprite in a category.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Specifies the sprite collection containing the sprite toward which this sprite will try to move.&lt;/param&gt;
   /// &lt;param name="Index"&gt;Use &lt;see cref="GetNearestSpriteIndex"/&gt; to compute this value or pass -1 to compute the current nearest sprite each time this is called.&lt;/param&gt;
   /// &lt;remarks&gt;This function assumes that the directional inputs on the sprite
   /// cause the sprite to move directly in the direction associated with the input.  It will
   /// not work if, for example, left arrow causes the sprite to turn left instead of move left.
   /// &lt;seealso cref="SetInputsTowardSprite"/&gt;
   /// &lt;seealso cref="PushTowardCategory"/&gt;
   /// &lt;seealso cref="GetNearestSpriteIndex"/&gt;&lt;/remarks&gt;
   [Description("Set the state of the directional inputs on this sprite to move toward the specified sprite in a category, assuming the input causes the sprite to move directly in its direction. Use GetNearestSpriteIndex to compute an Index or pass -1 to use the current nearest sprite.")]
   public virtual void SetInputsTowardCategory(SpriteCollection Target, int Index)
   {
      Debug.Assert(this.isActive, "Attepmted to execute SetInputsTowardCategory on an inactive sprite");
      Debug.Assert(Index &lt; Target.Count, "Attempted to SetInputsTowardCategory on an index beyond the bounds of a collection");

      if (Index &lt; 0)
         Index = GetNearestSpriteIndex(Target);
      if (Index &lt; 0)
      {
         inputs &amp;= ~(InputBits.Left | InputBits.Right | InputBits.Up | InputBits.Down);
         return;
      }

      SetInputsTowardSprite(Target[Index]);
   }

   /// &lt;summary&gt;
   /// Set the state of the directional inputs on this sprite to move toward the specified sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="Target"&gt;Specifies the sprite collection containing the sprite toward which
   /// this sprite will try to move.&lt;/param&gt;
   /// &lt;remarks&gt;This function is not exposed as a rule function because it is intended to be
   /// called by a plan or other code that can provide a target sprite based on specific
   /// context whereas a sprite definition rule function is supposed to be generic.
   /// This is called by &lt;see cref="SetInputsTowardCategory"/&gt;.&lt;/remarks&gt;
   public virtual void SetInputsTowardSprite(SpriteBase Target)
   {
      int targetCenter = Target.PixelX + Target.SolidWidth / 2;
      int myCenter = PixelX + SolidWidth / 2;

      if (targetCenter &lt; myCenter)
         inputs |= InputBits.Left;
      else if (targetCenter &gt; myCenter)
         inputs |= InputBits.Right;
      else
         inputs &amp;= ~(InputBits.Left | InputBits.Right);

      targetCenter = Target.PixelY + Target.SolidHeight / 2;
      myCenter = PixelY + SolidHeight / 2;
      if (targetCenter &lt; myCenter)
         inputs |= InputBits.Up;
      else if (targetCenter &gt; myCenter)
         inputs |= InputBits.Down;
      else
         inputs &amp;= ~(InputBits.Up | InputBits.Down);
   }

   /// &lt;summary&gt;
   /// Move the sprite to the position of the mouse cursor and set the sprite's button inputs based on mouse button states.
   /// &lt;/summary&gt;
   /// &lt;param name="InstantMove"&gt;If true, the sprite will be moved immediately without regard to
   /// the existing position or solidity or anything else.  If false, the sprite's position will
   /// not be immediately changed, but its velocity will be set so that the sprite will end up at
   /// the mouse cursor's location after &lt;see cref="MoveByVelocity"/&gt; executes. Note that moving
   /// the sprite instantly will ignore solidity and will not work well with sprites riding on
   /// this sprite, while allowing just the velocity to be set will allow this, but limit the
   /// sprite's movement based on solidity.&lt;/param&gt;
   /// &lt;param name="hotSpot"&gt;Which part of the sprite will move to the mouse point.&lt;/param&gt;
   /// &lt;remarks&gt;Before the button inputs are mapped from the mouse to the sprite,
   /// the existing inputs are copied from &lt;see cref="inputs"/&gt; to &lt;see cref="oldinputs"/&gt;
   /// so other rules will be able to determine which buttons were pressed before.
   /// &lt;/remarks&gt;
   [Description("Move the sprite to the position of the mouse cursor and set the sprite's button inputs based on mouse button states. If InstantMove is true, the sprite will be moved immediately, otherwise it the velocity will be set to move when MoveByVelocity runs.")]
   public virtual void MapMouseToSprite(bool InstantMove, RelativePosition hotSpot)
   {
      System.Drawing.Point pos = ParentLayer.GetMousePosition();
      System.Drawing.Point hotPoint = GetRelativePosition(hotSpot);
      if (InstantMove)
      {
         oldX = x;
         oldY = y;
         x = pos.X + x - hotPoint.X;
         y = pos.Y + y - hotPoint.Y;
      }
      else
      {
         dx = pos.X - hotPoint.X;
         dy = pos.Y - hotPoint.Y;
      }
      oldinputs = inputs;
      inputs = 0;
      if (0 != (System.Windows.Forms.Control.MouseButtons &amp; System.Windows.Forms.MouseButtons.Left))
         inputs |= InputBits.Button1;
      if (0 != (System.Windows.Forms.Control.MouseButtons &amp; System.Windows.Forms.MouseButtons.Right))
         inputs |= InputBits.Button2;
      if (0 != (System.Windows.Forms.Control.MouseButtons &amp; System.Windows.Forms.MouseButtons.Middle))
         inputs |= InputBits.Button3;
   }
   #endregion

   #region Solidity
   /// &lt;summary&gt;
   /// Set the solidity rules to which the sprite is currently reacting.
   /// &lt;/summary&gt;
   /// &lt;param name="Solidity"&gt;Specified which solidity rules should adopt.&lt;/param&gt;
   /// &lt;remarks&gt;Since solidity is based on tile categories which in turn can contain
   /// tiles from multiple tilesets, the same solidity definition can apply to any
   /// number of maps with different tilesets. So this doesn't need to be called
   /// just to handle tiles from a different tileset, but could be called to make
   /// the sprite act differently to all tiles (for example, to suddenly be able to
   /// traverse any water).&lt;/remarks&gt;
   [Description("Set the solidity rules to which the sprite is currently reacting.")]
   public virtual void SetSolidity(Solidity Solidity)
   {
      m_solidity = Solidity;
   }

   /// &lt;summary&gt;
   /// Alter the sprite's velocity to react to solid areas on the map.
   /// &lt;/summary&gt;
   /// &lt;returns&gt;True if the sprite's velocity was altered; in other words, if it pushed
   /// against something solid. That doesn't necessarily mean the sprite was stopped by
   /// something solid because it may just be pushed uphill.&lt;/returns&gt;
   /// &lt;remarks&gt;It is recommended that this be the last rule applied to the sprite's velocity
   /// before &lt;see cref="MoveByVelocity"/&gt; is applied. This will help ensure that the sprite
   /// never goes through solids even if scrolling and platforms try to make it.&lt;/remarks&gt;
   [Description("Alter the sprite's velocity to react to solid areas on the map.  Returns true if velocity is affected by solid.")]
   public virtual bool ReactToSolid()
   {
      Debug.Assert(this.isActive, "Attempted to execute ReactToSolid on an inactive sprite");
      if (m_solidity == null)
         throw new System.ApplicationException("Attempted to execute ReactToSolid on sprite without solidity defined");
      bool hit = false;
      double dyOrig = dy;
      double dxOrig = dx;

      int ProposedPixelY2 = (int)Math.Ceiling(y + dy);
      int SolidPixelWidth = SolidWidth + (int)Math.Ceiling(x) - PixelX;
      if (dy &gt; 0)
      {
         int ground = layer.GetTopSolidPixel(new System.Drawing.Rectangle(PixelX, PixelY + SolidHeight, SolidPixelWidth, ProposedPixelY2 - PixelY), m_solidity);
         if (ground != int.MinValue)
         {
            // Do integer arithmetic before double otherwise strange rounding seems to happen
            dy = ground - SolidHeight - y;
            hit = true;
         }
      }
      else if (dy &lt; 0)
      {
         int ceiling = layer.GetBottomSolidPixel(new System.Drawing.Rectangle(PixelX, ProposedPixelY, SolidPixelWidth, PixelY - ProposedPixelY), m_solidity);
         if (ceiling != int.MinValue)
         {
            // Do integer arithmetic before double otherwise strange rounding seems to happen
            dy = ceiling + 1 - y;
            hit = true;
         }
      }

      if (dx &gt; 0)
      {
         int ProposedPixelX2 = (int)Math.Ceiling(x + dx);
         int PixelX2 = (int)Math.Ceiling(x);
         int rightwall = layer.GetLeftSolidPixel(new System.Drawing.Rectangle(PixelX2 + SolidWidth, ProposedPixelY, ProposedPixelX2 - PixelX2, SolidHeight), m_solidity);
         bool hitWall = false;
         if (rightwall != int.MinValue)
         {
            int maxSlopeProposedY = (int)(y + dy - dx);
            int slopedFloor = layer.GetTopSolidPixel(new System.Drawing.Rectangle(PixelX2 + SolidWidth, maxSlopeProposedY + SolidHeight, ProposedPixelX2 - PixelX2, ProposedPixelY - maxSlopeProposedY), m_solidity);
            if (slopedFloor != int.MinValue)
            {
               int ceiling = layer.GetBottomSolidPixel(new System.Drawing.Rectangle(PixelX2, slopedFloor - SolidHeight, SolidWidth, ProposedPixelY + SolidHeight - slopedFloor), m_solidity);
               if ((ceiling == int.MinValue) &amp;&amp; (RidingOn == null))
               {
                  int rightwall2 = layer.GetLeftSolidPixel(new System.Drawing.Rectangle(PixelX2 + SolidWidth, slopedFloor - SolidHeight, ProposedPixelX2 - PixelX2, SolidHeight), m_solidity);
                  if (rightwall2 == int.MinValue)
                     // Do integer arithmetic before double otherwise strange rounding seems to happen
                     dy = dyOrig = slopedFloor - SolidHeight - 1 - y;
                  else
                     hitWall = true;
               }
               else
                  hitWall = true;
            }
            else
            {
               maxSlopeProposedY = (int)(y + dy + dx);
               int slopedCeiling = layer.GetBottomSolidPixel(new System.Drawing.Rectangle(PixelX2 + SolidWidth, ProposedPixelY, ProposedPixelX2 - PixelX2, maxSlopeProposedY - ProposedPixelY), m_solidity);
               if (slopedCeiling != int.MinValue)
               {
                  slopedCeiling++;
                  int floor = layer.GetTopSolidPixel(new System.Drawing.Rectangle(PixelX2, ProposedPixelY + SolidHeight, SolidWidth, slopedCeiling - ProposedPixelY), m_solidity);
                  if ((floor == int.MinValue) &amp;&amp; (RidingOn == null))
                  {
                     int rightwall2 = layer.GetLeftSolidPixel(new System.Drawing.Rectangle(PixelX2 + SolidWidth, slopedCeiling, ProposedPixelX2 - PixelX2, SolidHeight), m_solidity);
                     if (rightwall2 == int.MinValue)
                        dy = dyOrig = slopedCeiling - y;
                     else
                        hitWall = true;
                  }
                  else
                     hitWall = true;
               }
               else
                  hitWall = true;
            }
            if (hitWall)
            {
               // Do integer arithmetic before double otherwise strange rounding seems to happen
               dx = rightwall - SolidWidth - x;
            }
            hit = true;
         }
      }
      else if (dx &lt; 0)
      {
         int leftwall = layer.GetRightSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, ProposedPixelY, PixelX - ProposedPixelX, SolidHeight), m_solidity);
         bool hitWall = false;
         if (leftwall != int.MinValue)
         {
            int maxSlopeProposedY = (int)(y + dy + dx);
            int slopedFloor = layer.GetTopSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, maxSlopeProposedY + SolidHeight, PixelX - ProposedPixelX, ProposedPixelY - maxSlopeProposedY), m_solidity);
            if (slopedFloor != int.MinValue)
            {
               int ceiling = layer.GetBottomSolidPixel(new System.Drawing.Rectangle(PixelX, slopedFloor - SolidHeight, SolidWidth, ProposedPixelY + SolidHeight - slopedFloor), m_solidity);
               if ((ceiling == int.MinValue) &amp;&amp; (RidingOn == null))
               {
                  int leftwall2 = layer.GetRightSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, slopedFloor - SolidHeight, PixelX - ProposedPixelX, SolidHeight), m_solidity);
                  if (leftwall2 == int.MinValue)
                     // Do integer arithmetic before double otherwise strange rounding seems to happen
                     dy = dyOrig = slopedFloor - SolidHeight - 1 - y;
                  else
                     hitWall = true;
               }
               else
                  hitWall = true;
            }
            else
            {
               maxSlopeProposedY = (int)(y + dy - dx);
               int slopedCeiling = layer.GetBottomSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, ProposedPixelY, PixelX - ProposedPixelX, maxSlopeProposedY - ProposedPixelY), m_solidity);
               if (slopedCeiling != int.MinValue)
               {
                  slopedCeiling++;
                  int floor = layer.GetTopSolidPixel(new System.Drawing.Rectangle(PixelX, ProposedPixelY + SolidHeight, SolidWidth, slopedCeiling - ProposedPixelY), m_solidity);
                  if ((floor == int.MinValue) &amp;&amp; (RidingOn == null))
                  {
                     int leftwall2 = layer.GetRightSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, slopedCeiling, PixelX - ProposedPixelX, SolidHeight), m_solidity);
                     if (leftwall2 == int.MinValue)
                        dy = dyOrig = slopedCeiling - y;
                     else
                        hitWall = true;
                  }
                  else
                     hitWall = true;
               }
               else
                  hitWall = true;
            }
            if (hitWall)
            {
               // Do integer arithmetic before double otherwise strange rounding seems to happen
               dx = leftwall + 1 - x;
            }
            hit = true;
         }
      }

      dy = dyOrig;

      int ProposedSolidPixelWidth = SolidWidth + (int)Math.Ceiling(x + dx) - ProposedPixelX;
      if (dy &gt; 0)
      {
         ProposedPixelY2 = (int)Math.Ceiling(y + dy);
         int ground = layer.GetTopSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, PixelY + SolidHeight, ProposedSolidPixelWidth, ProposedPixelY2 - PixelY), m_solidity);
         if (ground != int.MinValue)
         {
            // Do integer arithmetic before double otherwise strange rounding seems to happen
            dy = ground - SolidHeight - y;
            hit = true;
         }
      }
      else if (dy &lt; 0)
      {
         int ceiling = layer.GetBottomSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, ProposedPixelY, ProposedSolidPixelWidth, PixelY - ProposedPixelY), m_solidity);
         if (ceiling != int.MinValue)
         {
            // Do integer arithmetic before double otherwise strange rounding seems to happen
            dy = ceiling + 1 - y;
            hit = true;
         }
      }

      if (hit &amp;&amp; !double.IsNaN(LocalDX))
         LocalDX += dx - dxOrig;

      return hit;
   }

   /// &lt;summary&gt;
   /// Ensure the sprite stays in contact with the ground by altering its velocity
   /// to snap down onto the ground when it is close to the ground.
   /// &lt;/summary&gt;
   /// &lt;param name="Threshhold"&gt;The number of pixels that mey separate the sprite from the ground.
   /// If the sprite is within this threshhold distance, it will be "snapped".&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite was snapped to the ground.&lt;/returns&gt;
   /// &lt;remarks&gt;Note that this does not actually move the sprite, but rather just alters its
   /// velocity so that when &lt;see cref="MoveByVelocity"/&gt; is applied, it will be touching the
   /// ground, if the appropriate conditions are met. The purpose of this rule is to help sprites
   /// behave as desired when going downhill in case the force of gravity isn't enough to keep
   /// them "grounded" (which it often isn't with the simple physics model used for sprites).
   /// &lt;/remarks&gt;
   [Description("If the sprite's proposed position is within &lt;Threshhold&gt; pixels of the ground, alter its velocity so it will touch the ground.  Returns true if snap occurred.")]
   public virtual bool SnapToGround(int Threshhold)
   {
      Debug.Assert(this.isActive, "Attempted to execute SnapToGround on an inactive sprite");

      int ProposedSolidPixelWidth = SolidWidth + (int)Math.Ceiling(x + dx) - ProposedPixelX;
      int ground = layer.GetTopSolidPixel(new System.Drawing.Rectangle(ProposedPixelX, ProposedPixelY + SolidHeight, ProposedSolidPixelWidth, Threshhold), m_solidity);
      if (ground != int.MinValue)
      {
         // Do integer arithmetic before double otherwise strange rounding seems to happen
         double newDy = ground - SolidHeight - y;
         if (newDy &gt; dy)
            dy = newDy;
         return true;
      }
      return false;
   }

   /// &lt;summary&gt;
   /// Determines if the sprite is blocked from moving freely in a particular direction by solidity on the layer.
   /// &lt;/summary&gt;
   /// &lt;param name="Direction"&gt;Which direction should be tested&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite's velocity will be affected or stopped when attempting
   /// to move in the specified direction.  False if the sprite can move freely in that
   /// direction.&lt;/returns&gt;
   /// &lt;remarks&gt;Note that this function only tests if there is any solidity in the specified
   /// direction, but does not indicate whether the sprite will be blocked by it or simply
   /// deflected (up or down a hill) by it.&lt;/remarks&gt;
   [Description("Determines if the sprite is blocked from moving freely in a particular direction by solidity on the layer.")]
   public virtual bool Blocked(Direction Direction)
   {
      Debug.Assert(this.isActive, "Attempted to execute Blocked on an inactive sprite");

      int SolidPixelWidth;
      int SolidPixelHeight;
      switch (Direction)
      {
         case Direction.Up:
            SolidPixelWidth = SolidWidth + (int)Math.Ceiling(x) - PixelX;
            return layer.GetBottomSolidPixel(new System.Drawing.Rectangle(PixelX, PixelY - 1, SolidPixelWidth, 1), m_solidity) != int.MinValue;
         case Direction.Right:
            SolidPixelHeight = SolidHeight + (int)Math.Ceiling(y) - PixelY;
            return layer.GetLeftSolidPixel(new System.Drawing.Rectangle(PixelX + SolidWidth, PixelY, 1, SolidPixelHeight), m_solidity) != int.MinValue;
         case Direction.Down:
            SolidPixelWidth = SolidWidth + (int)Math.Ceiling(x) - PixelX;
            return layer.GetTopSolidPixel(new System.Drawing.Rectangle(PixelX, PixelY + SolidHeight, SolidPixelWidth, 1), m_solidity) != int.MinValue;
         case Direction.Left:
            SolidPixelHeight = SolidHeight + (int)Math.Ceiling(y) - PixelY;
            return layer.GetRightSolidPixel(new System.Drawing.Rectangle(PixelX - 1, PixelY, 1, SolidPixelHeight), m_solidity) != int.MinValue;
      }
      return false;
   }

   #endregion

   #region Tile Interaction
   /// &lt;summary&gt;
   /// Tracks information about a tile for the purposes of processing interactions
   /// between a sprite and a tile that it is touching.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Instances of this class are created by &lt;see cref="TouchTiles"/&gt;.
   /// and added to &lt;see cref="TouchedTiles"/&gt;.&lt;/remarks&gt;
   public class TouchedTile
   {
      public int x;
      public int y;
      public int tileValue;
      public bool initial;
      public bool processed;

      public TouchedTile(int x, int y, int tileValue, bool initial)
      {
         this.x = x;
         this.y = y;
         this.tileValue = tileValue;
         this.initial = initial;
         processed = false;
      }
   }

   // Do not allocate appreciable memory unless this sprite
   // participates in tile interaction.
   /// &lt;summary&gt;
   /// A collection of tiles being processed by &lt;see cref="TouchTiles"/&gt; and other rules
   /// related to tile interactions.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;&lt;see cref="TouchTiles"/&gt; populates this object, and other touch-functions
   /// then process the data about tiles that the sprite is touching stored in this
   /// object. It's not usually necessary to refer to this object directly.&lt;/remarks&gt;
   [NonSerialized()]
   public System.Collections.Generic.List&lt;TouchedTile&gt; TouchedTiles = null;

   /// &lt;summary&gt;
   /// Collects information about tiles the sprite is currently touching.
   /// &lt;/summary&gt;
   /// &lt;param name="Category"&gt;This should supply a tile category that includes all tiles that the sprite interacts with.&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite is touching any tiles in the supplied category.&lt;/returns&gt;
   /// &lt;remarks&gt;This must be called before performing most forms of tile interaction.
   /// By supplying a single category containing all tiles with which the sprite may need
   /// to interact, performance is optimized so that each tile touching the sprite only
   /// needs to be inspected once to check if it's relevant.  This also helps simplify the
   /// process of processing each tile exactly once by queuing a list of tiles to be
   /// processed and tracking which of those tiles have been processed.
   /// &lt;seealso cref="TileTake"/&gt;&lt;seealso cref="TileUseUp"/&gt;&lt;seealso cref="TileTouchingIndex"/&gt;
   /// &lt;seealso cref="TileActivateSprite"/&gt;&lt;seealso cref="TileAddSprite"/&gt;
   /// &lt;seealso cref="TileChange"/&gt;&lt;seealso cref="TileChangeTouched"/&gt;&lt;/remarks&gt;
   /// &lt;example&gt;This example will check to see if the current sprite is touching
   /// any tiles in a category named "Touchable" and then (assuming tile numbers 10
   /// and 11 are members of this category) take any tiles whose number is 10 as an
   /// inventory item represented by a counter named "Coins", and take any tiles whose
   /// number is 11 as an inventory item represented by a counter named "Keys".
   /// &lt;code lang="C#"&gt;
   /// if (TouchTiles(TileCategoryName.Touchable))
   /// {
   ///    TileTake(10,Counter.Coins))
   ///    TileTake(11,Counter.Keys))
   /// }&lt;/code&gt;&lt;/example&gt;
   [Description("Collects information about tiles the sprite is currently touching.  Category should include all tiles that the sprite interacts with.  Must be called before performing any tile interaction.")]
   public virtual bool TouchTiles(TileCategoryName Category)
   {
      Debug.Assert(this.isActive, "Attempted to execute TouchTiles on an inactive sprite");

      if (TouchedTiles != null)
         TouchedTiles.Clear();

      int tw = layer.Tileset.TileWidth;
      int th = layer.Tileset.TileHeight;
      int minYEdge = (PixelY / th);
      int maxY = (PixelY + SolidHeight) / th;
      if (maxY &gt;= layer.VirtualRows)
         maxY = layer.VirtualRows - 1;
      int maxYEdge = (PixelY + SolidHeight - 1) / th;
      int minX = (PixelX - 1) / tw;
      int minXEdge = PixelX / tw;
      int maxX = (PixelX + SolidWidth) / tw;
      if (maxX &gt;= layer.VirtualColumns)
         maxX = layer.VirtualColumns - 1;
      int maxXEdge = (PixelX + SolidWidth - 1) / tw;
      for (int yidx = (PixelY - 1) / th; yidx &lt;= maxY; yidx++)
      {
         bool isYEdge = !((yidx &gt;= minYEdge) &amp;&amp; (yidx &lt;= maxYEdge));
         for (int xidx = (isYEdge ? minXEdge : minX);
            xidx &lt;= (isYEdge ? maxXEdge : maxX);
            xidx++)
         {
            if (layer.GetTile(xidx, yidx).IsMember(Category))
            {
               bool wasTouching;

               if ((OldPixelX &lt;= xidx * tw + tw) &amp;&amp;
                  (OldPixelX + SolidWidth &gt;= xidx * tw) &amp;&amp;
                  (OldPixelY &lt;= yidx * th + th) &amp;&amp;
                  (OldPixelY + SolidHeight &gt;= yidx * th))
               {
                  bool edgeX = (OldPixelX + SolidWidth == xidx * tw) ||
                     (OldPixelX == xidx * tw + tw);
                  bool edgeY = (OldPixelY + SolidHeight == yidx * th) ||
                     (OldPixelY == yidx * th + th);
                  if (edgeX &amp;&amp; edgeY)
                     wasTouching = false;
                  else
                     wasTouching = true;
               }
               else
                  wasTouching = false;

               if (TouchedTiles == null)
                  TouchedTiles = new System.Collections.Generic.List&lt;TouchedTile&gt;(10);
               TouchedTiles.Add(new TouchedTile(xidx, yidx, layer[xidx, yidx], !wasTouching));
            }
         }
      }
      if (TouchedTiles == null)
         return false;
      return TouchedTiles.Count &gt; 0;
   }

   /// &lt;summary&gt;
   /// Determine if the sprite is touching the specified tile, and if so,
   /// "take" it and increment a counter (requires &lt;see cref="TouchTiles"/&gt;).
   /// &lt;/summary&gt;
   /// &lt;param name="TileValue"&gt;Index of the tile to look for.&lt;/param&gt;
   /// &lt;param name="Counter"&gt;Counter to be checked and incremented when the specified tile is found.
   /// If the counter's maximum value has been reached, the tile will not be taken.&lt;/param&gt;
   /// &lt;param name="NewValue"&gt;Specified the tile value with which the touched tile will
   /// be replaced if the counter has not hit its maximum.&lt;/param&gt;
   /// &lt;returns&gt;The number of tiles affected.&lt;/returns&gt;
   /// &lt;remarks&gt;&lt;para&gt;This function will search through all tiles that have been touched (collected
   /// by &lt;see cref="TouchTiles"/&gt;, and for each tile that it finds that matches the specified
   /// &lt;paramref name="TileValue" /&gt;, it will check &lt;paramref name="Counter" /&gt;, and, if it
   /// has not yet reached the maximum value, increment the counter and replace the tile with
   /// the tile number specified by NewValue.&lt;/para&gt;&lt;para&gt;
   /// Only unprocessed tiles are considered. Once this function (or similar functions)
   /// affects the tile, it is marked as processed. It is only marked as processed if
   /// it is affected (if the counter changes).&lt;/para&gt;&lt;/remarks&gt;
   [Description("When the sprite is touching the specified tile, and the specified counter is not maxed, change/clear the tile value to NewValue and increment the specified counter/parameter. Returns the number of tiles affected. (Must run TouchTiles first.)")]
   public virtual int TileTake(int TileValue, Counter Counter, int NewValue)
   {
      Debug.Assert(this.isActive, "Attempted to execute TileTake on an inactive sprite");

      if (TouchedTiles == null)
         return 0;

      int result = 0;

      for (int i = 0; i &lt; TouchedTiles.Count; i++)
      {
         TouchedTile tt = TouchedTiles[i];
         if ((tt.tileValue == TileValue) &amp;&amp; (!tt.processed))
         {
            if (Counter.CurrentValue &lt; Counter.MaxValue)
            {
               Counter.CurrentValue++;
               layer[tt.x, tt.y] = tt.tileValue = NewValue;
               tt.processed = true;
               result++;
            }
            else
               break;
         }
      }
      return result;
   }

   /// &lt;summary&gt;
   /// Make the specified tile behave like it is "using up" one of the items tracked by the specified counter (requires &lt;see cref="TouchTiles"/&gt;).
   /// &lt;/summary&gt;
   /// &lt;param name="TileValue"&gt;Index of the tile to look for&lt;/param&gt;
   /// &lt;param name="Counter"&gt;Specifies a counter that will be affected. If this counter's value is
   /// greater than 0, it will be decremented and the tile removed.&lt;/param&gt;
   /// &lt;param name="NewValue"&gt;Specifies a new tile value that will replace the touched tile when
   /// it is removed. This value is commonly 0, which usually represents a tileset's empty tile.&lt;/param&gt;
   /// &lt;returns&gt;The number of tiles affected&lt;/returns&gt;
   /// &lt;remarks&gt;&lt;para&gt;This function will search through all tiles that have been touched (collected
   /// by &lt;see cref="TouchTiles"/&gt;, and for each tile that it finds that matches the specified
   /// &lt;paramref name="TileValue" /&gt;, it will check &lt;paramref name="Counter" /&gt;, and, if it
   /// is greater than 0, decrement the counter and replace the tile with tile number
   /// &lt;paramref name="NewValue"/&gt;.&lt;/para&gt;
   /// &lt;para&gt;Only unprocessed tiles are considered. Once this function (or similar functions)
   /// affects the tile, it is marked as processed. It is only marked as processed if
   /// it is affected (if the counter changes).&lt;/para&gt;&lt;/remarks&gt;
   [Description("When the sprite is touching the specified tile, and the specified counter is greater than 0, decrement the counter and clear the tile value to NewValue. Returns the number of tiles affected. (Must run TouchTiles first.)")]
   public virtual int TileUseUp(int TileValue, Counter Counter, int NewValue)
   {
      Debug.Assert(this.isActive, "Attempted to execute TileUseUp on an inactive sprite");

      if (TouchedTiles == null)
         return 0;

      int result = 0;

      for (int i = 0; i &lt; TouchedTiles.Count; i++)
      {
         TouchedTile tt = TouchedTiles[i];
         if ((tt.tileValue == TileValue) &amp;&amp; (!tt.processed))
         {
            if (Counter.CurrentValue &gt; 0)
            {
               Counter.CurrentValue--;
               layer[tt.x, tt.y] = tt.tileValue = NewValue;
               tt.processed = true;
               result++;
            }
            else
               break;
         }
      }
      return result;
   }

   /// &lt;summary&gt;
   /// Find the next unprocessed tile of the specified type (requires &lt;see cref="TouchTiles"/&gt;).
   /// &lt;/summary&gt;
   /// &lt;param name="TileValue"&gt;Tile index to search for&lt;/param&gt;
   /// &lt;param name="InitialOnly"&gt;If this is true, the tile will only be considered if the sprite
   /// just started touching it (was not touching it before).&lt;/param&gt;
   /// &lt;param name="MarkAsProcessed"&gt;If this is true, the tile that is returned is immediately
   /// marked as processed, otherwise it is left as unprocessed and may still be affected by
   /// other tile interaction functions.&lt;/param&gt;
   /// &lt;returns&gt;The index of the next unprocessed tile in &lt;see cref="TouchedTiles"/&gt; if one
   /// exists with the specified &lt;paramref name="TileValue" /&gt;, or -1 if no such tile exists.
   /// &lt;/returns&gt;
   /// &lt;remarks&gt;While &lt;see cref="TileUseUp"/&gt; and &lt;see cref="TileTake"/&gt; provide simple
   /// access to common behaviors related to tile interactions, they aren't expected to cover
   /// all behaviors you might want to implement related to tile interactions.  This function
   /// provides a piece of functionality that will be useful in more detailed control over
   /// tile interactions.&lt;seealso cref="TouchTiles"/&gt;&lt;seealso cref="TileActivateSprite"/&gt;
   /// &lt;seealso cref="TileAddSprite"/&gt;&lt;/remarks&gt;
   /// &lt;example&gt;
   /// The following example demonstrates how you could activate the next inactive instance of
   /// a sprite in the "Points" category at the location of any tile whose tile number is 10
   /// when the sprite touches the tile, only when the sprite first touches the tile. Performing
   /// this in a while loop ensures that all such tiles that the sprite is initially touching get
   /// processed at once, which is important because it won't be initially touching them any more
   /// in the next frame. TempNum is any temporary numeric variable, such as a sprite parameter.
   /// &lt;code&gt;
   /// if (TouchTiles(TileCategoryName.Touchable))
   /// {
   ///    TempNum = TileTouchingIndex(10, true, true);
   ///    while(TempNum &gt; 0)
   ///    {
   ///       TileActivateSprite(TempNum, ParentLayer.m_SpriteCategories.Points, true);
   ///       TempNum = TileTouchingIndex(10, true, true);
   ///    }
   /// }
   /// &lt;/code&gt;
   /// &lt;/example&gt;
   [Description("Return the index of the next unprocessed tile with the specified value from the list of tiles the sprite is touching. If InitialOnly is set, only return tiles that the sprite wasn't already touching. Return -1 if no tiles are being touched. (Must run TouchTiles first.)")]
   public virtual int TileTouchingIndex(int TileValue, bool InitialOnly, bool MarkAsProcessed)
   {
      Debug.Assert(this.isActive, "Attempted to execute TileTouchingIndex on an inactive sprite");

      if (TouchedTiles == null)
         return -1;

      for (int i = 0; i &lt; TouchedTiles.Count; i++)
      {
         TouchedTile tt = TouchedTiles[i];
         if ((tt.tileValue == TileValue) &amp;&amp; (!tt.processed) &amp;&amp; (!InitialOnly || tt.initial))
         {
            tt.processed = MarkAsProcessed;
            return i;
         }
      }

      return -1;
   }

   /// &lt;summary&gt;
   /// Activate the next inactive sprite from a category at the coordinates of a tile being touched by the sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="TouchingIndex"&gt;Index of the tile in the array of tiles to process (&lt;see cref="TouchedTiles"/&gt;).
   /// This can be acquired using &lt;see cref="TileTouchingIndex"/&gt;.&lt;/param&gt;
   /// &lt;param name="Category"&gt;Category containing sprites that can be activated.&lt;/param&gt;
   /// &lt;param name="ClearParameters"&gt;True if the newly activated sprite's parameters should
   /// all be set to zero.&lt;/param&gt;
   /// &lt;returns&gt;The index of the newly activated sprite, if a sprite was activated (this
   /// value will be greater than or equal to zero) or -1 if all sprites in the specified
   /// category are already activate.&lt;/returns&gt;
   /// &lt;remarks&gt;&lt;para&gt;This function allows you to treat a number of sprites within a category
   /// as kind of a dynamic collection of sprites which can be activated one after the other.
   /// Each time this is called, it will find and activate the next inactive sprite within
   /// the category. This limits the number of sprites that can be activated by this function
   /// to the number of actual sprite instances in the specified category on the layer where
   /// the function is executed. For a truly dynamic collection of sprites, see
   /// &lt;see cref="TileAddSprite"/&gt;.&lt;/para&gt;
   /// &lt;para&gt;Clearing the parameters of a newly activated sprite can be very useful in initializing
   /// the sprite as soon as it is activated because the activated sprite can check to see
   /// when a particular parameter is zero. If it sees that it's zero, it can immediately set
   /// it to some other value and perform whatever initialization it needs to (such as offsetting
   /// its position from the tile by some pre-set distance).&lt;/para&gt;&lt;/remarks&gt;
   [Description("Activate the next inactive sprite from a category at the coordinates of a tile being touched by the sprite.  Use TileTouchingIndex to acquire TouchingIndex.  Returns the index into the category of the sprite that was activated, or -1 if all sprites in the category were already active.")]
   public virtual int TileActivateSprite(int TouchingIndex, SpriteCollection Category, bool ClearParameters)
   {
      Debug.Assert(this.isActive, "Attempted to execute TileActivateSprite on an inactive sprite");

      for (int i = 0; i &lt; Category.Count; i++)
      {
         if (!Category[i].isActive)
         {
            Category[i].isActive = true;
            TouchedTile tt = TouchedTiles[TouchingIndex];
            Category[i].x = tt.x * layer.Tileset.TileWidth;
            Category[i].y = tt.y * layer.Tileset.TileHeight;
            if (ClearParameters)
            {
               Category[i].frame = 0;
               Category[i].state = 0;
               Category[i].ClearParameters();
            }
            Category[i].ProcessRules();
            return i;
         }
      }
      return -1;
   }

   /// &lt;summary&gt;
   /// Create a new (dynamic) instance of the specified sprite type at the coordinates
   /// of a tile being touched by the player.
   /// &lt;/summary&gt;
   /// &lt;param name="TouchingIndex"&gt;Refers to a tile in &lt;see cref="TouchedTiles"/&gt; by index.
   /// &lt;see cref="TileTouchingIndex"/&gt; can be used to acquire this value.&lt;/param&gt;
   /// &lt;param name="SpriteDefinition"&gt;Specifies the type of sprite that will be created.&lt;/param&gt;
   /// &lt;remarks&gt;&lt;para&gt;As opposed to &lt;see cref="TileActivateSprite"/&gt;, which activates a pre-defined
   /// instance of a sprite, this function will actually create a new sprite instance on the
   /// fly (referred to as a "dynamic" sprite instance). Dynamic sprites cannot be referred
   /// to directly by other rules because they don't have names associated with them, therefore
   /// it's recommended that &lt;see cref="TileActivateSprite"/&gt; be used when more control is
   /// desired. However, for common sprites that may be created on any map, this is ideal
   /// because it doesn't require you to pre-define each possible instance.&lt;/para&gt;
   /// &lt;para&gt;Dynamic sprites are added to the end of each category that they belong to
   /// (categories are defined in terms of sprite definitions, so a dynamic sprite knows
   /// the categories in which it should participate). This happens as the sprite is created.
   /// When the sprite is deactivated, it will automatically be removed from all categories
   /// as part of &lt;see cref="LayerBase.ProcessSprites"/&gt;.&lt;/para&gt;
   /// &lt;para&gt;The maximum number of sprites that can be active on a layer at once is
   /// defined by &lt;see cref="SpriteCollection.maxCollectionSize"/&gt;. This includes static
   /// sprites as well as dynamic sprites. The purpose of this maximum is not a technical
   /// limitation (feel free to change the code in SpriteCollection.cs to increase the maximum
   /// all you like). It only exists to help developers realize when sprite instances are
   /// "leaking" (not being cleaned up or deactivated properly) or when more sprites than
   /// necessary are being created. In many cases, the engine can actually handle quite a
   /// bit more than 100 sprites without significant performance impact.&lt;/para&gt;
   /// &lt;para&gt;Because the sprite instances being created are not activations of already
   /// existing instances (as is the case with &lt;see cref="TileActivateSprite"/&gt;), there
   /// is no need for a parameter to reset all the sprite's parameters. All parameters of
   /// a newly created sprite instance are always initialized to zero. The solidity is copied
   /// from the sprite definition that created the sprite.&lt;/para&gt;
   /// &lt;para&gt;New sprite instances will not refer to any solidity, and will begin in the first
   /// frame of the first state, but you can use rules to affect &lt;see cref="GeneralRules.lastCreatedSprite"/&gt;
   /// to set values of the new sprite, or define rules on the created sprite type to make it
   /// initialize itself appropriately.&lt;/para&gt;
   /// &lt;seealso cref="PlanBase.AddSpriteAtPlan"/&gt;
   /// &lt;seealso cref="AddSpriteHere"/&gt;&lt;/remarks&gt;
   [Description("Create a new (dynamic) instance of the specified sprite type at the coordinates of a tile being touched by the player.  Use TileTouchingIndex to acquire TouchingIndex.")]
   public virtual void TileAddSprite(int TouchingIndex, [Editor("SpriteDefinition", "UITypeEditor")] System.Type SpriteDefinition)
   {
      Debug.Assert(this.isActive, "Attempted to execute TileAddSprite on an inactive sprite");

      System.Reflection.ConstructorInfo constructor = SpriteDefinition.GetConstructor(new System.Type[]
      {
         typeof(LayerBase), typeof(double), typeof(double), typeof(double), typeof(double), typeof(int), typeof(int), typeof(bool), typeof(Display), typeof(Solidity), typeof(int), typeof(bool)
      });
      TouchedTile tt = TouchedTiles[TouchingIndex];
      lastCreatedSprite = (SpriteBase)constructor.Invoke(new object[]
      {
         layer, tt.x * layer.Tileset.TileWidth, tt.y * layer.Tileset.TileHeight, 0, 0, 0, 0, true, layer.ParentMap.Display, m_solidity, -1, true
      });
   }

   /// &lt;summary&gt;
   /// Create a new (dynamic) instance of the specified sprite positioned such that HotSpot on the created sprite overlaps Location on this sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="SpriteDefinition"&gt;Specifies the type of sprite to create&lt;/param&gt;
   /// &lt;param name="Location"&gt;Specifies a point in the current sprite, relative to which the new
   /// sprite will be created.&lt;/param&gt;
   /// &lt;param name="HotSpot"&gt;Specifies a point within the created sprite that will be used to
   /// position the sprite (the location of the "handle" by which it is positioned).&lt;/param&gt;
   /// &lt;remarks&gt;See &lt;see cref="TileAddSprite"/&gt; for more information about dynamically added sprites.
   /// &lt;seealso cref="TileAddSprite"/&gt;&lt;seealso cref="PlanBase.AddSpriteAtPlan"/&gt;
   /// &lt;seealso cref="GeneralRules.lastCreatedSprite"/&gt;&lt;/remarks&gt;
   /// &lt;example&gt;
   /// The following code will create an instance of a sprite named "Bullet" such that the left side
   /// of the bullet matches up with the right side of the current sprite. (The bullet will be
   /// immediately to the right of this sprite, overlapping by 1 pixel.)
   /// &lt;code&gt;AddSpriteHere(typeof(Sprites.Bullet), RelativePosition.RightMiddle, RelativePosition.LeftMiddle);&lt;/code&gt;
   /// &lt;/example&gt;
   [Description("Create a new (dynamic) instance of the specified sprite positioned such that HotSpot on the created sprite overlaps Location on this sprite.")]
   public virtual void AddSpriteHere([Editor("SpriteDefinition", "UITypeEditor")] System.Type SpriteDefinition, RelativePosition Location, RelativePosition HotSpot)
   {
      Debug.Assert(this.isActive, "Attempted to execute AddSpriteHere on an inactive sprite");

      System.Reflection.ConstructorInfo constructor = SpriteDefinition.GetConstructor(new System.Type[]
      {
         typeof(LayerBase), typeof(double), typeof(double), typeof(double), typeof(double), typeof(int), typeof(int), typeof(bool), typeof(Display), typeof(Solidity), typeof(int), typeof(bool)
      });

      lastCreatedSprite = (SpriteBase)constructor.Invoke(new object[]
      {
         layer, 0, 0, 0, 0, 0, 0, true, layer.ParentMap.Display, m_solidity, -1, true
      });

      System.Drawing.Point ptLocation = GetRelativePosition(Location);
      System.Drawing.Point ptHotSpot = lastCreatedSprite.GetRelativePosition(HotSpot);
      lastCreatedSprite.x = lastCreatedSprite.oldX = ptLocation.X - ptHotSpot.X;
      lastCreatedSprite.y = lastCreatedSprite.oldY = ptLocation.Y - ptHotSpot.Y;
   }

   /// &lt;summary&gt;
   /// Change tiles of the specified type that the sprite is touching to another tile (requires &lt;see cref="TouchTiles"/&gt;).
   /// &lt;/summary&gt;
   /// &lt;param name="OldTileValue"&gt;Index of the tile type to search for&lt;/param&gt;
   /// &lt;param name="NewTileValue"&gt;Which tile should these tiles be changed to&lt;/param&gt;
   /// &lt;param name="InitialOnly"&gt;If true, only affect tiles that the player just started touching.&lt;/param&gt;
   /// &lt;returns&gt;The number of tiles affected.&lt;/returns&gt;
   /// &lt;remarks&gt;This function changes all specified tiles at once.
   /// Use &lt;see cref="TileChangeTouched"/&gt; to change only one tile.
   /// &lt;seealso cref="TileChangeTouched"/&gt;&lt;/remarks&gt;
   [Description("Change the specified tile that the sprite is touching to another tile. Return the number of tiles affected. (Must run TouchTiles first.)")]
   public virtual int TileChange(int OldTileValue, int NewTileValue, bool InitialOnly)
   {
      Debug.Assert(this.isActive, "Attempted to execute TileChange on an inactive sprite");

      if (TouchedTiles == null)
         return 0;

      int result = 0;

      for (int i = 0; i &lt; TouchedTiles.Count; i++)
      {
         TouchedTile tt = TouchedTiles[i];
         if ((tt.tileValue == OldTileValue) &amp;&amp; (!tt.processed) &amp;&amp; (!InitialOnly || tt.initial))
         {
            tt.processed = true;
            layer[tt.x, tt.y] = tt.tileValue = NewTileValue;
            result++;
         }
      }
      return result;
   }

   /// &lt;summary&gt;
   /// Change the tile specified by TouchingIndex that is being touched by the sprite to another tile (requires &lt;see cref="TouchTiles"/&gt;).
   /// &lt;/summary&gt;
   /// &lt;param name="TouchingIndex"&gt;Refers to a tile in &lt;see cref="TouchedTiles"/&gt; by index.
   /// &lt;see cref="TileTouchingIndex"/&gt; can be used to acquire this value.&lt;/param&gt;
   /// &lt;param name="NewTileValue"&gt;Specifies the tileset tile index of the new tile that will appear in place of the specified tile.&lt;/param&gt;
   [Description("Change the tile specified by TouchingIndex that is being touched by the sprite to another tile. (Must run TouchTiles first.)")]
   public virtual void TileChangeTouched(int TouchingIndex, int NewTileValue)
   {
      Debug.Assert(this.isActive, "Attempted to execute TileChangeTouched on an inactive sprite");
      Debug.Assert((TouchedTiles != null) &amp;&amp; (TouchedTiles.Count &gt; TouchingIndex),
         "Attempted to execute TileChangeTouched with invalid touched tiles");

      if ((TouchedTiles == null) || (TouchedTiles.Count &lt;= TouchingIndex))
         return;

      TouchedTile tt = TouchedTiles[TouchingIndex];
      layer[tt.x, tt.y] = tt.tileValue = NewTileValue;
   }

   /// &lt;summary&gt;
   /// Calculate the absolute position of a specified &lt;see cref="RelativePosition"/&gt; value with respect to this sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="RelativePosition"&gt;Which position within this sprite should be retrieved.&lt;/param&gt;
   /// &lt;returns&gt;A point relative to the sprite's layer that represents the requested position in the sprite.&lt;/returns&gt;
   /// &lt;remarks&gt;This cannot be applied as a rule function because it returns a point object,
   /// which is not supported by the SGDK2 IDE as an output type.&lt;/remarks&gt;
   public virtual System.Drawing.Point GetRelativePosition(RelativePosition RelativePosition)
   {
      System.Drawing.Point rp = new System.Drawing.Point(PixelX, PixelY);

      switch (RelativePosition)
      {
         case RelativePosition.TopCenter:
            rp.X = (int)(PixelX + SolidWidth / 2);
            break;
         case RelativePosition.TopRight:
            rp.X = PixelX + SolidWidth - 1;
            break;
         case RelativePosition.LeftMiddle:
            rp.Y = PixelY + (int)(SolidHeight / 2);
            break;
         case RelativePosition.CenterMiddle:
            rp.X = PixelX + (int)(SolidWidth / 2);
            rp.Y = PixelY + (int)(SolidHeight / 2);
            break;
         case RelativePosition.RightMiddle:
            rp.X = PixelX + SolidWidth - 1;
            rp.Y = PixelY + (int)(SolidHeight / 2);
            break;
         case RelativePosition.BottomLeft:
            rp.Y = PixelY + SolidHeight - 1;
            break;
         case RelativePosition.BottomCenter:
            rp.X = PixelX + (int)(SolidWidth / 2);
            rp.Y = PixelY + SolidHeight - 1;
            break;
         case RelativePosition.BottomRight:
            rp.X = PixelX + SolidWidth - 1;
            rp.Y = PixelY + SolidHeight - 1;
            break;
      }
      return rp;
   }

   /// &lt;summary&gt;
   /// Determines if a tile at the sprite's current position is a member of the specified category.
   /// &lt;/summary&gt;
   /// &lt;param name="Category"&gt;Tile category against which the tile will be checked.&lt;/param&gt;
   /// &lt;param name="RelativePosition"&gt;The sprite may be on multiple tiles at once. This parameter
   /// indicates which part of the sprite to look at, and gets the tile from the layer at
   /// the specified position.&lt;/param&gt;
   /// &lt;returns&gt;True if the specified point in the sprite is on a tile in the specified category, false otherwise.&lt;/returns&gt;
   [Description("Examines the tile on the layer at the sprite's current position and determines if it is a member of the specified category. The RelativePosition parameter determines which part of the sprite to use when identifying a location on the layer. (TouchTiles is not necessary for this function.)")]
   public virtual bool IsOnTile(TileCategoryName Category, RelativePosition RelativePosition)
   {
      Debug.Assert(this.isActive, "Attempted to execute IsOnTile on an inactive sprite");

      System.Drawing.Point rp = GetRelativePosition(RelativePosition);
      return layer.GetTile((int)(rp.X / layer.Tileset.TileWidth), (int)(rp.Y / layer.Tileset.TileHeight)).IsMember(Category);
   }
   #endregion

   #region Activation
   /// &lt;summary&gt;
   /// Deactivate this sprite.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Deactivated sprites are no longer be drawn and their rules are not processed.
   /// In debug mode, attempting to refer to inactive sprites from active rules (or otherwise
   /// attempting to execute functions on inactive sprites) will display errors. If the
   /// sprite was added as a dynamic sprite by &lt;see cref="TileAddSprite"/&gt;, deactivating it
   /// will cause &lt;see cref="LayerBase.ProcessSprites"/&gt; to remove the sprite from all
   /// categories so it cannot even be considered for re-activation.
   /// &lt;seealso cref="TileAddSprite"/&gt;&lt;seealso cref="TileActivateSprite"/&gt;&lt;/remarks&gt;
   [Description("Deactivate this sprite.  It will no longer be drawn, and in debug mode, will display errors if rules try to execute on it.")]
   public virtual void Deactivate()
   {
      isActive = false;
   }
   #endregion

   /// &lt;summary&gt;
   /// Determine if this sprite is planning to overlap the target sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="TargetSprite"&gt;Sprite against which planned overlap is checked.&lt;/param&gt;
   /// &lt;returns&gt;True if the sprite will overlap TargetSprite.&lt;/returns&gt;
   public virtual bool TestCollisionRect(SpriteBase TargetSprite)
   {
      Debug.Assert(this.isActive, "Attempted to execute TestCollision on an inactive sprite");

      int x1 = ProposedPixelX;
      int w1 = SolidWidth;
      int x2 = TargetSprite.ProposedPixelX;
      int w2 = TargetSprite.SolidWidth;
      int y1 = ProposedPixelY;
      int h1 = SolidHeight;
      int y2 = TargetSprite.ProposedPixelY;
      int h2 = TargetSprite.SolidHeight;

      int pushright = x1 + w1 - x2;
      int pushleft = x2 + w2 - x1;
      if ((pushright &gt; 0) &amp;&amp; (pushleft &gt; 0))
      {
         int pushdown = y1 + h1 - y2;
         int pushup = y2 + h2 - y1;
         if ((pushup &gt; 0) &amp;&amp; (pushdown &gt; 0))
            return true;
      }
      return false;
   }
}</Text>
  </SourceCode>
  <SourceCode Name="Joystick.cs" IsCustomObject="false">
    <Text>using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;

public partial class Joystick
{
   #region Embedded Types
   [Flags()]
   private enum JoystickFlags
   {
      JOY_RETURNX = 0x1,
      JOY_RETURNY = 0x2,
      JOY_RETURNZ = 0x4,
      JOY_RETURNR = 0x8,
      JOY_RETURNU = 0x10,
      JOY_RETURNV = 0x20,
      JOY_RETURNPOV = 0x40,
      JOY_RETURNBUTTONS = 0x80,
      JOY_RETURNALL = (JOY_RETURNX | JOY_RETURNY | JOY_RETURNZ | JOY_RETURNR | JOY_RETURNU | JOY_RETURNV | JOY_RETURNPOV | JOY_RETURNBUTTONS)
   }

   [StructLayout(LayoutKind.Sequential)]
   private struct JOYCAPS
   {
      public UInt16 wMid;
      public UInt16 wPid;
      [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
      public string szPname;
      public Int32 wXmin;
      public Int32 wXmax;
      public Int32 wYmin;
      public Int32 wYmax;
      public Int32 wZmin;
      public Int32 wZmax;
      public Int32 wNumButtons;
      public Int32 wPeriodMin;
      public Int32 wPeriodMax;
      public Int32 wRmin;
      public Int32 wRmax;
      public Int32 wUmin;
      public Int32 wUmax;
      public Int32 wVmin;
      public Int32 wVmax;
      public Int32 wCaps;
      public Int32 wMaxAxes;
      public Int32 wNumAxes;
      public Int32 wMaxButtons;
      [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
      public string szRegKey;
      [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]
      public string szOEMVxD;
   }

   [StructLayout(LayoutKind.Sequential)]
   private struct JOYINFOEX
   {
      public UInt32 dwSize;
      [MarshalAs(UnmanagedType.I4)]
      public JoystickFlags dwFlags;
      public Int32 dwXpos;
      public Int32 dwYpos;
      public Int32 dwZpos;
      public Int32 dwRpos;
      public Int32 dwUpos;
      public Int32 dwVpos;
      public UInt32 dwButtons;
      public UInt32 dwButtonNumber;
      public Int32 dwPOV;
      public UInt32 dwReserved1;
      public UInt32 dwReserved2;
   }
   #endregion

   #region Private Members
   private int deviceNum;

   private JOYCAPS joyCaps;
   private JOYINFOEX joyInfo;
   #endregion

   [DllImport("Winmm.dll")]
   private static extern UInt32 joyGetDevCaps(Int32 uJoyID, out JOYCAPS pjc, Int32 cbjc);
   [DllImport("Winmm.dll")]
   private static extern UInt32 joyGetPosEx(Int32 uJoyID, out JOYINFOEX pji);

   /// &lt;summary&gt;
   /// Returns the number of joysticks available on the system.
   /// &lt;/summary&gt;
   /// &lt;returns&gt;A number from 0 to 16&lt;/returns&gt;
   public static int GetDeviceCount()
   {
      JOYCAPS joyCaps = new JOYCAPS();
      int count = 0;
      if ((Environment.OSVersion.Platform == PlatformID.Win32NT) ||
          (Environment.OSVersion.Platform == PlatformID.Win32Windows))
      {
         for (count = 0; count &lt; 16; count++)
         {
            if (0 != joyGetDevCaps(count, out joyCaps, Marshal.SizeOf(joyCaps)))
               return count;
         }
      }
      return count;
   }

   /// &lt;summary&gt;
   /// Create an object which can be used to acces information about the specified
   /// joystick number.
   /// &lt;/summary&gt;
   /// &lt;param name="deviceNum"&gt;Number from 0 to 15 indicating a joystick number&lt;/param&gt;
   public Joystick(int deviceNum)
   {
      this.deviceNum = deviceNum;
      if ((Environment.OSVersion.Platform == PlatformID.Win32NT) ||
          (Environment.OSVersion.Platform == PlatformID.Win32Windows))
      {
         if (0 != joyGetDevCaps(deviceNum, out joyCaps, Marshal.SizeOf(joyCaps)))
            throw new InvalidOperationException("Failed to access specified joystick");
      }
   }

   /// &lt;summary&gt;
   /// Read all data from the device associated with this Joystick into the
   /// Position, POVAngle and Button properties.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Buttons are retrieved by accessing the Joystick's indexer
   /// property&lt;/remarks&gt;
   /// &lt;example&gt;
   /// if (myJoy[0])
   /// {
   ///    // button 0 is pressed
   /// }
   /// &lt;/example&gt;
   public void Read()
   {
      joyInfo.dwSize = (UInt32)Marshal.SizeOf(joyInfo);
      joyInfo.dwFlags = JoystickFlags.JOY_RETURNALL;
      if ((Environment.OSVersion.Platform == PlatformID.Win32NT) ||
          (Environment.OSVersion.Platform == PlatformID.Win32Windows))
         joyGetPosEx(deviceNum, out joyInfo);
   }

   /// &lt;summary&gt;
   /// The position of the joystick's x-axis input during the last call to &lt;see cref="Read"/&gt;.
   /// &lt;/summary&gt;
   public int XPosition
   {
      get
      {
         return joyInfo.dwXpos;
      }
   }

   /// &lt;summary&gt;
   /// The position of the joystick's y-axis input during the last call to &lt;see cref="Read"/&gt;.
   /// &lt;/summary&gt;
   public int YPosition
   {
      get
      {
         return joyInfo.dwYpos;
      }
   }

   /// &lt;summary&gt;
   /// The position of the joystick's z-axis input during the last call to &lt;see cref="Read"/&gt;.
   /// &lt;/summary&gt;
   public int ZPosition
   {
      get
      {
         return joyInfo.dwZpos;
      }
   }

   /// &lt;summary&gt;
   /// The position of the joystick's rudder input during the last call to &lt;see cref="Read"/&gt;.
   /// &lt;/summary&gt;
   public int RPosition
   {
      get
      {
         return joyInfo.dwRpos;
      }
   }

   /// &lt;summary&gt;
   /// The position of the joystick's u-axis input during the last call to &lt;see cref="Read"/&gt;.
   /// &lt;/summary&gt;
   public int UPosition
   {
      get
      {
         return joyInfo.dwUpos;
      }
   }

   /// &lt;summary&gt;
   /// The position of the joystick's v-axis input during the last call to &lt;see cref="Read"/&gt;.
   /// &lt;/summary&gt;
   public int VPosition
   {
      get
      {
         return joyInfo.dwVpos;
      }
   }

   /// &lt;summary&gt;
   /// The position of the joystick's POV control during the last call to &lt;see cref="Read"/&gt;,
   /// represented as a number between 0 and 35900 in hundredths of degrees
   /// &lt;/summary&gt;
   public int POVAngle
   {
      get
      {
         return joyInfo.dwPOV;
      }
   }

   /// &lt;summary&gt;
   /// Determines which buttons were pressed during the last call to &lt;see cref="Read"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;param name="buttonNum"&gt;A number from 0 to 31 specifying a button number&lt;/param&gt;
   /// &lt;returns&gt;True if the button is pressed, or False otherwise.&lt;/returns&gt;
   public bool this[byte buttonNum]
   {
      get
      {
         if (buttonNum &gt;= 32)
            throw new ArgumentException("Invalid button number", "buttonNum");
         return 0 != (joyInfo.dwButtons &amp; (1 &lt;&lt; buttonNum));
      }
   }

   /// &lt;summary&gt;
   /// Returns a string identifying the joystick in plain text
   /// &lt;/summary&gt;
   public string Name
   {
      get
      {
         return joyCaps.szPname;
      }
   }

   /// &lt;summary&gt;
   /// Returns the minimum value of &lt;see cref="XPosition"/&gt;.
   /// &lt;/summary&gt;
   public int MinimumX
   {
      get
      {
         return joyCaps.wXmin;
      }
   }

   /// &lt;summary&gt;
   /// Returns the maximum value of &lt;see cref="XPosition"/&gt;.
   /// &lt;/summary&gt;
   public int MaximumX
   {
      get
      {
         return joyCaps.wXmax;
      }
   }

   /// &lt;summary&gt;
   /// Returns the minimum value of &lt;see cref="YPosition"/&gt;.
   /// &lt;/summary&gt;
   public int MinimumY
   {
      get
      {
         return joyCaps.wYmin;
      }
   }

   /// &lt;summary&gt;
   /// Returns the maximum value of &lt;see cref="YPosition"/&gt;.
   /// &lt;/summary&gt;
   public int MaximumY
   {
      get
      {
         return joyCaps.wYmax;
      }
   }

   /// &lt;summary&gt;
   /// Returns the minimum value of &lt;see cref="ZPosition"/&gt;.
   /// &lt;/summary&gt;
   public int MinimumZ
   {
      get
      {
         return joyCaps.wZmin;
      }
   }

   /// &lt;summary&gt;
   /// Returns the maximum value of &lt;see cref="ZPosition"/&gt;.
   /// &lt;/summary&gt;
   public int MaximumZ
   {
      get
      {
         return joyCaps.wZmax;
      }
   }

   /// &lt;summary&gt;
   /// Returns the minimum value of &lt;see cref="RPosition"/&gt;.
   /// &lt;/summary&gt;
   public int MinimumR
   {
      get
      {
         return joyCaps.wRmin;
      }
   }

   /// &lt;summary&gt;
   /// Returns the maximum value of &lt;see cref="RPosition"/&gt;.
   /// &lt;/summary&gt;
   public int MaximumR
   {
      get
      {
         return joyCaps.wRmax;
      }
   }

   /// &lt;summary&gt;
   /// Returns the minimum value of &lt;see cref="UPosition"/&gt;.
   /// &lt;/summary&gt;
   public int MinimumU
   {
      get
      {
         return joyCaps.wUmin;
      }
   }

   /// &lt;summary&gt;
   /// Returns the maximum value of &lt;see cref="UPosition"/&gt;.
   /// &lt;/summary&gt;
   public int MaximumU
   {
      get
      {
         return joyCaps.wUmax;
      }
   }

   /// &lt;summary&gt;
   /// Returns the minimum value of &lt;see cref="VPosition"/&gt;.
   /// &lt;/summary&gt;
   public int MinimumV
   {
      get
      {
         return joyCaps.wVmin;
      }
   }

   /// &lt;summary&gt;
   /// Returns the maximum value of &lt;see cref="VPosition"/&gt;.
   /// &lt;/summary&gt;
   public int MaximumV
   {
      get
      {
         return joyCaps.wVmax;
      }
   }
}
</Text>
  </SourceCode>
  <SourceCode Name="KeyboardState.cs" IsCustomObject="false">
    <Text>using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
using System.Runtime.InteropServices;

public interface IKeyboard
{
   void Poll();
   bool IsKeyDown(Key key);
   Key GetFirstKey();
}

/// &lt;summary&gt;
/// Identifies a key on the keyboard.
/// &lt;/summary&gt;
public enum Key
{
   None = 0,
   Backspace,
   Tab,
   Enter,
   Pause,
   CapsLock,
   Escape,
   Space,
   PageUp,
   PageDown,
   End,
   Home,
   Left,
   Up,
   Right,
   Down,
   PrintScreen,
   Insert,
   Delete,
   Digit0,
   Digit1,
   Digit2,
   Digit3,
   Digit4,
   Digit5,
   Digit6,
   Digit7,
   Digit8,
   Digit9,
   A,
   B,
   C,
   D,
   E,
   F,
   G,
   H,
   I,
   J,
   K,
   L,
   M,
   N,
   O,
   P,
   Q,
   R,
   S,
   T,
   U,
   V,
   W,
   X,
   Y,
   Z,
   LWindow,
   RWindow,
   ContextMenu,
   NumPad0,
   NumPad1,
   NumPad2,
   NumPad3,
   NumPad4,
   NumPad5,
   NumPad6,
   NumPad7,
   NumPad8,
   NumPad9,
   NumPadMultiply,
   NumPadAdd,
   NumPadEnter,
   NumPadSubtract,
   NumPadDecimal,
   NumPadDivide,
   F1,
   F2,
   F3,
   F4,
   F5,
   F6,
   F7,
   F8,
   F9,
   F10,
   F11,
   F12,
   NumLock,
   ScrollLock,
   LShift,
   RShift,
   LControl,
   RControl,
   LAlt,
   RAlt,
   SemiColon,
   Equal,
   Comma,
   Minus,
   Period,
   Slash,
   Backtick,
   LeftBracket,
   BackSlash,
   RightBracket,
   Quote
}

public partial class KeyboardState : IKeyboard
{
   IKeyboard kbImpl;
   
   public KeyboardState()
   {
      if (Environment.OSVersion.Platform == PlatformID.Unix)
         kbImpl = new XKeyboard();
      else
         kbImpl = new WinKeyboard();
   }
   
   public bool IsKeyDown(Key key)
   {
      return kbImpl.IsKeyDown(key);
   }
   
   public Key GetFirstKey()
   {
      return kbImpl.GetFirstKey();
   }
   
   public void Poll()
   {
      kbImpl.Poll();
   }
   
   public bool this[Key key]
   {
      get
      {
         return IsKeyDown(key);
      }
   }
}

/// &lt;summary&gt;
/// Represents the current state of all keys on the keyboard.
/// &lt;/summary&gt;
public partial class WinKeyboard : IKeyboard
{
   private byte[] keyMap = new byte[] {
      /*None =*/ 0,
      /*Backspace =*/ 0x08,
      /*Tab = */0x09,
      /*Enter = */0x0D,
      /*Pause = */0x13,
      /*CapsLock = */0x14,
      /*Escape = */0x1B,
      /*Space = */0x20,
      /*PageUp = */0x21,
      /*PageDown = */0x22,
      /*End = */0x23,
      /*Home = */0x24,
      /*Left = */0x25,
      /*Up = */0x26,
      /*Right = */0x27,
      /*Down = */0x28,
      /*PrintScreen = */0x2C,
      /*Insert = */0x2D,
      /*Delete = */0x2E,
      /*Digit0 = */0x30,
      /*Digit1 = */0x31,
      /*Digit2 = */0x32,
      /*Digit3 = */0x33,
      /*Digit4 = */0x34,
      /*Digit5 = */0x35,
      /*Digit6 = */0x36,
      /*Digit7 = */0x37,
      /*Digit8 = */0x38,
      /*Digit9 = */0x39,
      /*A = */0x41,
      /*B = */0x42,
      /*C = */0x43,
      /*D = */0x44,
      /*E = */0x45,
      /*F = */0x46,
      /*G = */0x47,
      /*H = */0x48,
      /*I = */0x49,
      /*J = */0x4A,
      /*K = */0x4B,
      /*L = */0x4C,
      /*M = */0x4D,
      /*N = */0X4E,
      /*O = */0X4F,
      /*P = */0X50,
      /*Q = */0X51,
      /*R = */0X52,
      /*S = */0X53,
      /*T = */0X54,
      /*U = */0X55,
      /*V = */0X56,
      /*W = */0X57,
      /*X = */0X58,
      /*Y = */0X59,
      /*Z = */0X5A,
      /*LWindow = */0x5B,
      /*RWindow = */0x5C,
      /*ContextMenu = */0x5D,
      /*NumPad0 = */0x60,
      /*NumPad1 = */0x61,
      /*NumPad2 = */0x62,
      /*NumPad3 = */0x63,
      /*NumPad4 = */0x64,
      /*NumPad5 = */0x65,
      /*NumPad6 = */0x66,
      /*NumPad7 = */0x67,
      /*NumPad8 = */0x68,
      /*NumPad9 = */0x69,
      /*NumPadMultiply = */0x6A,
      /*NumPadAdd = */0x6B,
      /*NumPadEnter = */0x6C,
      /*NumPadSubtract = */0x6D,
      /*NumPadDecimal = */0x6E,
      /*NumPadDivide = */0x6F,
      /*F1 = */0x70,
      /*F2 = */0x71,
      /*F3 = */0x72,
      /*F4 = */0x73,
      /*F5 = */0x74,
      /*F6 = */0x75,
      /*F7 = */0x76,
      /*F8 = */0x77,
      /*F9 = */0x78,
      /*F10 = */0x79,
      /*F11 = */0x7A,
      /*F12 = */0x7B,
      /*NumLock = */0x90,
      /*ScrollLock = */0x91,
      /*LShift = */0xA0,
      /*RShift = */0xA1,
      /*LControl = */0xA2,
      /*RControl = */0xA3,
      /*LAlt = */0xA4,
      /*RAlt = */0xA5,
      /*SemiColon = */0xBA,
      /*Equal = */0xBB,
      /*Comma = */0xBC,
      /*Minus = */0xBD,
      /*Period = */0xBE,
      /*Slash = */0xBF,
      /*Backtick = */0xC0,
      /*LeftBracket = */0xDB,
      /*BackSlash = */0xDC,
      /*RightBracket = */0xDD,
      /*Quote = */0xDE
   };

   [DllImport("user32.dll")]
   private static extern bool GetKeyboardState(byte[] lpKeyState);

   private byte[] keyStates = new byte[256];

   /// &lt;summary&gt;
   /// Gets or sets the state of the specified key on the keyboard.
   /// &lt;/summary&gt;
   /// &lt;param name="key"&gt;Which key is affected.&lt;/param&gt;
   /// &lt;returns&gt;True if the key is pressed of false if it is not pressed.&lt;/returns&gt;
   public bool this[Key key]
   {
      get
      {
         return IsKeyDown(key);
      }
   }

   /// &lt;summary&gt;
   /// Get the currently pressed key.  If more than one key is pressed, get the first one.
   /// &lt;/summary&gt;
   /// &lt;returns&gt;&lt;see cref="Key.None"/&gt; is returned if no key is pressed.&lt;/returns&gt;
   public Key GetFirstKey()
   {
      foreach (Key specificKey in new Key[] {
         Key.LControl, Key.RControl, Key.LShift, Key.RShift,
         Key.NumPadEnter})
         if (this[specificKey])
            return specificKey;

      foreach (Key k in System.Enum.GetValues(typeof(Key)))
         if (this[k]) return k;
      return Key.None;
   }
   
   public bool IsKeyDown(Key key)
   {
      return 0 != (keyStates[keyMap[(int)key]] &amp; 0x80);
   }
   
   public void Poll()
   {
      GetKeyboardState(keyStates);
   }
}

class XKeyboard : IKeyboard
{
   private enum KeySym
   {
      None = 0,
      Space = 0x20,
      Quote = 0x27,
      Comma = 0x2c,
      Minus = 0x2d,
      Period = 0x2e,
      Slash = 0x2f,
      Digit0 = 0x30,
      Digit1,
      Digit2,
      Digit3,
      Digit4,
      Digit5,
      Digit6,
      Digit7,
      Digit8,
      Digit9,
      SemiColon = 0x3b,
      Equal = 0x3d,
      A = 0x41,
      B,
      C,
      D,
      E,
      F,
      G,
      H,
      I,
      J,
      K,
      L,
      M,
      N,
      O,
      P,
      Q,
      R,
      S,
      T,
      U,
      V,
      W,
      X,
      Y,
      Z,
      LeftBracket = 0x5b,
      Backslash,
      RightBracket,
      Grave = 0x60,
      PrintScreen = 0xfd1d,
      Backspace = 0xff08,
      Tab = 0xff09,
      Enter = 0xff0d,
      Pause = 0xff13,
      ScrollLock = 0xff14,
      SysRq = 0xff15,
      Escape = 0xff1b,
      Home = 0xff50,
      Left,
      Up,
      Right,
      Down,
      PageUp,
      PageDown,
      End,
      Insert = 0xff63,
      Menu = 0xff67,
      Break = 0xff6b,
      NumLock = 0xff7f,
      KeyPadEnter = 0xff8d,
      KeyPadAsterisk = 0xffaa,
      KeyPadPlus = 0xffab,
      KeyPadMinus = 0xffad,
      KeyPadDot = 0xffae,
      KeyPadSlash = 0xffaf,
      KeyPad0 = 0xffb0,
      KeyPad1,
      KeyPad2,
      KeyPad3,
      KeyPad4,
      KeyPad5,
      KeyPad6,
      KeyPad7,
      KeyPad8,
      KeyPad9,
      F1 = 0xffbe,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      LeftShift = 0xffe1,
      RightShift = 0xffe2,
      LeftCtrl = 0xffe3,
      RightCtrl = 0xffe4,
      CapsLock = 0xffe5,
      LeftAlt = 0xffe9,
      RightAlt = 0xffea,
      LeftSuper = 0xffeb, // aka Left Windows Key
      RightSuper = 0xffec, // aka Right Windows Key
      Delete = 0xffff
   }

   private readonly KeySym[] keyMap = new KeySym[] {
   /*None =*/ KeySym.None,
   /*Backspace =*/ KeySym.Backspace,
   /*Tab = */KeySym.Tab,
   /*Enter = */KeySym.Enter,
   /*Pause = */KeySym.Pause,
   /*CapsLock = */KeySym.CapsLock,
   /*Escape = */KeySym.Escape,
   /*Space = */KeySym.Space,
   /*PageUp = */KeySym.PageUp,
   /*PageDown = */KeySym.PageDown,
   /*End = */KeySym.End,
   /*Home = */KeySym.Home,
   /*Left = */KeySym.Left,
   /*Up = */KeySym.Up,
   /*Right = */KeySym.Right,
   /*Down = */KeySym.Down,
   /*PrintScreen = */KeySym.PrintScreen,
   /*Insert = */KeySym.Insert,
   /*Delete = */KeySym.Delete,
   /*Digit0 = */KeySym.Digit0,
   /*Digit1 = */KeySym.Digit1,
   /*Digit2 = */KeySym.Digit2,
   /*Digit3 = */KeySym.Digit3,
   /*Digit4 = */KeySym.Digit4,
   /*Digit5 = */KeySym.Digit5,
   /*Digit6 = */KeySym.Digit6,
   /*Digit7 = */KeySym.Digit7,
   /*Digit8 = */KeySym.Digit8,
   /*Digit9 = */KeySym.Digit9,
   /*A = */KeySym.A,
   /*B = */KeySym.B,
   /*C = */KeySym.C,
   /*D = */KeySym.D,
   /*E = */KeySym.E,
   /*F = */KeySym.F,
   /*G = */KeySym.G,
   /*H = */KeySym.H,
   /*I = */KeySym.I,
   /*J = */KeySym.J,
   /*K = */KeySym.K,
   /*L = */KeySym.L,
   /*M = */KeySym.M,
   /*N = */KeySym.N,
   /*O = */KeySym.O,
   /*P = */KeySym.P,
   /*Q = */KeySym.Q,
   /*R = */KeySym.R,
   /*S = */KeySym.S,
   /*T = */KeySym.T,
   /*U = */KeySym.U,
   /*V = */KeySym.V,
   /*W = */KeySym.W,
   /*X = */KeySym.X,
   /*Y = */KeySym.Y,
   /*Z = */KeySym.Z,
   /*LWindow = */KeySym.LeftSuper,
   /*RWindow = */KeySym.RightSuper,
   /*ContextMenu = */KeySym.Menu,
   /*NumPad0 = */KeySym.KeyPad0,
   /*NumPad1 = */KeySym.KeyPad1,
   /*NumPad2 = */KeySym.KeyPad2,
   /*NumPad3 = */KeySym.KeyPad3,
   /*NumPad4 = */KeySym.KeyPad4,
   /*NumPad5 = */KeySym.KeyPad5,
   /*NumPad6 = */KeySym.KeyPad6,
   /*NumPad7 = */KeySym.KeyPad7,
   /*NumPad8 = */KeySym.KeyPad8,
   /*NumPad9 = */KeySym.KeyPad9,
   /*NumPadMultiply = */KeySym.KeyPadAsterisk,
   /*NumPadAdd = */KeySym.KeyPadPlus,
   /*NumPadEnter = */KeySym.KeyPadEnter,
   /*NumPadSubtract = */KeySym.KeyPadMinus,
   /*NumPadDecimal = */KeySym.KeyPadDot,
   /*NumPadDivide = */KeySym.KeyPadSlash,
   /*F1 = */KeySym.F1,
   /*F2 = */KeySym.F2,
   /*F3 = */KeySym.F3,
   /*F4 = */KeySym.F4,
   /*F5 = */KeySym.F5,
   /*F6 = */KeySym.F6,
   /*F7 = */KeySym.F7,
   /*F8 = */KeySym.F8,
   /*F9 = */KeySym.F9,
   /*F10 = */KeySym.F10,
   /*F11 = */KeySym.F11,
   /*F12 = */KeySym.F12,
   /*NumLock = */KeySym.NumLock,
   /*ScrollLock = */KeySym.ScrollLock,
   /*LShift = */KeySym.LeftShift,
   /*RShift = */KeySym.RightShift,
   /*LControl = */KeySym.LeftCtrl,
   /*RControl = */KeySym.RightCtrl,
   /*LAlt = */KeySym.LeftAlt,
   /*RAlt = */KeySym.RightAlt,
   /*SemiColon = */KeySym.SemiColon,
   /*Equal = */KeySym.Equal,
   /*Comma = */KeySym.Comma,
   /*Minus = */KeySym.Minus,
   /*Period = */KeySym.Period,
   /*Slash = */KeySym.Slash,
   /*Backtick = */KeySym.Grave,
   /*LeftBracket = */KeySym.LeftBracket,
   /*BackSlash = */KeySym.Backslash,
   /*RightBracket = */KeySym.RightBracket,
   /*Quote = */KeySym.Quote
   };
   [DllImport("libX11")]
   private static extern IntPtr XOpenDisplay(string display_name);
   [DllImport("libX11")]
   private static extern void XQueryKeymap(IntPtr display, System.UInt32[] keys);
   [DllImport("libX11")]
   private static extern IntPtr XGetKeyboardMapping(IntPtr display, byte first_keycode, int keycode_count, out int keysyms_per_keycode);
   [DllImport("libX11")]
   private static extern void XDisplayKeycodes(IntPtr display, out int min_keycodes, out int max_keycodes);
   [DllImport("libX11")]
   private static extern IntPtr XFree(IntPtr data);

   private System.Collections.Generic.Dictionary&lt;KeySym, byte&gt; symbolMap;
   private KeySym[] revSymbolMap;
   private System.Collections.Generic.Dictionary&lt;KeySym, Key&gt; revKeyMap;
   private IntPtr display;
   private System.UInt32[] currentKeys = new System.UInt32[8];

   public XKeyboard()
   {
      display = XOpenDisplay(null);
      GetKeyboardMap();
   }

   private void GetKeyboardMap()
   {
      int minkey, maxkey;
      int keysyms_per_keycode;
      XDisplayKeycodes(display, out minkey, out maxkey);
      int count = maxkey - minkey + 1;
      IntPtr kmap_ptr = XGetKeyboardMapping(display, (byte)minkey, count, out keysyms_per_keycode);
      int[] kmap = new int[keysyms_per_keycode * count];
      System.Runtime.InteropServices.Marshal.Copy(kmap_ptr, kmap, 0, count * keysyms_per_keycode);
      XFree(kmap_ptr);

      symbolMap = new System.Collections.Generic.Dictionary&lt;KeySym, byte&gt;();
      revSymbolMap = new KeySym[256];
      for (int i = 0; i &lt; count * keysyms_per_keycode; i++)
      {
         byte keyCode = (byte)(i / keysyms_per_keycode + minkey);
         int keySym = kmap[i];
         if (keySym == 0)
            continue;
         if ((System.Enum.IsDefined(typeof(KeySym), keySym)))
         {
            KeySym symbol = (KeySym)keySym;
            if (!symbolMap.ContainsKey(symbol))
               symbolMap[symbol] = keyCode;
            if (revSymbolMap[keyCode] == 0)
               revSymbolMap[keyCode] = symbol;
         }
      }
      foreach (KeySym sym in Enum.GetValues(typeof(KeySym)))
         if (!symbolMap.ContainsKey(sym))
            symbolMap[sym] = 0;
      revKeyMap = new System.Collections.Generic.Dictionary&lt;KeySym, Key&gt;();
      foreach (Key k in Enum.GetValues(typeof(Key)))
      {
         revKeyMap[keyMap[(int)k]] = k;
      }
   }

   public void Poll()
   {
      XQueryKeymap(display, currentKeys);
   }

   public bool IsKeyDown(Key key)
   {
      return this[keyMap[(int)key]];
   }

   public bool this[Key key]
   {
      get
      {
         return IsKeyDown(key);
      }
   }

   private bool this[KeySym key]
   {
      get
      {
         byte keyCode = symbolMap[key];
         return 0 != ((currentKeys[(keyCode &gt;&gt; 5)] &gt;&gt; (keyCode % 32)) &amp; 1);
      }
   }

   public Key GetFirstKey()
   {
      for (int i = 0; i &lt; currentKeys.Length; i++)
      {
         if (currentKeys[i] != 0)
         {
            uint val = currentKeys[i];
            int bit;
            for (bit = 0; 0 == ((val &gt;&gt; bit) &amp; 1); bit++)
               ;
            return revKeyMap[revSymbolMap[(byte)((i &lt;&lt; 5) | bit)]];
         }
      }
      return Key.None;
   }
}</Text>
  </SourceCode>
  <SourceCode Name="Frameset.cs" IsCustomObject="false">
    <Text>/// &lt;summary&gt;Provides objects that encapsulate the functionality of the framesets defined at design time.&lt;/summary&gt;
/// &lt;remarks&gt;The class is entirely generated based on the framesets defined in the project. Static members exist to create/access instances of each frameset, and each instance represents one specific frameset. Only one instance (maximum) of each frameset will ever exist per display.&lt;/remarks&gt;
[System.Serializable()]
public partial class Frameset : System.Runtime.Serialization.ISerializable
{

   private Frame[] m_arFrames;

   private Display m_Display;

   private string Name;

   private static System.Collections.Hashtable m_CachedFramesets = new System.Collections.Hashtable();

   private Frameset(string Name, Display disp)
   {
      this.Name = Name;
      using (System.IO.Stream framesetStream = System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("Framesets." + Name + ".bin"))
      {
         using (System.IO.BinaryReader framesetReader = new System.IO.BinaryReader(framesetStream))
         {
            int sheetCount = framesetReader.ReadInt32();
            string[] sheetNames = new string[sheetCount];
            for (int sheetIndex = 0; sheetIndex &lt; sheetCount; sheetIndex++)
            {
               sheetNames[sheetIndex] = framesetReader.ReadString();
            }
            int frameCount = framesetReader.ReadInt32();
            this.m_arFrames = new Frame[frameCount];
            for (int frameIndex = 0; frameIndex &lt; frameCount; frameIndex++)
            {
               switch (framesetReader.ReadByte())
               {
                  case 0:
                     m_arFrames[frameIndex] = new Frame(disp.GetTextureRef(sheetNames[framesetReader.ReadInt16()]),
                        framesetReader.ReadInt16(), new System.Drawing.Rectangle(
                           framesetReader.ReadInt32(), framesetReader.ReadInt32(), framesetReader.ReadInt16(), framesetReader.ReadInt16()));
                     break;
                  case 1:
                     m_arFrames[frameIndex] = new Frame(disp.GetTextureRef(sheetNames[framesetReader.ReadInt16()]),
                        framesetReader.ReadInt16(), new System.Drawing.Rectangle(
                           framesetReader.ReadInt32(), framesetReader.ReadInt32(), framesetReader.ReadInt16(), framesetReader.ReadInt16()),
                           framesetReader.ReadInt32());
                     break;
                  case 2:
                     m_arFrames[frameIndex] = new Frame(disp.GetTextureRef(sheetNames[framesetReader.ReadInt16()]),
                        framesetReader.ReadInt16(), new System.Drawing.PointF[] {
                           new System.Drawing.PointF(framesetReader.ReadSingle(), framesetReader.ReadSingle()), 
                           new System.Drawing.PointF(framesetReader.ReadSingle(), framesetReader.ReadSingle()), 
                           new System.Drawing.PointF(framesetReader.ReadSingle(), framesetReader.ReadSingle()), 
                           new System.Drawing.PointF(framesetReader.ReadSingle(), framesetReader.ReadSingle())}, new System.Drawing.Rectangle(
                           framesetReader.ReadInt32(), framesetReader.ReadInt32(), framesetReader.ReadInt16(), framesetReader.ReadInt16()));
                     break;
                  case 3:
                     m_arFrames[frameIndex] = new Frame(disp.GetTextureRef(sheetNames[framesetReader.ReadInt16()]),
                        framesetReader.ReadInt16(), new System.Drawing.PointF[] {
                           new System.Drawing.PointF(framesetReader.ReadSingle(), framesetReader.ReadSingle()), 
                           new System.Drawing.PointF(framesetReader.ReadSingle(), framesetReader.ReadSingle()), 
                           new System.Drawing.PointF(framesetReader.ReadSingle(), framesetReader.ReadSingle()), 
                           new System.Drawing.PointF(framesetReader.ReadSingle(), framesetReader.ReadSingle())}, new System.Drawing.Rectangle(
                           framesetReader.ReadInt32(), framesetReader.ReadInt32(), framesetReader.ReadInt16(), framesetReader.ReadInt16()),
                           framesetReader.ReadInt32());
                     break;
               }
            }
         }
      }
      this.m_Display = disp;
   }

   /// &lt;summary&gt;Return the &lt;see cref="Frame"/&gt; object defining the frame at the specified 0-based index within this frameset&lt;/summary&gt;
   public Frame this[int index]
   {
      get
      {
         return this.m_arFrames[(index % this.m_arFrames.Length)];
      }
   }

   /// &lt;summary&gt;Return the number of frames in this frameset.&lt;/summary&gt;
   public int Count
   {
      get
      {
         return this.m_arFrames.Length;
      }
   }

   public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
   {
      info.SetType(typeof(FramesetRef));
      info.AddValue("FramesetName", this.Name);
   }

   /// &lt;summary&gt;Retrieves an object representing the frameset by name&lt;/summary&gt;
   /// &lt;param name="Name"&gt;Specifies the name of the frameset as defined in the project at design time.&lt;/param&gt;
   /// &lt;param name="disp"&gt;Specifies the display to which the frameset is linked. This is used to construct the hardware objects that support the frameset if the graphics for the frameset have not been loaded into the hardware&lt;/param&gt;
   /// &lt;returns&gt;An instance of the &lt;see cref="Frameset"/&gt; class.&lt;/returns&gt;
   /// &lt;remarks&gt;If the specified frameset has already been constructed for the specified display, it will be returned from the cache, otherwise a new instance will be constructed and added to the cache before returning.&lt;/remarks&gt;
   public static Frameset GetFrameset(string Name, Display disp)
   {
      Frameset result = ((Frameset)(Frameset.m_CachedFramesets[Name]));
      if ((result == null))
      {
         result = new Frameset(Name, disp);
         Frameset.m_CachedFramesets[Name] = result;
      }
      return result;
   }
}
/// &lt;summary&gt;Provides serialization services for &lt;see cref="Frameset" /&gt; to allow objects that reference framesets to be saved without saving everything that is referenced by the frameset.&lt;/summary&gt;
[System.Serializable()]
public partial class FramesetRef : System.Runtime.Serialization.IObjectReference, System.Runtime.Serialization.ISerializable
{

   private string m_FramesetName;

   private FramesetRef(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
   {
      this.m_FramesetName = info.GetString("FramesetName");
   }

   public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
   {
      throw new System.NotImplementedException("Unexpected serialization call");
   }

   public object GetRealObject(System.Runtime.Serialization.StreamingContext context)
   {
      return Frameset.GetFrameset(this.m_FramesetName, Project.GameWindow.GameDisplay);
   }
}
</Text>
  </SourceCode>
  <SourceCode Name="LightSpriteBase.cs" IsCustomObject="false">
    <Text>using System;
using System.ComponentModel;

/// &lt;summary&gt;
/// Provides functionality and extra properties for sprites that represent dynamic light sources.
/// &lt;/summary&gt;
public abstract partial class LightSpriteBase : SpriteBase
{
   /// &lt;summary&gt;
   /// Constant falloff works in conjunction with &lt;see cref="linearFalloff"/&gt; and &lt;see cref="quadraticFalloff"/&gt;
   /// to determine how this light source extends over distance.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;
   /// The sum of these 3 values should be about 1.0. Lower values extend more light and higher values
   /// extend less light. Google Constant Linear Quadratic Lighting Falloff for details.
   /// &lt;/remarks&gt;
   public float constantFalloff;
   /// &lt;summary&gt;
   /// Linear falloff works in conjunction with &lt;see cref="constantFalloff"/&gt; and &lt;see cref="quadraticFalloff"/&gt;
   /// to determine how this light source extends over distance.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;
   /// The sum of these 3 values should be about 1.0. Lower values extend more light and higher values
   /// extend less light. Google Constant Linear Quadratic Lighting Falloff for details.
   /// &lt;/remarks&gt;
   public float linearFalloff;
   /// &lt;summary&gt;
   /// Quadratic falloff works in conjunction with &lt;see cref="constantFalloff"/&gt; and &lt;see cref="linearFalloff"/&gt;
   /// to determine how this light source extends over distance.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;
   /// The sum of these 3 values should be about 1.0. Lower values extend more light and higher values
   /// extend less light. Google Constant Linear Quadratic Lighting Falloff for details.
   /// &lt;/remarks&gt;
   public float quadraticFalloff;
   /// &lt;summary&gt;
   /// Horizontal offset relative to this sprite's location at which this light source points.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;
   /// Aim is mostly noticeable when &lt;see cref="apertureFocus"/&gt; is used to focus the light in one direction,
   /// however, if aim is not set, the light will not be visible. The size of the aim vector does not matter
   /// because it is normalized to a unit vector; only the direction matters.
   /// &lt;seealso cref="aimY"/&gt;&lt;seealso cref="aimZ"/&gt;
   /// &lt;/remarks&gt;
   public float aimX;
   /// &lt;summary&gt;
   /// Vertical offset relative to this sprite's location at which this light source points.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;
   /// Positive values point down, and negative values point up.
   /// Aim is mostly noticeable when &lt;see cref="apertureFocus"/&gt; is used to focus the light in one direction,
   /// however, if aim is not set, the light will not be visible. The size of the aim vector does not matter
   /// because it is normalized to a unit vector; only the direction matters.
   /// &lt;seealso cref="aimX"/&gt;&lt;seealso cref="aimZ"/&gt;
   /// &lt;/remarks&gt;
   public float aimY;
   /// &lt;summary&gt;
   /// Depth offset relative to this sprite's location at which this light source points.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;
   /// Positive values point from the layer toward the viewer, and negative numbers point from the viewer
   /// toward the layer, so negative numbers would be more common for this value because light sources are
   /// generally positioned (with &lt;see cref="lightZ"/&gt;) on the same side of the layer as the viewer.
   /// Aim is mostly noticeable when &lt;see cref="apertureFocus"/&gt; is used to focus the light in one direction,
   /// however, if aim is not set, the light will not be visible. The size of the aim vector does not matter
   /// because it is normalized to a unit vector; only the direction matters.
   /// &lt;seealso cref="aimX"/&gt;&lt;seealso cref="aimY"/&gt;
   /// &lt;/remarks&gt;
   public float aimZ;
   /// &lt;summary&gt;
   /// Depth position of this light source relative to the layer where the sprite resides.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;
   /// Since scrolling game sprites generally don't have a depth coordinate, but depth is important for
   /// lighting, this property is helpful in determining how light shines on the map. Common values
   /// for this property fall approximately in the range of 0.1 to 10.0. Larger values position the
   /// light farther from the map, which is useful when illuminating a large area, for example, to
   /// provide ambient light. This value combined with the &lt;see cref="SpriteBase"/&gt; base class'
   /// &lt;see cref="SpriteBase.x"/&gt; and &lt;see cref="SpriteBase.y"/&gt; values form a 3D coordinate, which work with the &lt;see
   /// cref="aimX"/&gt;, &lt;see cref="aimY"/&gt; and &lt;see cref="aimZ"/&gt; to determine the light's location and
   /// direction.
   /// &lt;/remarks&gt;
   public float lightZ;
   /// &lt;summary&gt;
   /// Determines whether and how light is focused in a particular direction.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;A value of 0 causes light to spread over a 180-degree cone (in other words, from a plane)
   /// in the direction determined by &lt;see cref="aimX"/&gt;, &lt;see cref="aimY"/&gt; and &lt;see cref="aimZ"/&gt;.
   /// Values near 1 (but less) focus the light into a narrow beam. Negative values widen the spread.
   /// Negative 1 sheds light in all directions. &lt;seealso cref="apertureSoftness"/&gt;
   /// &lt;/remarks&gt;
   public float apertureFocus;
   /// &lt;summary&gt;
   /// Determines how crisp the edges of the light cone are for lights directed by &lt;see cref="apertureFocus"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This value is essentially added to &lt;see cref="apertureFocus"/&gt; to generate two light
   /// cones that form a gradient from lit to unlit.&lt;/remarks&gt;
   public float apertureSoftness;

   /// &lt;summary&gt;
   /// Construct a new light source sprite providing all the properties of the light source and the base sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="layer"&gt;Layer that contains the sprite.&lt;/param&gt;
   /// &lt;param name="x"&gt;Initial horizontal coordinate within the layer&lt;/param&gt;
   /// &lt;param name="y"&gt;Initial vertical coordinate within the layer&lt;/param&gt;
   /// &lt;param name="dx"&gt;Initial horizontal velocity&lt;/param&gt;
   /// &lt;param name="dy"&gt;Initial vertical velocity&lt;/param&gt;
   /// &lt;param name="state"&gt;Initial state&lt;/param&gt;
   /// &lt;param name="frame"&gt;Initial frame within the initial state&lt;/param&gt;
   /// &lt;param name="active"&gt;Determines if the sprite is initially active&lt;/param&gt;
   /// &lt;param name="solidity"&gt;Which solidity definition does the sprite initially react to&lt;/param&gt;
   /// &lt;param name="color"&gt;Initial color modulation settings&lt;/param&gt;
   /// &lt;param name="constantFalloff"&gt;Initial value for &lt;see cref="constantFalloff"/&gt;&lt;/param&gt;
   /// &lt;param name="linearFalloff"&gt;Initial value for &lt;see cref="linearFalloff"/&gt;&lt;/param&gt;
   /// &lt;param name="quadraticFalloff"&gt;Initial value for &lt;see cref="quadraticFalloff"/&gt;&lt;/param&gt;
   /// &lt;param name="aimX"&gt;Initial value for &lt;see cref="aimX"/&gt;&lt;/param&gt;
   /// &lt;param name="aimY"&gt;Initial value for &lt;see cref="aimY"/&gt;&lt;/param&gt;
   /// &lt;param name="aimZ"&gt;Initial value for &lt;see cref="aimZ"/&gt;&lt;/param&gt;
   /// &lt;param name="lightZ"&gt;Initial value for &lt;see cref="lightZ"/&gt;&lt;/param&gt;
   /// &lt;param name="apertureFocus"&gt;Initial value for &lt;see cref="apertureFocus"/&gt;&lt;/param&gt;
   /// &lt;param name="apertureSoftness"&gt;Initial value for &lt;see cref="apertureSoftness"/&gt;&lt;/param&gt;
   public LightSpriteBase(LayerBase layer, double x, double y, double dx, double dy, int state, int frame,
      bool active, Solidity solidity, int color, float constantFalloff, float linearFalloff, float quadraticFalloff,
      float aimX, float aimY, float aimZ, float lightZ, float apertureFocus, float apertureSoftness)
      : base(layer, x, y, dx, dy, state, frame, active, solidity, color)
   {
      this.constantFalloff = constantFalloff;
      this.linearFalloff = linearFalloff;
      this.quadraticFalloff = quadraticFalloff;
      this.aimX = aimX;
      this.aimY = aimY;
      this.aimZ = aimZ;
      this.lightZ = lightZ;
      this.apertureFocus = apertureFocus;
      this.apertureSoftness = apertureSoftness;
   }

   /// &lt;summary&gt;
   /// Rotates the AimX and AimY of this light clockwise (+) or counterclockwise (-).
   /// &lt;/summary&gt;
   /// &lt;param name="Offset"&gt;Positive values represent clockwise rotation in 100ths of a degree;
   /// negative values represent counterclockwise rotation.&lt;/param&gt;
   [Description("Rotates the AimX and AimY of this light clockwise (+) or counterclockwise (-). Offset is in 100ths of a degree.")]
   public void RotateLight(int Offset)
   {
      OpenTK.Matrix3 m3 = OpenTK.Matrix3.CreateRotationZ(Offset * (float)Math.PI / 18000f);
      OpenTK.Vector3 v3 = new OpenTK.Vector3(aimX, aimY, aimZ);
      v3 *= m3;
      aimX = v3.X;
      aimY = v3.Y;
      aimZ = v3.Z;
   }

   static System.Collections.BitArray processedTiles;
   static System.Collections.Generic.Queue&lt;Tuple&lt;int, int&gt;&gt; tileCoords = new System.Collections.Generic.Queue&lt;Tuple&lt;int, int&gt;&gt;();
   static Wall[] walls = new Wall[LightSource.wallsPerLight];
   static OpenTK.Vector3[] wallCoords = new OpenTK.Vector3[LightSource.wallsPerLight * 2];
   static int wallCount;

   [Flags()]
   enum WallType
   {
      Top,
      Bottom,
      Left,
      Right,
      Downhill,
      Uphill,
      DownCeiling,
      UpCeiling
   }

   private class Wall
   {
      public WallType type;
      public int startX;
      public int startY;
      public int lengthInTiles;

      public static void Create(int lightCol, int lightRow, int column, int row, TileShape ts)
      {
         int edgeCoord1 = ts.GetTopSolidPixel(4, 4, 1, 1);
         int edgeCoord2 = ts.GetBottomSolidPixel(4, 4, 1, 1);

         if ((edgeCoord1 == 0) &amp;&amp; (edgeCoord2 == 3))
         {
            if (wallCount &lt; walls.Length)
            {
               if (column &gt; lightCol)
                  walls[wallCount++] = new Wall() { type = WallType.Left, startX = column, startY = row, lengthInTiles = 1 };
               else if (column &lt; lightCol)
                  walls[wallCount++] = new Wall() { type = WallType.Right, startX = column, startY = row, lengthInTiles = 1 };
            }

            if (wallCount &lt; walls.Length)
            {
               if (row &gt; lightRow)
                  walls[wallCount++] = new Wall() { type = WallType.Top, startX = column, startY = row, lengthInTiles = 1 };
               else if (row &lt; lightRow)
                  walls[wallCount++] = new Wall() { type = WallType.Bottom, startX = column, startY = row, lengthInTiles = 1 };
            }
         }
         else if (edgeCoord1 == 1) // Downhill
         {
            if ((wallCount &lt; walls.Length) &amp;&amp; (column &gt; lightCol))
               walls[wallCount++] = new Wall() { type = WallType.Left, startX = column, startY = row, lengthInTiles = 1 };

            if ((wallCount &lt; walls.Length) &amp;&amp; (row &lt; lightRow))
               walls[wallCount++] = new Wall() { type = WallType.Bottom, startX = column, startY = row, lengthInTiles = 1 };

            if ((wallCount &lt; walls.Length) &amp;&amp; (lightCol - column &gt;= lightRow - row))
               walls[wallCount++] = new Wall() { type = WallType.Downhill, startX = column, startY = row, lengthInTiles = 1 };
         }
         else if (edgeCoord1 == 2) // Uphill
         {
            if ((wallCount &lt; walls.Length) &amp;&amp; (column &lt; lightCol))
               walls[wallCount++] = new Wall() { type = WallType.Right, startX = column, startY = row, lengthInTiles = 1 };

            if ((wallCount &lt; walls.Length) &amp;&amp; (row &lt; lightRow))
               walls[wallCount++] = new Wall() { type = WallType.Bottom, startX = column, startY = row, lengthInTiles = 1 };

            if ((wallCount &lt; walls.Length) &amp;&amp; (lightCol - column &lt;= row - lightRow))
               walls[wallCount++] = new Wall() { type = WallType.Uphill, startX = column, startY = row, lengthInTiles = 1 };
         }
         else if (edgeCoord2 == 2) // UpCeiling
         {
            if ((wallCount &lt; walls.Length) &amp;&amp; (column &gt; lightCol))
               walls[wallCount++] = new Wall() { type = WallType.Left, startX = column, startY = row, lengthInTiles = 1 };

            if ((wallCount &lt; walls.Length) &amp;&amp; (row &gt; lightRow))
               walls[wallCount++] = new Wall() { type = WallType.Top, startX = column, startY = row, lengthInTiles = 1 };

            if ((wallCount &lt; walls.Length) &amp;&amp; (lightCol - column &gt;= row - lightRow))
               walls[wallCount++] = new Wall() { type = WallType.UpCeiling, startX = column, startY = row, lengthInTiles = 1 };
         }
         else if (edgeCoord2 == 1) // DownCeiling
         {
            if ((wallCount &lt; walls.Length) &amp;&amp; (column &lt; lightCol))
               walls[wallCount++] = new Wall() { type = WallType.Right, startX = column, startY = row, lengthInTiles = 1 };

            if ((wallCount &lt; walls.Length) &amp;&amp; (row &gt; lightRow))
               walls[wallCount++] = new Wall() { type = WallType.Top, startX = column, startY = row, lengthInTiles = 1 };

            if ((wallCount &lt; walls.Length) &amp;&amp; (lightCol - column &lt;= lightRow - row))
               walls[wallCount++] = new Wall() { type = WallType.DownCeiling, startX = column, startY = row, lengthInTiles = 1 };
         }
      }

      /// &lt;summary&gt;
      /// Extend this wall to include the specified tile with the specified shape if possible
      /// &lt;/summary&gt;
      /// &lt;param name="tileX"&gt;Column in which the tile appears&lt;/param&gt;
      /// &lt;param name="tileY"&gt;Row in which the tile appears&lt;/param&gt;
      /// &lt;param name="ts"&gt;Shape of the tile&lt;/param&gt;
      /// &lt;returns&gt;0 if this wall cannot extent into the tile without improperly disrupting lighting,
      /// 1 if this wall can extend into the tile, but does not block light to all appropriate areas of the tile,
      /// 2 if this wall exactly obstructs the light it needs to on this tile.&lt;/returns&gt;
      public int Extend(int tileX, int tileY, TileShape ts)
      {
         int retVal = 2;
         int edgeCoord;

         switch (type)
         {
            case WallType.Top:
               if ((tileY != startY) || (ts.GetTopSolidPixel(4, 4, 2, 2) &gt; 0))
                  return 0;
               break;
            case WallType.Bottom:
               if ((tileY != startY) || (ts.GetBottomSolidPixel(4, 4, 2, 2) &lt; 3))
                  return 0;
               break;
            case WallType.Left:
               if ((tileX != startX) || (ts.GetLeftSolidPixel(4, 4, 2, 2) &gt; 0))
                  return 0;
               break;
            case WallType.Right:
               if ((tileX != startX) || (ts.GetRightSolidPixel(4, 4, 2, 2) &lt; 3))
                  return 0;
               break;
            case WallType.Downhill:
               edgeCoord = ts.GetTopSolidPixel(4, 4, 1, 1);
               if (((tileX - startX) != (tileY - startY)) || (edgeCoord &gt; 1))
                  return 0;
               if (edgeCoord &lt; 1)
                  retVal = 1;
               break;
            case WallType.Uphill:
               edgeCoord = ts.GetTopSolidPixel(4, 4, 2, 2);
               if (((tileX - startX) != (startY - tileY)) || (edgeCoord &gt; 1))
                  return 0;
               if (edgeCoord &lt; 1)
                  retVal = 1;
               break;
            case WallType.DownCeiling:
               edgeCoord = ts.GetBottomSolidPixel(4, 4, 2, 2);
               if (((tileX - startX) != (tileY - startY)) || (edgeCoord &lt; 2))
                  return 0;
               if (edgeCoord &gt; 2)
                  retVal = 1;
               break;
            case WallType.UpCeiling:
               edgeCoord = ts.GetBottomSolidPixel(4, 4, 1, 1);
               if (((tileX - startX) != (startY - tileY)) || (edgeCoord &lt; 2))
                  return 0;
               if (edgeCoord &gt; 2)
                  retVal = 1;
               break;
         }

         if ((type == WallType.Left) || (type == WallType.Right))
         {
            if (tileY == startY - 1)
            {
               startY--;
               lengthInTiles++;
               return retVal;
            }
            if (tileY == startY + lengthInTiles)
            {
               lengthInTiles++;
               return retVal;
            }
            return 0;
         }
         else
         {
            if (tileX == startX - 1)
            {
               startX--;
               switch (type)
               {
                  case WallType.Downhill:
                  case WallType.DownCeiling:
                     startY--;
                     break;
                  case WallType.Uphill:
                  case WallType.UpCeiling:
                     startY++;
                     break;
               }
               lengthInTiles++;
               return retVal;
            }
            if (tileX == startX + lengthInTiles)
            {
               lengthInTiles++;
               return retVal;
            }
            return 0;
         }
      }
   }

   /// &lt;summary&gt;
   /// Calculate based on this sprite's solidity where light walls should appear within a specified radius.
   /// &lt;/summary&gt;
   /// &lt;param name="tileRadius"&gt;How many tiles away a solid tile can cause a wall to be generated.
   /// This is a square radius, so not, strictly speaking, a radius.&lt;/param&gt;
   /// &lt;remarks&gt;After this function completes, &lt;see cref="WallCoordinates"/&gt; will contain information
   /// about all the walls for this light source. Note that this information is shared among all
   /// light sources, and so should be transferred to the &lt;see cref="Display"/&gt; object before calculating
   /// walls for other light sources. Large radiuses may harm performance without improving results
   /// because there are a limited number of walls that the display can handle. Once this limit is
   /// reached, no more walls are processed regardless of whether the information for them has been
   /// calculated. However, it is possible with larger radius values to extend existing walls farther
   /// because each wall is simply a line that can be extended for any length of colinear tiles.&lt;/remarks&gt;
   public void GenerateWalls(int tileRadius)
   {
      int tileX, tileY, startX, startY;
      int tw = layer.Tileset.TileWidth;
      int th = layer.Tileset.TileHeight;
      tileX = startX = (int)((x + SolidWidth / 2) / tw);
      tileY = startY = (int)((y + SolidHeight / 2) / th);

      int tileCount = layer.VirtualColumns * layer.VirtualRows;
      if ((processedTiles == null) || (processedTiles.Length &lt; tileCount))
         processedTiles = new System.Collections.BitArray(tileCount);
      else
         processedTiles.SetAll(false);
      tileCoords.Clear();

      // Mark the first tile as processsed
      EnqueueCoord(tileX, tileY);
      if (tileCoords.Count &gt; 0)
         tileCoords.Dequeue();
      else return;

      wallCount = 0;

      do
      {
         int offsetV = Math.Sign(tileY - startY);
         int offsetH = Math.Sign(tileX - startX);

         if ((Math.Abs(tileX - startX) &lt; tileRadius) &amp;&amp; (Math.Abs(tileY - startY) &lt; tileRadius))
         {
            bool horizontalFirst = false;

            if (offsetH &gt; offsetV)
               horizontalFirst = true;

            if (offsetH == 0) offsetH = -1;
            if (offsetV == 0) offsetV = -1;

            if (horizontalFirst)
            {
               EnqueueCoord(tileX + offsetH, tileY);
               EnqueueCoord(tileX - offsetH, tileY);
            }

            EnqueueCoord(tileX, tileY + offsetV);
            EnqueueCoord(tileX, tileY - offsetV);

            if (!horizontalFirst)
            {
               EnqueueCoord(tileX + offsetH, tileY);
               EnqueueCoord(tileX - offsetH, tileY);
            }
         }

         Tuple&lt;int, int&gt; currentCoord = tileCoords.Dequeue();
         tileX = currentCoord.Item1;
         tileY = currentCoord.Item2;

         TileShape ts = GetTileShapeAt(tileX, tileY);

         int wallMatch = 0;

         for (int i = 0; i &lt; wallCount; i++)
            if (walls[i].Extend(tileX, tileY, ts) == 2)
            {
               wallMatch = 2;
               break;
            }

         if ((wallMatch != 2) &amp;&amp; (wallCount &lt; walls.Length))
            Wall.Create(startX, startY, tileX, tileY, ts);
      } while (tileCoords.Count &gt; 0);

      for (int i = 0; i &lt; wallCount; i++)
      {
         switch (walls[i].type)
         {
            case WallType.DownCeiling:
            case WallType.Downhill:
            case WallType.Left:
            case WallType.Top:
               wallCoords[i * 2] = new OpenTK.Vector3(walls[i].startX * tw, walls[i].startY * th, 1);
               break;
            case WallType.Bottom:
               wallCoords[i * 2] = new OpenTK.Vector3(walls[i].startX * tw, walls[i].startY * th + th, 1);
               break;
            case WallType.UpCeiling:
            case WallType.Uphill:
               wallCoords[i * 2] = new OpenTK.Vector3(walls[i].startX * tw, walls[i].startY * th + th, 1);
               break;
            case WallType.Right:
               wallCoords[i * 2] = new OpenTK.Vector3(walls[i].startX * tw + tw, walls[i].startY * th, 1);
               break;
         }
         switch (walls[i].type)
         {
            case WallType.Top:
               wallCoords[i * 2 + 1] = new OpenTK.Vector3((walls[i].startX + walls[i].lengthInTiles) * tw, walls[i].startY * th, 1);
               break;
            case WallType.UpCeiling:
            case WallType.Uphill:
               wallCoords[i * 2 + 1] = new OpenTK.Vector3((walls[i].startX + walls[i].lengthInTiles) * tw, (walls[i].startY - walls[i].lengthInTiles + 1) * th, 1);
               break;
            case WallType.Bottom:
               wallCoords[i * 2 + 1] = new OpenTK.Vector3((walls[i].startX + walls[i].lengthInTiles) * tw, walls[i].startY * th + th, 1);
               break;
            case WallType.Downhill:
            case WallType.DownCeiling:
               wallCoords[i * 2 + 1] = new OpenTK.Vector3((walls[i].startX + walls[i].lengthInTiles) * tw, (walls[i].startY + walls[i].lengthInTiles) * th, 1);
               break;
            case WallType.Left:
               wallCoords[i * 2 + 1] = new OpenTK.Vector3(walls[i].startX * tw, (walls[i].startY + walls[i].lengthInTiles) * th, 1);
               break;
            case WallType.Right:
               wallCoords[i * 2 + 1] = new OpenTK.Vector3(walls[i].startX * tw + tw, (walls[i].startY + walls[i].lengthInTiles) * th, 1);
               break;
         }
      }
   }

   /// &lt;summary&gt;
   /// Provides access to the current set of light walls generated by &lt;see cref="GenerateWalls(int)"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Note that these coordinates are shared by all light sources, and shoudl therefore
   /// be transferred or processed before generating coordinates for another light source. For
   /// performance reasons, the size of this collection is constant, and the number of actual
   /// light sources calculated is determined with &lt;see cref="WallCoordinateCount"/&gt;. The
   /// coordinates in this list are always paired with the first coordinate representing one end
   /// of a wall and the second coordinate representing the other end of a wall.
   /// &lt;seealso cref="Display.SetLightSource(int, OpenTK.Vector2, OpenTK.Vector3, System.Drawing.Color, float, float, float, float, float, float, OpenTK.Vector3[], int)"/&gt;
   /// &lt;/remarks&gt;
   public static OpenTK.Vector3[] WallCoordinates
   {
      get
      {
         return wallCoords;
      }
   }

   /// &lt;summary&gt;
   /// Returns how many coordinates were generated by the last call to &lt;see cref="GenerateWalls(int)"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The number of walls is always half the number of coordinates.
   /// &lt;seealso cref="Display.SetLightSource(int, OpenTK.Vector2, OpenTK.Vector3, System.Drawing.Color, float, float, float, float, float, float, OpenTK.Vector3[], int)"/&gt;
   /// &lt;/remarks&gt;
   public static int WallCoordinateCount
   {
      get
      {
         return wallCount * 2;
      }
   }

   private void EnqueueCoord(int x, int y)
   {
      if ((x &gt;= 0) &amp;&amp; (y &gt;= 0) &amp;&amp; (x &lt; layer.VirtualColumns) &amp;&amp; (y &lt; layer.VirtualRows) &amp;&amp; !processedTiles[y * layer.VirtualColumns + x])
      {
         tileCoords.Enqueue(new Tuple&lt;int, int&gt;(x, y));
         processedTiles[y * layer.VirtualColumns + x] = true;
      }
   }

   private TileShape GetTileShapeAt(int x, int y)
   {
      if ((x &lt; 0) || (y &lt; 0) || (x &gt;= layer.VirtualColumns) || (y &gt;= layer.VirtualColumns))
         return EmptyTileShape.Value;
      return m_solidity.GetCurrentTileShape(layer.GetTile(x, y));
   }
}</Text>
  </SourceCode>
  <SourceCode Name="Shader.cs" IsCustomObject="false">
    <Text>using System;
using System.Collections;
using System.Collections.Generic;
using OpenTK;
using OpenTK.Graphics;
using OpenTK.Graphics.OpenGL;

/// &lt;summary&gt;
/// Encapsulates the information that we want to track for every tile corner drawn
/// &lt;/summary&gt;
struct TileVertex
{
   public const int Size = 8 * 4; // size of struct in bytes

   private readonly Vector2 position;
   private readonly Vector2 source;
   private readonly Color4 color;

   public TileVertex(float x, float y, float srcX, float srcY)
      : this(x, y, srcX, srcY, Color4.White)
   {
   }

   public TileVertex(float x, float y, float srcX, float srcY, Color4 color)
   {
      this.position = new Vector2(x, y);
      this.source = new Vector2(srcX, srcY);
      this.color = color;
   }
}

struct ColoredVertex
{
   public const int Size = 6 * 4; // size of struct in bytes

   private readonly Vector2 position;
   private readonly Color4 color;

   public ColoredVertex(Vector2 position, Color4 color)
   {
      this.position = position;
      this.color = color;
   }
   public ColoredVertex(float x, float y, Color4 color)
   {
      this.position = new Vector2(x, y);
      this.color = color;
   }

   public override string ToString()
   {
      IntPtr block = System.Runtime.InteropServices.Marshal.AllocCoTaskMem(50);
      System.Runtime.InteropServices.Marshal.StructureToPtr(this, block, false);
      byte[] bytes = new byte[64];
      System.Runtime.InteropServices.Marshal.Copy(block, bytes, 0, 64);
      System.Runtime.InteropServices.Marshal.FreeCoTaskMem(block);
      System.Text.StringBuilder sb = new System.Text.StringBuilder();
      for (int i = 0; i &lt; bytes.Length; i += 4)
      {
         sb.Append(string.Format("({0})", BitConverter.ToSingle(bytes, i)));
      }
      return sb.ToString();
   }
}

/// &lt;summary&gt;
/// Collects vertices used in determining the locations of the corners of all the graphics being
/// drawn in a drawing operation.
/// &lt;/summary&gt;
/// &lt;typeparam name="TVertex"&gt;&lt;/typeparam&gt;
sealed class VertexBuffer&lt;TVertex&gt; : IDisposable
where TVertex : struct // vertices must be structs so we can copy them to GPU memory easily
{
   private readonly int vertexSize;
   private TVertex[] vertices = new TVertex[4];

   private int count;

   private int handle = -1;

   public VertexBuffer(int vertexSize)
   {
      this.vertexSize = vertexSize;

      // generate the actual Vertex Buffer Object
      this.handle = GL.GenBuffer();
      Display.CheckError();
   }

   public void AddVertex(TVertex v)
   {
      // resize array if too small
      if (this.count == this.vertices.Length)
         Array.Resize(ref this.vertices, this.count * 2);
      // add vertex
      this.vertices[count] = v;
      this.count++;
   }

   public void Bind()
   {
      if (handle &lt; 0)
         throw new ObjectDisposedException(this.GetType().Name);
      // make this the active array buffer
      GL.BindBuffer(BufferTarget.ArrayBuffer, this.handle);
      Display.CheckError();
   }

   public void BufferData()
   {
      // copy contained vertices to GPU memory
      GL.BufferData(BufferTarget.ArrayBuffer, (IntPtr)(this.vertexSize * this.count),
          this.vertices, BufferUsageHint.StreamDraw);
      Display.CheckError();
   }

   public void Draw(PrimitiveType primitive)
   {
      GL.DrawArrays(primitive, 0, this.count);
      Display.CheckError();
   }

   public void Clear()
   {
      count = 0;
   }

   #region IDisposable Support
   void Dispose(bool disposing)
   {
      if (handle &gt;= 0)
      {
         int curHandle;
         GL.GetInteger(GetPName.ArrayBufferBinding, out curHandle);
         Display.CheckError();
         GL.DeleteBuffer(handle);
         Display.CheckError();
         if (curHandle == handle)
         {
            GL.BindBuffer(BufferTarget.ArrayBuffer, 0);
            Display.CheckError();
         }
         handle = -1;
      }
   }

   ~VertexBuffer()
   {
      // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
      Dispose(false);
   }

   public void Dispose()
   {
      // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
      Dispose(true);
      GC.SuppressFinalize(this);
   }
   #endregion
}

/// &lt;summary&gt;
/// Encapsulates an error occurring while compiling or linking an OpenGL shader.
/// &lt;/summary&gt;
public class ShaderException : Exception
{
   public ShaderException(string message) : base(message) { }
}

/// &lt;summary&gt;
/// Encapsulates a single OpenGL shader, for example, a fragment shader or vertex shader.
/// &lt;/summary&gt;
public sealed class Shader : IDisposable
{
   private int handle;

   /// &lt;summary&gt;
   /// Return the internal handle that uniquely identifies this shader to OpenGL.
   /// &lt;/summary&gt;
   public int Handle
   {
      get
      {
         if (this.handle &lt; 0)
            throw new ObjectDisposedException(this.GetType().Name);
         return this.handle;
      }
   }

   private const string CodeVertexTextured = @"#version 130
      // a projection transformation to apply to the vertex' position
      uniform mat4 projectionMatrix;

      // attributes of our vertex
      in vec2 vPosition;
      in vec2 vSrc;
      in vec4 vColor;

      out vec2 vTex;  // must match name in fragment shader
      out vec4 fColor; // must match name in fragment shader

      void main()
      {
         // gl_Position is a special variable of OpenGL that must be set
         gl_Position = projectionMatrix * vec4(vPosition, -1.0, 1.0);
         vTex = vSrc;
         fColor = vColor;
      }";

   private static string CodeFragmentGeneral1 = @"#version 130
      in vec2 vTex; // must match name in vertex shader
      in vec4 fColor; // must match name in vertex shader

      out vec4 fragColor; // first out variable is automatically written to the screen

      uniform sampler2D tex;
      uniform sampler2D norm;

      #define MAX_LIGHTS " + LightSources.MAX_LIGHTS + @"
      #define MAX_WALLS " + LightSource.wallsPerLight + @"
                
      struct Light {
         vec3 position;
         vec4 color;
         vec3 falloff;
         vec3 aim;
         float aperture;
         float aperturesoftness;
         vec3 wall[MAX_WALLS * 2];
      };
                
      uniform Light lights[MAX_LIGHTS];

      void main()
      {
         vec4 DiffuseColor = texelFetch(tex, ivec2(vTex.x, vTex.y), 0);
         if (DiffuseColor.a == 0)
            discard;
         DiffuseColor *= fColor;";

   private const string CodeFragmentNormal2 = @"
         vec4 NormalMap = texelFetch(norm, ivec2(vTex.x, vTex.y), 0);";

   // We don't have vertically inverted normal maps, but if we did, this would account for it:
   // NormalMap.g = 1.0 - NormalMap.g;";

   private const string CodeFragmentGeneral3 = @"
         vec3 FinalColor = vec3(0,0,0);

         for (int i=0; i&lt;MAX_LIGHTS; i++)
         {
            vec3 LightDir = vec3((lights[i].position.xy - gl_FragCoord.xy) / vec2(200.0, 200.0).xy, lights[i].position.z);
            float D = length(LightDir);";

   private const string CodeFragmentNormal4 = @"
            vec3 N = normalize(NormalMap.rgb * 2.0 - 1.0);
            vec3 L = normalize(LightDir);
            vec3 Diffuse = (lights[i].color.rgb * lights[i].color.a) * max(dot(N, L), 0.0);";

   private const string CodeFramentFlat4 = @"
            vec3 Diffuse = lights[i].color.rgb * lights[i].color.a;";


   private const string CodeFragmentGeneral5 = @"
            vec3 sd = normalize(vec3(gl_FragCoord.xy, lights[i].aim.z) - lights[i].position);
            vec3 a = normalize(lights[i].aim);
            float Attenuation = smoothstep(lights[i].aperture, lights[i].aperture + lights[i].aperturesoftness, dot(sd,a))
                  / (lights[i].falloff.x + (lights[i].falloff.y*D) + (lights[i].falloff.z*D*D) );
            vec3 Intensity = Diffuse * Attenuation;

            float shadow = 0;
            for (int w=0; w&lt;MAX_WALLS; w++)
            {
               vec2 t2l = lights[i].position.xy - gl_FragCoord.xy;
               vec2 t2w0 = lights[i].wall[w*2].xy - gl_FragCoord.xy;
               vec2 t2w1 = lights[i].wall[w*2+1].xy - gl_FragCoord.xy;
               vec2 wall1 = lights[i].wall[w*2+1].xy - lights[i].wall[w*2].xy;
               vec2 w12l = lights[i].position.xy - lights[i].wall[w*2].xy;
               vec2 w12t = gl_FragCoord.xy - lights[i].wall[w*2].xy;
               float dp1 = dot(normalize(vec2(t2l.y, -t2l.x)), normalize(t2w0)); // &gt;0 when ray from target to light intersects ray from wall vertex 0 to 1
               float dp2 = dot(normalize(vec2(-t2l.y, t2l.x)), normalize(t2w1)); // &gt;0 when ray from target to light intersects ray from wall vertex 1 to 0
               float dp3 = 1-sign(abs(sign(dot(vec2(wall1.y, -wall1.x), w12l)) + sign(dot(vec2(wall1.y, -wall1.x), w12t)))); // 0 if light is on the same side of the wall, 1 otherwise
               float f1 = smoothstep(0, 2 - lights[i].wall[w*2].z * 2, dp1 * sign(dp2)) * smoothstep(0, 2 - lights[i].wall[w*2+1].z * 2, dp2 * sign(dp1));
               shadow = min(1, shadow + dp3 * f1); //smoothstep(-.002, 0, dp1 * dp2));
            }
            Intensity = (1 - shadow) * Intensity;";
   private const string CodeFragmentNormal6 = @"
            FinalColor += mix(DiffuseColor.rgb, max(vec3(0,0,0), DiffuseColor.rgb * Intensity), NormalMap.a);";
   private const string CodeFragmentFlat6 = @"
            FinalColor += max(vec3(0,0,0), DiffuseColor.rgb * Intensity);";
   private const string CodeFragmentGeneral7 = @"
         }
         fragColor = vec4(FinalColor, DiffuseColor.a);
      }";

   private const string CodeVertexSolid = @"#version 130
      uniform mat4 projectionMatrix;
      in vec2 vPosition;
      in vec4 vColor;
      out vec4 fColor;
      void main()
      {
         gl_Position = projectionMatrix * vec4(vPosition, -1.0, 1.0);
         fColor = vColor;
      }";

   private const string CodeFragmentSolid = @"#version 130
      in vec4 fColor;
      out vec4 fragColor;            
      void main()
      {
         fragColor = fColor;
      }";

   private const string CodeFragmentNoLights = @"#version 130
      in vec2 vTex;  // must match name in vertex shader
      in vec4 fColor;
      out vec4 fragColor;            
      uniform sampler2D tex;
      void main()
      {
         vec4 DiffuseColor = texelFetch(tex, ivec2(vTex.x, vTex.y), 0);
         if (DiffuseColor.a == 0)
            discard;
         DiffuseColor *= fColor;
         fragColor = DiffuseColor;
      }";

   /// &lt;summary&gt;
   /// Enumerates all the pre-implemented shaders provided by SGDK2
   /// &lt;/summary&gt;
   public enum ShaderCode
   {
      /// &lt;summary&gt;
      /// Vertex shader used when drawing tiles to include pixels from a graphic sheet while drawing.
      /// &lt;/summary&gt;
      VertexShaderTextured,
      /// &lt;summary&gt;
      /// Vertex shader used when drawing lines and rectangles that aren't textured.
      /// &lt;/summary&gt;
      VertexShaderSolidColors,
      /// &lt;summary&gt;
      /// Fragment shader used when drawing tiles from a graphic sheet that has a normal map associated with it.
      /// &lt;/summary&gt;
      FragmentShaderWithNormals,
      /// &lt;summary&gt;
      /// Fragment shader used when drawing tiles from a graphic sheet that does not have a normal map associated with it.
      /// &lt;/summary&gt;
      FragmentShaderFlat,
      /// &lt;summary&gt;
      /// Fragment shader used when drawing non-textured graphics like lines and rectangles.
      /// &lt;/summary&gt;
      FragmentShaderSolid,
      /// &lt;summary&gt;
      /// Fragment shader used when drawing textured gaphics, but lighting (and bump mapping) is disabled.
      /// &lt;/summary&gt;
      FragmentShaderNoLights
   }

   /// &lt;summary&gt;
   /// Compile and return a shader object using the provided &lt;see cref="ShaderCode"/&gt; object.
   /// &lt;/summary&gt;
   /// &lt;param name="code"&gt;Determines which code should be the basis for this shader.&lt;/param&gt;
   /// &lt;returns&gt;&lt;see cref="Shader"/&gt; object conencted to an OpenGL shader via a &lt;see cref="Handle"/&gt; value.&lt;/returns&gt;
   public static Shader CreateShader(ShaderCode code)
   {
      switch (code)
      {
         case ShaderCode.VertexShaderTextured:
            return new Shader(ShaderType.VertexShader, CodeVertexTextured);
         case ShaderCode.VertexShaderSolidColors:
            return new Shader(ShaderType.VertexShader, CodeVertexSolid);
         case ShaderCode.FragmentShaderWithNormals:
            return new Shader(ShaderType.FragmentShader, CodeFragmentGeneral1 + CodeFragmentNormal2 +
               CodeFragmentGeneral3 + CodeFragmentNormal4 + CodeFragmentGeneral5 + CodeFragmentNormal6 + CodeFragmentGeneral7);
         case ShaderCode.FragmentShaderFlat:
            return new Shader(ShaderType.FragmentShader, CodeFragmentGeneral1 + CodeFragmentGeneral3 +
               CodeFramentFlat4 + CodeFragmentGeneral5 + CodeFragmentFlat6 + CodeFragmentGeneral7);
         case ShaderCode.FragmentShaderSolid:
            return new Shader(ShaderType.FragmentShader, CodeFragmentSolid);
         case ShaderCode.FragmentShaderNoLights:
            return new Shader(ShaderType.FragmentShader, CodeFragmentNoLights);
      }
      throw new ArgumentException("Unknown shader requested");
   }

   /// &lt;summary&gt;
   /// Compile and return a shader object of the specified type using the specified shader code.
   /// &lt;/summary&gt;
   /// &lt;param name="type"&gt;Determines whether to build a vertex shader, fragment shader, or other shader.&lt;/param&gt;
   /// &lt;param name="code"&gt;Contains the code to compile.&lt;/param&gt;
   public Shader(ShaderType type, string code)
   {
      // create shader object
      this.handle = GL.CreateShader(type);

      // set source and compile shader
      GL.ShaderSource(this.handle, code);
      Display.CheckError();
      GL.CompileShader(this.handle);
      Display.CheckError();
      string info;
      GL.GetShaderInfoLog(this.handle, out info);
      if (!string.IsNullOrEmpty(info))
         throw new ShaderException(info);
   }

   #region IDisposable Support
   void Dispose(bool disposing)
   {
      if (handle &gt;= 0)
      {
         GL.DeleteShader(handle);
         Display.CheckError();
         handle = -1;
      }
   }

   ~Shader()
   {
      // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
      Dispose(false);
   }

   /// &lt;summary&gt;
   /// Release the resources associated with this shader, including the OpenGL shader identified by &lt;see cref="Handle"/&gt;.
   /// &lt;/summary&gt;
   public void Dispose()
   {
      // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
      Dispose(true);
      GC.SuppressFinalize(this);
   }
   #endregion
}

/// &lt;summary&gt;
/// Encapsulates an OpenGL shader program including, for example, both vertex and fragment shaders
/// &lt;/summary&gt;
public sealed class ShaderProgram : IDisposable
{
   private int handle;

   private static ShaderProgram m_NormalMappedShader;
   private static ShaderProgram m_FlatShader;
   private static ShaderProgram m_SolidShader;
   private static ShaderProgram m_NoLightShader;

   /// &lt;summary&gt;
   /// Create a shader program that includes all the shaders (vertex and fragment shaders) necessary when rendering.
   /// &lt;/summary&gt;
   /// &lt;param name="shaders"&gt;Array of shaders to be included in the program.&lt;/param&gt;
   /// &lt;remarks&gt;This is likely not useful for using directly; it is used to create
   /// pre-implemented shaders such as &lt;see cref="NormalMappedShader"/&gt;.&lt;/remarks&gt;
   public ShaderProgram(params Shader[] shaders)
   {
      // create program object
      this.handle = GL.CreateProgram();
      Display.CheckError();

      // assign all shaders
      foreach (var shader in shaders)
      {
         GL.AttachShader(this.handle, shader.Handle);
         Display.CheckError();
      }
      // link program (effectively compiles it)
      GL.LinkProgram(this.handle);
      Display.CheckError();
      string info;
      GL.GetProgramInfoLog(handle, out info);

      // detach shaders
      foreach (var shader in shaders)
      {
         GL.DetachShader(this.handle, shader.Handle);
         Display.CheckError();
      }

      if (!string.IsNullOrEmpty(info))
         throw new ShaderException(info);
   }

   private static void InitializeShaderPrograms()
   {
      Shader vs_textured = Shader.CreateShader(Shader.ShaderCode.VertexShaderTextured);
      Shader vs_solid = Shader.CreateShader(Shader.ShaderCode.VertexShaderSolidColors);
      Shader fs_normal = Shader.CreateShader(Shader.ShaderCode.FragmentShaderWithNormals);
      Shader fs_flat = Shader.CreateShader(Shader.ShaderCode.FragmentShaderFlat);
      Shader fs_solid = Shader.CreateShader(Shader.ShaderCode.FragmentShaderSolid);
      Shader fs_nolights = Shader.CreateShader(Shader.ShaderCode.FragmentShaderNoLights);

      m_NormalMappedShader = new ShaderProgram(vs_textured, fs_normal);
      m_FlatShader = new ShaderProgram(vs_textured, fs_flat);
      m_SolidShader = new ShaderProgram(vs_solid, fs_solid);
      m_NoLightShader = new ShaderProgram(vs_textured, fs_nolights);

      vs_textured.Dispose();
      vs_solid.Dispose();
      fs_normal.Dispose();
      fs_flat.Dispose();
      fs_solid.Dispose();
      fs_nolights.Dispose();
   }

   /// &lt;summary&gt;
   /// This shader is used for drawing textured graphics that have a normal map associated.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;A graphic sheet has a normal map associated with it if there is another graphic sheet
   /// whose name and the same with an added "nm" appended after a space in the SGDK2 IDE.&lt;/remarks&gt;
   public static ShaderProgram NormalMappedShader
   {
      get
      {
         if (m_NormalMappedShader == null)
            InitializeShaderPrograms();
         return m_NormalMappedShader;
      }
   }

   /// &lt;summary&gt;
   /// This shader is used for drawing textured graphics that have no normal map associated.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Lights may still affect the brightness of graphics drawn with this shader.&lt;/remarks&gt;
   public static ShaderProgram FlatShader
   {
      get
      {
         if (m_FlatShader == null)
            InitializeShaderPrograms();
         return m_FlatShader;
      }
   }

   /// &lt;summary&gt;
   /// This shader is used for drawing solid non-textured graphics such as lines and solid rectangles.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Lighting does not affect graphics drawn with this shader.&lt;/remarks&gt;
   public static ShaderProgram SolidShader
   {
      get
      {
         if (m_SolidShader == null)
            InitializeShaderPrograms();
         return m_SolidShader;
      }
   }

   /// &lt;summary&gt;
   /// This shader is used for drawing textured graphics when lighting is disabled.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Lighting, normal mapping and shadows are all disabled in this shader.&lt;/remarks&gt;
   public static ShaderProgram NoLightShader
   {
      get
      {
         if (m_NoLightShader == null)
            InitializeShaderPrograms();
         return m_NoLightShader;
      }
   }

   /// &lt;summary&gt;
   /// Clean up all the pre-implemented shaders from memory.
   /// &lt;/summary&gt;
   public static void DisposeShaderPrograms()
   {
      if (m_NormalMappedShader != null)
         m_NormalMappedShader.Dispose();
      if (m_FlatShader != null)
         m_FlatShader.Dispose();
      if (m_SolidShader != null)
         m_SolidShader.Dispose();
      if (m_NoLightShader != null)
         m_NoLightShader.Dispose();

      m_NormalMappedShader = null;
      m_FlatShader = null;
      m_SolidShader = null;
      m_NoLightShader = null;
   }

   /// &lt;summary&gt;
   /// Make this shader program the currently active shader program, and apply the specified projection matrix.
   /// &lt;/summary&gt;
   /// &lt;param name="projectionMatrix"&gt;Projection matrix that determines how vertex coordinates are transformed to the display.&lt;/param&gt;
   public void Use(Matrix4 projectionMatrix)
   {
      if (handle &lt; 0)
         throw new ObjectDisposedException(GetType().Name);
      // activate this program to be used
      GL.UseProgram(this.handle);
      GL.UniformMatrix4(GetUniformLocation("projectionMatrix"), false, ref projectionMatrix);
      Display.CheckError();
   }

   /// &lt;summary&gt;
   /// Uses the OpenGL glGetAttributeLocation function to determine how a particular attribute of a vertex can be located.
   /// &lt;/summary&gt;
   /// &lt;param name="name"&gt;Name of the attribute to be located.&lt;/param&gt;
   /// &lt;returns&gt;Integer uniquely identifying where this attribute can be located within a vertex structure.&lt;/returns&gt;
   public int GetAttributeLocation(string name)
   {
      if (handle &lt; 0)
         throw new ObjectDisposedException(GetType().Name);
      // get the location of a vertex attribute
      return GL.GetAttribLocation(this.handle, name);
   }

   /// &lt;summary&gt;
   /// Uses the OpenGL glGetUniformLocation function to determine how a uniform object declared in the code can be located.
   /// &lt;/summary&gt;
   /// &lt;param name="name"&gt;Name of the variable declared in the shader code.&lt;/param&gt;
   /// &lt;returns&gt;Integer to uniquely identify the uniform variable from outside the shader.&lt;/returns&gt;
   public int GetUniformLocation(string name)
   {
      if (handle &lt; 0)
         throw new ObjectDisposedException(GetType().Name);
      // get the location of a uniform variable
      int result = GL.GetUniformLocation(this.handle, name);
      if (result &lt; 0)
         throw new ArgumentException("\"" + name + "\" not found.", name);
      return result;
   }

   #region IDisposable Support
   void Dispose(bool disposing)
   {
      if (handle &gt;= 0)
      {
         GL.DeleteProgram(handle);
         Display.CheckError();
         handle = -1;
      }
   }

   ~ShaderProgram()
   {
      // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
      Dispose(false);
   }

   /// &lt;summary&gt;
   /// Releases resources associated with this ShaderProgram, including the internally referenced OpenGL program.
   /// &lt;/summary&gt;
   public void Dispose()
   {
      // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
      Dispose(true);
      GC.SuppressFinalize(this);
   }
   #endregion
}

/// &lt;summary&gt;
/// Links a collection of vertices to the current drawing operation and shader program.
/// &lt;/summary&gt;
/// &lt;typeparam name="TVertex"&gt;Determines the data type of each vertex&lt;/typeparam&gt;
sealed class VertexArray&lt;TVertex&gt; : IDisposable
    where TVertex : struct
{
   private int handle;

   /// &lt;summary&gt;
   /// Construct a new VertexArray object that combines the specified buffer and &lt;see cref="ShaderProgram"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;param name="vertexBuffer"&gt;Contains a buffer for vertex data.&lt;/param&gt;
   /// &lt;param name="program"&gt;Contains a shader that works with the specified buffer.&lt;/param&gt;
   /// &lt;param name="attributes"&gt;Helps process the attributes of each vertex in teh buffer.&lt;/param&gt;
   public VertexArray(VertexBuffer&lt;TVertex&gt; vertexBuffer, ShaderProgram program,
       params VertexAttribute[] attributes)
   {
      // create new vertex array object
      GL.GenVertexArrays(1, out handle);
      Display.CheckError();

      // bind the object so we can modify it
      Bind();

      // bind the vertex buffer object
      vertexBuffer.Bind();

      // set all attributes
      foreach (var attribute in attributes)
         attribute.Set(program);

      // unbind objects to reset state
      GL.BindVertexArray(0);
      Display.CheckError();
      GL.BindBuffer(BufferTarget.ArrayBuffer, 0);
      Display.CheckError();
   }

   /// &lt;summary&gt;
   ///  Make this VertexArray current.
   /// &lt;/summary&gt;
   public void Bind()
   {
      if (handle &lt; 0)
         throw new ObjectDisposedException(GetType().Name);

      // bind for usage (modification or rendering)
      GL.BindVertexArray(handle);
      Display.CheckError();
   }

   #region IDisposable Support
   void Dispose(bool disposing)
   {
      if (handle &gt;= 0)
      {
         int curVertexArray;
         GL.GetInteger(GetPName.VertexArrayBinding, out curVertexArray);
         Display.CheckError();
         if (curVertexArray == handle)
         {
            GL.BindVertexArray(0);
            Display.CheckError();
         }
         GL.DeleteVertexArrays(1, ref handle);
         Display.CheckError();
         handle = -1;
      }
   }

   ~VertexArray()
   {
      // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
      Dispose(false);
   }

   /// &lt;summary&gt;
   /// Release the resources associated with this VertexArray, including the internal OpenGL vertex array object.
   /// &lt;/summary&gt;
   public void Dispose()
   {
      // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
      Dispose(true);
      GC.SuppressFinalize(this);
   }
   #endregion
}

/// &lt;summary&gt;
/// Determines how attributes of vertices beign drawn are propagated to the shader program.
/// &lt;/summary&gt;
sealed class VertexAttribute
{
   private readonly string name;
   private readonly int size;
   private readonly VertexAttribPointerType type;
   private readonly bool normalize;
   private readonly int stride;
   private readonly int offset;

   public VertexAttribute(string name, int size, VertexAttribPointerType type,
       int stride, int offset, bool normalize = false)
   {
      this.name = name;
      this.size = size;
      this.type = type;
      this.stride = stride;
      this.offset = offset;
      this.normalize = normalize;
   }

   public void Set(ShaderProgram program)
   {
      // get location of attribute from shader program
      int index = program.GetAttributeLocation(this.name);

      // enable and set attribute
      GL.EnableVertexAttribArray(index);
      Display.CheckError();
      if (type == VertexAttribPointerType.Int)
      {
         GL.VertexAttribIPointer(index, size, VertexAttribIntegerType.Int,
             stride, IntPtr.Add(IntPtr.Zero, offset));
         Display.CheckError();
      }
      else
      {
         GL.VertexAttribPointer(index, this.size, this.type,
             this.normalize, this.stride, this.offset);
         Display.CheckError();
      }
   }
}

/// &lt;summary&gt;
/// Aggregates light sources in a scene so that pixels can be affected by multiple light sources.
/// &lt;/summary&gt;
class LightSources : IList&lt;LightSource&gt;
{
   /// &lt;summary&gt;
   /// Determines how many light sources can affect each drawing operation.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;
   /// This must match MAX_LIGHTS in the fragment shader code.
   /// &lt;/remarks&gt;
   public const int MAX_LIGHTS = 4;

   private List&lt;LightSource&gt; lights = new List&lt;LightSource&gt;(MAX_LIGHTS);
   private int[,] lightArrayLocations;
   ShaderProgram lastUsedProgram;

   /// &lt;summary&gt;
   /// Create a collection of light sources that can be applied to a ShaderProgram
   /// &lt;/summary&gt;
   public LightSources()
   {
      for (int i = 0; i &lt; MAX_LIGHTS; i++)
      {
         if (i == 0)
            lights.Add(new LightSource()
            {
               Position = new Vector3(0, 0, 1),
               Color = System.Drawing.Color.White,
               Falloff = new Vector3(1f, 0, 0),
               ApertureFocus = -10f,
               ApertureSoftness = 0f,
               Aim = new Vector3(1, 0, 0)
            });
         else
            lights.Add(new LightSource()
            {
               Position = new Vector3(),
               Color = System.Drawing.Color.Transparent,
               Falloff = new Vector3(.8f, .2f, 0f),
               ApertureFocus = -10f,
               ApertureSoftness = 0f,
               Aim = new Vector3(1, 0, 0)
            });
      }
   }

   /// &lt;summary&gt;
   /// Reset all light sources to initial default behavior
   /// &lt;/summary&gt;
   public void Reset()
   {
      for (int i = 0; i &lt; MAX_LIGHTS; i++)
      {
         if (i == 0)
         {
            lights[i].Position = new Vector3(0, 0, 1);
            lights[i].Color = System.Drawing.Color.White;
            lights[i].Falloff = new Vector3(1f, 0, 0);
         }
         else
         {
            lights[i].Position = new Vector3();
            lights[i].Color = System.Drawing.Color.Transparent;
            lights[i].Falloff = new Vector3(.8f, .2f, 0f);
         }
         lights[i].ApertureFocus = -10f;
         lights[i].ApertureSoftness = 0f;
         lights[i].Aim = new Vector3(1, 0, 0);
         for (int w = 0; w &lt; LightSource.wallsPerLight * 2; w++)
         {
            lights[i][w] = new Vector3();
         }
      }
   }

   /// &lt;summary&gt;
   /// Prepare this collection of light sources to be used with the specified program.
   /// &lt;/summary&gt;
   /// &lt;param name="program"&gt;Shader program that uses light sources&lt;/param&gt;
   /// &lt;param name="lightArrayName"&gt;Variable name of the light source array in the shader program&lt;/param&gt;
   public void UseProgram(ShaderProgram program, string lightArrayName)
   {
      if (program == lastUsedProgram)
         return;

      if ((lightArrayLocations == null) || (lightArrayLocations.GetUpperBound(0) &lt; MAX_LIGHTS - 1)
         || (lightArrayLocations.GetUpperBound(1) &lt; LightSource.locationCount - 1))
         lightArrayLocations = new int[MAX_LIGHTS, LightSource.locationCount];
      for (int i = 0; i &lt; MAX_LIGHTS; i++)
      {
         lightArrayLocations[i, 0] = program.GetUniformLocation(lightArrayName + string.Format("[{0}].position", i));
         lightArrayLocations[i, 1] = program.GetUniformLocation(lightArrayName + string.Format("[{0}].color", i));
         lightArrayLocations[i, 2] = program.GetUniformLocation(lightArrayName + string.Format("[{0}].falloff", i));
         lightArrayLocations[i, 3] = program.GetUniformLocation(lightArrayName + string.Format("[{0}].aim", i));
         lightArrayLocations[i, 4] = program.GetUniformLocation(lightArrayName + string.Format("[{0}].aperture", i));
         lightArrayLocations[i, 5] = program.GetUniformLocation(lightArrayName + string.Format("[{0}].aperturesoftness", i));
         for (int w = 0; w &lt; LightSource.wallsPerLight * 2; w++)
            lightArrayLocations[i, 6 + w] = program.GetUniformLocation(lightArrayName + string.Format("[{0}].wall[{1}]", i, w));
      }
      lastUsedProgram = program;
   }

   /// &lt;summary&gt;
   /// Access a single light source within this collection.
   /// &lt;/summary&gt;
   /// &lt;param name="index"&gt;Determines which 0-based light source is being accessed.&lt;/param&gt;
   /// &lt;returns&gt;Light source object whose properties can be read or written.&lt;/returns&gt;
   public LightSource this[int index]
   {
      get
      {
         return ((IList&lt;LightSource&gt;)lights)[index];
      }

      set
      {
         ((IList&lt;LightSource&gt;)lights)[index] = value;
      }
   }

   /// &lt;summary&gt;
   /// Returns the number of light sources in the collection, which is always MAX_LIGHTS.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;
   /// The same number of light sources are always included in the scene's processing
   /// because, due to the way OpenGL uses parallelization to optimize the processing of
   /// pixels in the fragment shader, every pixel must undergo the same calculations.
   /// So in order to reduce the apparent number of light sources, a light source's
   /// properties are just set to have no effect on the scene instead of removing it
   /// entirely.
   /// &lt;/remarks&gt;
   public int Count
   {
      get
      {
         return ((IList&lt;LightSource&gt;)lights).Count;
      }
   }

   /// &lt;summary&gt;
   /// Indicates whether this collection can be modified.
   /// &lt;/summary&gt;
   public bool IsReadOnly
   {
      get
      {
         return ((IList&lt;LightSource&gt;)lights).IsReadOnly;
      }
   }

   /// &lt;summary&gt;
   /// Not supported. (Included only for IList interface.) &lt;see cref="Count"/&gt;
   /// &lt;/summary&gt;
   public void Add(LightSource item)
   {
      throw new NotSupportedException("Number of light sources cannot be changed.");
   }

   /// &lt;summary&gt;
   /// Not supported. (Included only for IList interface.) &lt;see cref="Count"/&gt;
   /// &lt;/summary&gt;
   public void Clear()
   {
      throw new NotSupportedException("Number of light sources cannot be changed.");
   }

   /// &lt;summary&gt;
   /// Determines whether the collection contains the specified light source object.
   /// &lt;/summary&gt;
   /// &lt;param name="item"&gt;Light source object for which to search.&lt;/param&gt;
   /// &lt;returns&gt;True if the specified light source is in this collection.&lt;/returns&gt;
   public bool Contains(LightSource item)
   {
      return ((IList&lt;LightSource&gt;)lights).Contains(item);
   }

   /// &lt;summary&gt;
   /// Copy the light sources in this collection to an array.
   /// &lt;/summary&gt;
   /// &lt;param name="array"&gt;Target array&lt;/param&gt;
   /// &lt;param name="arrayIndex"&gt;The 0-based starting index&lt;/param&gt;
   public void CopyTo(LightSource[] array, int arrayIndex)
   {
      ((IList&lt;LightSource&gt;)lights).CopyTo(array, arrayIndex);
   }

   /// &lt;summary&gt;
   /// Allows this collection to be enumerated evaluating each light source in sequence.
   /// &lt;/summary&gt;
   /// &lt;returns&gt;An object that can be used to enumerate all light sources in this collection.&lt;/returns&gt;
   public IEnumerator&lt;LightSource&gt; GetEnumerator()
   {
      return ((IList&lt;LightSource&gt;)lights).GetEnumerator();
   }

   /// &lt;summary&gt;
   /// Determines where in the collection the specified light source occurs. &lt;see cref="IList.IndexOf(object)"/&gt;
   /// &lt;/summary&gt;
   public int IndexOf(LightSource item)
   {
      return ((IList&lt;LightSource&gt;)lights).IndexOf(item);
   }

   /// &lt;summary&gt;
   /// Not supported. (Included only for IList interface.) &lt;see cref="Count"/&gt;
   /// &lt;/summary&gt;
   public void Insert(int index, LightSource item)
   {
      throw new NotSupportedException("Number of light sources cannot be changed.");
   }

   /// &lt;summary&gt;
   /// Not supported. (Included only for IList interface.) &lt;see cref="Count"/&gt;
   /// &lt;/summary&gt;
   public bool Remove(LightSource item)
   {
      throw new NotSupportedException("Number of light sources cannot be changed.");
   }

   /// &lt;summary&gt;
   /// Not supported. (Included only for IList interface.) &lt;see cref="Count"/&gt;
   /// &lt;/summary&gt;
   public void RemoveAt(int index)
   {
      throw new NotSupportedException("Number of light sources cannot be changed.");
   }

   /// &lt;summary&gt;
   /// Allows this collection to be enumerated evaluating each light source in sequence.
   /// &lt;/summary&gt;
   /// &lt;returns&gt;An object that can be used to enumerate all light sources in this collection.&lt;/returns&gt;
   IEnumerator IEnumerable.GetEnumerator()
   {
      return ((IList&lt;LightSource&gt;)lights).GetEnumerator();
   }

   /// &lt;summary&gt;
   /// Applies the light sources in this collection to the current drawing operation.
   /// &lt;/summary&gt;
   public void Set()
   {
      if (lightArrayLocations == null)
         throw new InvalidOperationException("LightSources.UseProgram must be called before LightSources.Set");
      for (int i = 0; i &lt; lights.Count; i++)
      {
         GL.Uniform3(lightArrayLocations[i, 0], lights[i].Position);
         Display.CheckError();
         GL.Uniform4(lightArrayLocations[i, 1], lights[i].Color);
         Display.CheckError();
         GL.Uniform3(lightArrayLocations[i, 2], lights[i].Falloff);
         Display.CheckError();
         GL.Uniform3(lightArrayLocations[i, 3], lights[i].Aim);
         Display.CheckError();
         GL.Uniform1(lightArrayLocations[i, 4], lights[i].ApertureFocus);
         Display.CheckError();
         GL.Uniform1(lightArrayLocations[i, 5], lights[i].ApertureSoftness);
         Display.CheckError();
         for (int w = 0; w &lt; LightSource.wallsPerLight * 2; w++)
         {
            GL.Uniform3(lightArrayLocations[i, 6 + w], lights[i][w]);
            Display.CheckError();
         }
      }
   }
}

/// &lt;summary&gt;
/// Defines the properties of a light source used by the SGDK2 display object
/// to determine brightness of drawn pixels at runtime.
/// &lt;/summary&gt;
class LightSource
{
   /// &lt;summary&gt;
   /// Determines how many walls can obstruct each light source.
   /// &lt;/summary&gt;
   public const int wallsPerLight = 20;
   /// &lt;summary&gt;
   /// Determines how many pointers OpenGL code needs to access
   /// all the properties of a light source.
   /// &lt;/summary&gt;
   public const int locationCount = 6 + wallsPerLight * 2;

   private Vector3 position;
   private Color4 color;
   private Vector3 aim;
   private Vector3 falloff;
   private float apertureFocus;
   private float apertureSoftness;
   private Vector3[] wallVertices;

   public LightSource()
   {
      wallVertices = new Vector3[wallsPerLight * 2];
   }

   /// &lt;summary&gt;
   /// Pixel coordinate within the display where the light source resides.
   /// &lt;/summary&gt;
   public Vector3 Position { get { return position; } set { position = value; } }

   /// &lt;summary&gt;
   /// Color of the light source with alpha representing brightness
   /// &lt;/summary&gt;
   public System.Drawing.Color Color
   {
      get
      {
         return System.Drawing.Color.FromArgb(color.ToArgb());
      }

      set
      {
         color = new Color4(value.R, value.G, value.B, value.A);
      }
   }

   /// &lt;summary&gt;
   /// Coordinate relative to this light source's position at which the light is pointed
   /// &lt;/summary&gt;
   public Vector3 Aim
   {
      get
      {
         return aim;
      }

      set
      {
         aim = value;
      }
   }

   /// &lt;summary&gt;
   /// Constant (x), linear (y) and quadratic (z) falloff coefficients for calculating attenuation
   /// &lt;/summary&gt;
   public Vector3 Falloff
   {
      get
      {
         return falloff;
      }

      set
      {
         falloff = value;
      }
   }

   /// &lt;summary&gt;
   /// Determines whether the light is omni-directional, or emits light in limited directions.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;
   /// A value of -1 emits light in all directions, 0 emits light over a 180-degree arc (making a linear
   /// divider between lit and unlight pixels at the light source), 0.7071 (cosine of 45
   /// degrees) results in a 90-degree arc. The actual apparent angle of illuminated pixels
   /// can vary based on the Aim because the arc is over a cone pointed by Aim.
   /// &lt;/remarks&gt;
   public float ApertureFocus
   {
      get
      {
         return apertureFocus;
      }

      set
      {
         apertureFocus = value;
      }
   }

   /// &lt;summary&gt;
   /// For a directed and focused light source, determine how crisp the edges of its illumination are
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;
   /// A value of 0 results in every pixel along the edge of the cone being either entirely included
   /// or excluded from the light cone. A value of 0.1 results in smooth transition between cone sizes
   /// determined by ApertureFocus and ApertureFocus -0.1.
   /// &lt;/remarks&gt;
   public float ApertureSoftness
   {
      get
      {
         return apertureSoftness;
      }

      set
      {
         apertureSoftness = value;
      }
   }

   /// &lt;summary&gt;
   /// Determines the endpoints of light barriers that block this light source's effect.
   /// &lt;/summary&gt;
   /// &lt;param name="index"&gt;Which barrier enpoint is being accessed (each barrier having 2 endpoints)&lt;/param&gt;
   /// &lt;returns&gt;The location of an endpoint of a light barrier&lt;/returns&gt;
   /// &lt;remarks&gt;
   /// Each barrier has 2 endpoints independent of other barriers, therefore, endpoints 0 and 1
   /// determine the configuration of the first barrier while endpoints 2 and 3 determine the
   /// second barrier. The Z coordinate of the barrier should be between 0 and 1 where 1 completely
   /// blocks light and lower values allow light to bleed in from that end of the barrier. 0 Causes
   /// the barrier to have no effect on the light source.
   /// &lt;/remarks&gt;
   public Vector3 this[int index]
   {
      get { return wallVertices[index]; }
      set { wallVertices[index] = value; }
   }
}
</Text>
  </SourceCode>
  <SourceCode Name="About.cs" IsCustomObject="false">
    <Text>/*
 * Created using Scrolling Game Development Kit 2.0
 * See Project.cs for copyright/licensing details
 */
using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;

/// &lt;summary&gt;
/// About dialog displayed from game's help menu.
/// &lt;/summary&gt;
public partial class frmAbout : System.Windows.Forms.Form
{
   private System.Windows.Forms.Button btnOK;
   private System.Windows.Forms.Label lblHeader;
   private System.Windows.Forms.Label lblSGDK2;
   private System.Windows.Forms.LinkLabel llbURL;
   private System.Windows.Forms.Label lblCredits;
   private System.Windows.Forms.TextBox txtCredits;
	/// &lt;summary&gt;
	/// Required designer variable.
	/// &lt;/summary&gt;
	private System.ComponentModel.Container components = null;

	public frmAbout()
	{
		//
		// Required for Windows Form Designer support
		//
		InitializeComponent();

      txtCredits.Text = Project.GameCredits;
	}

	/// &lt;summary&gt;
	/// Clean up any resources being used.
	/// &lt;/summary&gt;
	protected override void Dispose( bool disposing )
	{
		if( disposing )
		{
			if(components != null)
			{
				components.Dispose();
			}
		}
		base.Dispose( disposing );
	}

	#region Windows Form Designer generated code
	/// &lt;summary&gt;
	/// Required method for Designer support - do not modify
	/// the contents of this method with the code editor.
	/// &lt;/summary&gt;
	private void InitializeComponent()
	{
      this.btnOK = new System.Windows.Forms.Button();
      this.lblHeader = new System.Windows.Forms.Label();
      this.lblSGDK2 = new System.Windows.Forms.Label();
      this.llbURL = new System.Windows.Forms.LinkLabel();
      this.lblCredits = new System.Windows.Forms.Label();
      this.txtCredits = new System.Windows.Forms.TextBox();
      this.SuspendLayout();
      // 
      // btnOK
      // 
      this.btnOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
      this.btnOK.DialogResult = System.Windows.Forms.DialogResult.OK;
      this.btnOK.Location = new System.Drawing.Point(206, 168);
      this.btnOK.Name = "btnOK";
      this.btnOK.Size = new System.Drawing.Size(72, 24);
      this.btnOK.TabIndex = 0;
      this.btnOK.Text = "OK";
      // 
      // lblHeader
      // 
      this.lblHeader.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
         | System.Windows.Forms.AnchorStyles.Right)));
      this.lblHeader.Location = new System.Drawing.Point(8, 8);
      this.lblHeader.Name = "lblHeader";
      this.lblHeader.Size = new System.Drawing.Size(272, 16);
      this.lblHeader.TabIndex = 1;
      this.lblHeader.Text = "This game was created with:";
      // 
      // lblSGDK2
      // 
      this.lblSGDK2.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
         | System.Windows.Forms.AnchorStyles.Right)));
      this.lblSGDK2.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
      this.lblSGDK2.Location = new System.Drawing.Point(8, 24);
      this.lblSGDK2.Name = "lblSGDK2";
      this.lblSGDK2.Size = new System.Drawing.Size(272, 16);
      this.lblSGDK2.TabIndex = 2;
      this.lblSGDK2.Text = "Scrolling Game Development Kit 2";
      this.lblSGDK2.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // llbURL
      // 
      this.llbURL.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
         | System.Windows.Forms.AnchorStyles.Right)));
      this.llbURL.Location = new System.Drawing.Point(8, 40);
      this.llbURL.Name = "llbURL";
      this.llbURL.Size = new System.Drawing.Size(272, 16);
      this.llbURL.TabIndex = 3;
      this.llbURL.TabStop = true;
      this.llbURL.Text = "http://sgdk2.sf.net/";
      this.llbURL.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.Link_Clicked);
      // 
      // lblCredits
      // 
      this.lblCredits.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
         | System.Windows.Forms.AnchorStyles.Right)));
      this.lblCredits.Location = new System.Drawing.Point(8, 64);
      this.lblCredits.Name = "lblCredits";
      this.lblCredits.Size = new System.Drawing.Size(272, 16);
      this.lblCredits.TabIndex = 4;
      this.lblCredits.Text = "Game Credits:";
      // 
      // txtCredits
      // 
      this.txtCredits.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
         | System.Windows.Forms.AnchorStyles.Left) 
         | System.Windows.Forms.AnchorStyles.Right)));
      this.txtCredits.Location = new System.Drawing.Point(8, 80);
      this.txtCredits.Multiline = true;
      this.txtCredits.Name = "txtCredits";
      this.txtCredits.ReadOnly = true;
      this.txtCredits.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
      this.txtCredits.Size = new System.Drawing.Size(270, 80);
      this.txtCredits.TabIndex = 5;
      this.txtCredits.Text = "";
      // 
      // frmAbout
      // 
      this.AcceptButton = this.btnOK;
      this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
      this.ClientSize = new System.Drawing.Size(290, 199);
      this.Controls.Add(this.txtCredits);
      this.Controls.Add(this.lblCredits);
      this.Controls.Add(this.llbURL);
      this.Controls.Add(this.lblSGDK2);
      this.Controls.Add(this.lblHeader);
      this.Controls.Add(this.btnOK);
      this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
      this.Name = "frmAbout";
      this.Text = "About ";
      this.ResumeLayout(false);

   }
	#endregion

   private void Link_Clicked(object sender, System.Windows.Forms.LinkLabelLinkClickedEventArgs e)
   {
      System.Diagnostics.Process.Start(((LinkLabel)sender).Text);
   }
}
</Text>
  </SourceCode>
  <SourceCode Name="CollisionMask.cs" IsCustomObject="false">
    <Text>/*
 * Created using Scrolling Game Development Kit 2.0
 * See Project.cs for copyright/licensing details
 */
using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;

/// &lt;summary&gt;
/// Defines the shape of a sprite for the purpose of collision detection with other sprites
/// &lt;/summary&gt;
/// &lt;remarks&gt;An instance of this object is associated with each sprite frame that contains any
/// sub-frames with non-zero mask alpha levels. When testing for collisions between two sprites,
/// if both sprites have a collision mask, the masks will be used to determine if "solid"
/// pixels of the two sprites overlap.&lt;/remarks&gt;
public partial class CollisionMask
{
   private int[,] m_Mask;
   private int m_Width;
   private int m_Height;
   private Point m_Origin;
   private static System.Collections.Hashtable m_RectangularMasks = new System.Collections.Hashtable(10);
	
   /// &lt;summary&gt;
   /// Create a collision mask of the specified size for a combination of the specified frames
   /// from a frameset based on the respective alpha levels of those frames.
   /// &lt;/summary&gt;
   /// &lt;param name="localBounds"&gt;A rectangle relative to the frame's origin for which the
   /// mask is generated. This is generally generated by determining the rectangle that
   /// encloses all the graphics of all the transformed frames.&lt;/param&gt;
   /// &lt;param name="frameset"&gt;Frameset containing all the frames referenced for the creation
   /// of this mask.&lt;/param&gt;
   /// &lt;param name="subFrames"&gt;Indexes of the frames to be overlayed before generating the mask.&lt;/param&gt;
   /// &lt;param name="alphas"&gt;Respective alpha values for the frames in &lt;paramref name="subFrames"/&gt;&lt;/param&gt;
   public CollisionMask(Rectangle localBounds, Frameset frameset, int[] subFrames, byte[] alphas)
   {
      m_Mask = GenerateMaskFromFrame(localBounds, frameset, subFrames, alphas);
      m_Width = localBounds.Width;
      m_Height = localBounds.Height;
      m_Origin = new Point(-localBounds.X, -localBounds.Y);
   }

   private CollisionMask(Size size)
   {
      m_Mask = new int[size.Height, (int)Math.Ceiling(size.Width / 32f)];
      for (int x = 0; x &lt; (int)(size.Width / 32); x++)
      {
         for (int y = 0; y &lt; size.Height; y++)
         {
            m_Mask[y,x] = unchecked((int)0xFFFFFFFF);
         }
      }
      if (size.Width % 32 &gt; 0)
      {
         int lastColMask = 0;
         lastColMask |= (-1) &lt;&lt; (32 - (size.Width % 32));
         int lastColIdx = (int)Math.Ceiling(size.Width / 32f)-1;
         for (int y = 0; y &lt; size.Height; y++)
         {
            m_Mask[y, lastColIdx] = lastColMask;
         }
      }
      m_Width = size.Width;
      m_Height = size.Height;
      m_Origin = new Point(0,0);
   }

   /// &lt;summary&gt;
   /// Retrieve a solid rectangular collision mask of the specified size
   /// &lt;/summary&gt;
   /// &lt;param name="size"&gt;Size of the mask&lt;/param&gt;
   /// &lt;returns&gt;A rectangular masks is used when testing a collision
   /// between a sprite that has a mask and a sprite that doesn't.
   /// Once a rectangualar mask is generated, it is cached and returned for
   /// all requests for a mask of the same size. These
   /// masks are generally based on the solidity size of the sprite that
   /// does not have the mask (mask alpha level = 0).&lt;/returns&gt;
   public static CollisionMask GetRectangularMask(Size size)
   {
      CollisionMask result = m_RectangularMasks[size] as CollisionMask;
      if (result != null)
         return result;
      m_RectangularMasks[size] = result = new CollisionMask(size);
      return result;
   }

   /// &lt;summary&gt;
   /// Determine if this mask is colliding with the specified target mask
   /// &lt;/summary&gt;
   /// &lt;param name="target"&gt;Mask to test against&lt;/param&gt;
   /// &lt;param name="offsetX"&gt;Horizontal offset from this mask's position to the target mask's position&lt;/param&gt;
   /// &lt;param name="offsetY"&gt;Vertical offset from this mask's position to the target mask's position&lt;/param&gt;
   /// &lt;returns&gt;True if solid bits in the masks collide when positioned at the specified offset&lt;/returns&gt;
   public bool TestCollisionWith(CollisionMask target, int offsetX, int offsetY)
   {
      offsetX += m_Origin.X - target.m_Origin.X;
      offsetY += m_Origin.Y - target.m_Origin.Y;

      if ((offsetY &gt;= m_Height) || (offsetY &lt;= -target.m_Height) ||
         (offsetX &gt;= m_Width) || (offsetX &lt;= -target.m_Width))
         return false;

      int maxY;
      int myMinY, targetMinY;
      if (offsetY &gt; 0)
      {
         myMinY = offsetY;
         targetMinY = 0;
         if (target.m_Height &gt;= m_Height - offsetY)
            maxY = m_Height - offsetY;
         else
            maxY = target.m_Height;
      }
      else
      {
         myMinY = 0;
         targetMinY = -offsetY;
         if (m_Height &gt;= target.m_Height + offsetY)
            maxY = target.m_Height + offsetY;
         else
            maxY = m_Height;
      }

      int maxX;
      int myMinX, targetMinX;
      if (offsetX &gt; 0)
      {
         myMinX = offsetX;
         targetMinX = 0;
         if (target.m_Width &gt;= m_Width - offsetX)
            maxX = m_Width - offsetX;
         else
            maxX = target.m_Width;
      }
      else
      {
         myMinX = 0;
         targetMinX = -offsetX;
         if (m_Width &gt;= target.m_Width + offsetX)
            maxX = target.m_Width + offsetX;
         else
            maxX = m_Width;
      }

      for(int y=0; y &lt; maxY; y++)
      {
         for(int x=0; x &lt; maxX; x+=32)
         {
            int myColIdx = (int)((x+myMinX)/32);
            int myColOff = myMinX % 32;
            int targetColIdx = (int)((x+targetMinX)/32);
            int targetColOff = targetMinX % 32;
            int myMask = m_Mask[y+myMinY,myColIdx] &lt;&lt; myColOff;
            int targetMask = target.m_Mask[y+targetMinY,targetColIdx] &lt;&lt; targetColOff;
            if (myColOff != 0)
            {
               if (myColIdx + 1 &lt; m_Mask.GetUpperBound(1))
                  myMask |= (m_Mask[y+myMinY,myColIdx+1] &gt;&gt; (32-myColOff)) &amp;
                     ~(unchecked((int)0x80000000) &gt;&gt; (31-myColOff));
            }
            else if (targetColOff != 0)
            {
               if (targetColIdx + 1 &lt; target.m_Mask.GetUpperBound(1))
                  targetMask |= (target.m_Mask[y+targetMinY,targetColIdx+1] &gt;&gt; (32-targetColOff)) &amp;
                     ~(unchecked((int)0x80000000) &gt;&gt; (31-targetColOff));
            }
            if ((myMask &amp; targetMask) != 0)
               return true;
         }
      }
      return false;
   }

   private static int[,] GenerateMaskFromFrame(Rectangle rcBound, Frameset frameset, int[] subFrames, byte[] alphas)
   {
      BitmapData bmpData;
      int[] pixels;

      using (Bitmap bmpSingle = new Bitmap(rcBound.Width, rcBound.Height, PixelFormat.Format32bppArgb))
      {
         int maskColumns = (int)Math.Ceiling(bmpSingle.Width / 32f);
         int[,] arbt = new int[bmpSingle.Height, maskColumns];
         using (Graphics gfxSingle = Graphics.FromImage(bmpSingle))
         {
            gfxSingle.CompositingMode = CompositingMode.SourceCopy;
            gfxSingle.PixelOffsetMode = PixelOffsetMode.Half;

            for (int subFrameIdx = 0; subFrameIdx &lt; subFrames.Length; subFrameIdx++)
            {
               int subFrame = subFrames[subFrameIdx];
               gfxSingle.Clear(Color.Transparent);
               Frame SFrame = frameset[subFrame];

               Bitmap bmpGfxSheet = (Bitmap)Project.Resources.GetObject(SFrame.GraphicSheetTexture.Name);
               PointF[] corners = new PointF[] {
                  new PointF(SFrame.Corners[0].X - rcBound.X, SFrame.Corners[0].Y - rcBound.Y),
                  new PointF(SFrame.Corners[3].X - rcBound.X, SFrame.Corners[3].Y - rcBound.Y),
                  new PointF(SFrame.Corners[1].X - rcBound.X, SFrame.Corners[1].Y - rcBound.Y)};
               gfxSingle.DrawImage(bmpGfxSheet, corners, SFrame.SourceRect, GraphicsUnit.Pixel);
               bmpData = bmpSingle.LockBits(new Rectangle(Point.Empty, rcBound.Size), ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);
               pixels = new int[bmpSingle.Height * Math.Abs(bmpData.Stride) / 4];
               System.Runtime.InteropServices.Marshal.Copy(bmpData.Scan0, pixels, 0, bmpSingle.Height * Math.Abs(bmpData.Stride) / 4);
               bmpSingle.UnlockBits(bmpData);
               for (int rowIdx = 0; rowIdx &lt; bmpSingle.Height; rowIdx++)
               {
                  for (int pixIdx = 0; pixIdx &lt; bmpSingle.Width; pixIdx++)
                  {
                     if (Color.FromArgb(pixels[rowIdx * bmpData.Stride / 4 + pixIdx]).A &gt; alphas[subFrameIdx])
                        arbt[rowIdx, pixIdx / 32] |= 1 &lt;&lt; (31 - (pixIdx % 32));
                  }
               }
            }
         }
         return arbt;
      }
   }
}
</Text>
  </SourceCode>
  <SourceCode Name="Controls.cs" IsCustomObject="false">
    <Text>/*
 * Created using Scrolling Game Development Kit 2.0
 * See Project.cs for copyright/licensing details
 */
using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;

/// &lt;summary&gt;
/// UI to support the player's customization of input device.
/// &lt;/summary&gt;
public partial class frmControls : System.Windows.Forms.Form
{
   #region Embedded Types
   class KeyTextBox : TextBox
   {
      protected override void WndProc(ref Message m)
      {
         base.WndProc(ref m);
         if (Parent is frmControls)
            ((frmControls)Parent).ProcessMessage(this, m);
      }
   }
   #endregion

   #region Non-control members
   private System.Threading.Thread readControllerThread = null;
   private bool bExitControllerThread = false;
   private delegate void ControllerButtonPressedDelegate(byte button);
   private int pressedButtons = 0;
   private int currentPlayer;
   private System.Windows.Forms.TextBox txtCurJButton = null;
   private bool bLoading = false;
   private const int WM_KEYDOWN = 0x100;
   #endregion

   #region Windows Form Designer Members
   private System.Windows.Forms.Label lblController;
   private System.Windows.Forms.ComboBox cboController;
   private System.Windows.Forms.RadioButton rdoController;
   private System.Windows.Forms.RadioButton rdoKeyboard;
   private KeyTextBox txtButton4;
   private System.Windows.Forms.Label lblButton4;
   private KeyTextBox txtButton3;
   private System.Windows.Forms.Label lblButton3;
   private KeyTextBox txtButton2;
   private System.Windows.Forms.Label lblButton2;
   private KeyTextBox txtButton1;
   private System.Windows.Forms.Label lblButton1;
   private KeyTextBox txtDown;
   private System.Windows.Forms.Label lblDown;
   private KeyTextBox txtRight;
   private System.Windows.Forms.Label lblRight;
   private KeyTextBox txtLeft;
   private System.Windows.Forms.Label lblLeft;
   private KeyTextBox txtUp;
   private System.Windows.Forms.Label lblUp;
   private System.Windows.Forms.ComboBox cboPlayer;
   private System.Windows.Forms.Label lblPlayer;
   private System.Windows.Forms.TextBox txtJButton4;
   private System.Windows.Forms.TextBox txtJButton3;
   private System.Windows.Forms.TextBox txtJButton2;
   private System.Windows.Forms.TextBox txtJButton1;
   private System.Windows.Forms.Label lblJButton4;
   private System.Windows.Forms.Label lblJButton3;
   private System.Windows.Forms.Label lblJButton2;
   private System.Windows.Forms.Label lblJButton1;
   private System.Windows.Forms.Label label1;

   /// &lt;summary&gt;
   /// Required designer variable.
   /// &lt;/summary&gt;
   private System.ComponentModel.Container components = null;
   #endregion
   
   public frmControls()
   {
      //
      // Required for Windows Form Designer support
      //
      InitializeComponent();

      if (Project.MaxPlayers &lt;= 1)
      {
         lblPlayer.Hide();
         cboPlayer.Hide();
         this.ClientSize = new System.Drawing.Size(298, 270);
      }

      for(int i = 0; i &lt; Project.GameWindow.ControllerCount; i++)
         cboController.Items.Add(Project.GameWindow.GetControllerName(i));
      rdoController.Enabled = (cboController.Items.Count &gt; 0);

      for (int i = 0; i&lt;Project.MaxPlayers; i++)
         cboPlayer.Items.Add("Player " + (i+1).ToString());
      cboPlayer.SelectedIndex = 0;
   }

   /// &lt;summary&gt;
   /// Clean up any resources being used.
   /// &lt;/summary&gt;
   protected override void Dispose( bool disposing )
   {
      if( disposing )
      {
         if(components != null)
         {
            components.Dispose();
         }
      }
      base.Dispose( disposing );
      EndControllerThread();
   }

   #region Windows Form Designer generated code
   private void InitializeComponent()
   {
      this.lblController = new System.Windows.Forms.Label();
      this.cboController = new System.Windows.Forms.ComboBox();
      this.rdoController = new System.Windows.Forms.RadioButton();
      this.rdoKeyboard = new System.Windows.Forms.RadioButton();
      this.txtButton4 = new KeyTextBox();
      this.lblButton4 = new System.Windows.Forms.Label();
      this.txtButton3 = new KeyTextBox();
      this.lblButton3 = new System.Windows.Forms.Label();
      this.txtButton2 = new KeyTextBox();
      this.lblButton2 = new System.Windows.Forms.Label();
      this.txtButton1 = new KeyTextBox();
      this.lblButton1 = new System.Windows.Forms.Label();
      this.txtDown = new KeyTextBox();
      this.lblDown = new System.Windows.Forms.Label();
      this.txtRight = new KeyTextBox();
      this.lblRight = new System.Windows.Forms.Label();
      this.txtLeft = new KeyTextBox();
      this.lblLeft = new System.Windows.Forms.Label();
      this.txtUp = new KeyTextBox();
      this.lblUp = new System.Windows.Forms.Label();
      this.cboPlayer = new System.Windows.Forms.ComboBox();
      this.lblPlayer = new System.Windows.Forms.Label();
      this.txtJButton4 = new System.Windows.Forms.TextBox();
      this.txtJButton3 = new System.Windows.Forms.TextBox();
      this.txtJButton2 = new System.Windows.Forms.TextBox();
      this.txtJButton1 = new System.Windows.Forms.TextBox();
      this.lblJButton4 = new System.Windows.Forms.Label();
      this.lblJButton3 = new System.Windows.Forms.Label();
      this.lblJButton2 = new System.Windows.Forms.Label();
      this.lblJButton1 = new System.Windows.Forms.Label();
      this.label1 = new System.Windows.Forms.Label();
      this.SuspendLayout();
      // 
      // lblController
      // 
      this.lblController.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblController.Enabled = false;
      this.lblController.Location = new System.Drawing.Point(24, 184);
      this.lblController.Name = "lblController";
      this.lblController.Size = new System.Drawing.Size(64, 16);
      this.lblController.TabIndex = 43;
      this.lblController.Text = "Controller:";
      // 
      // cboController
      // 
      this.cboController.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.cboController.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
      this.cboController.Enabled = false;
      this.cboController.Location = new System.Drawing.Point(88, 184);
      this.cboController.Name = "cboController";
      this.cboController.Size = new System.Drawing.Size(200, 21);
      this.cboController.TabIndex = 42;
      this.cboController.SelectedIndexChanged += new System.EventHandler(this.cboController_SelectedIndexChanged);
      // 
      // rdoController
      // 
      this.rdoController.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.rdoController.Location = new System.Drawing.Point(8, 160);
      this.rdoController.Name = "rdoController";
      this.rdoController.Size = new System.Drawing.Size(272, 16);
      this.rdoController.TabIndex = 41;
      this.rdoController.Text = "Game Controller";
      this.rdoController.CheckedChanged += new System.EventHandler(this.InputType_Changed);
      // 
      // rdoKeyboard
      // 
      this.rdoKeyboard.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.rdoKeyboard.Location = new System.Drawing.Point(8, 40);
      this.rdoKeyboard.Name = "rdoKeyboard";
      this.rdoKeyboard.Size = new System.Drawing.Size(272, 16);
      this.rdoKeyboard.TabIndex = 40;
      this.rdoKeyboard.Text = "Keyboard";
      this.rdoKeyboard.CheckedChanged += new System.EventHandler(this.InputType_Changed);
      // 
      // txtButton4
      // 
      this.txtButton4.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.txtButton4.Enabled = false;
      this.txtButton4.Location = new System.Drawing.Point(224, 128);
      this.txtButton4.Name = "txtButton4";
      this.txtButton4.ReadOnly = true;
      this.txtButton4.Size = new System.Drawing.Size(64, 20);
      this.txtButton4.TabIndex = 39;
      this.txtButton4.Text = "";
      // 
      // lblButton4
      // 
      this.lblButton4.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblButton4.Enabled = false;
      this.lblButton4.Location = new System.Drawing.Point(160, 128);
      this.lblButton4.Name = "lblButton4";
      this.lblButton4.Size = new System.Drawing.Size(64, 20);
      this.lblButton4.TabIndex = 38;
      this.lblButton4.Text = "Button 4:";
      this.lblButton4.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // txtButton3
      // 
      this.txtButton3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.txtButton3.Enabled = false;
      this.txtButton3.Location = new System.Drawing.Point(224, 104);
      this.txtButton3.Name = "txtButton3";
      this.txtButton3.ReadOnly = true;
      this.txtButton3.Size = new System.Drawing.Size(64, 20);
      this.txtButton3.TabIndex = 37;
      this.txtButton3.Text = "";
      // 
      // lblButton3
      // 
      this.lblButton3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblButton3.Enabled = false;
      this.lblButton3.Location = new System.Drawing.Point(160, 104);
      this.lblButton3.Name = "lblButton3";
      this.lblButton3.Size = new System.Drawing.Size(64, 20);
      this.lblButton3.TabIndex = 36;
      this.lblButton3.Text = "Button 3:";
      this.lblButton3.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // txtButton2
      // 
      this.txtButton2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.txtButton2.Enabled = false;
      this.txtButton2.Location = new System.Drawing.Point(224, 80);
      this.txtButton2.Name = "txtButton2";
      this.txtButton2.ReadOnly = true;
      this.txtButton2.Size = new System.Drawing.Size(64, 20);
      this.txtButton2.TabIndex = 35;
      this.txtButton2.Text = "";
      // 
      // lblButton2
      // 
      this.lblButton2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblButton2.Enabled = false;
      this.lblButton2.Location = new System.Drawing.Point(160, 80);
      this.lblButton2.Name = "lblButton2";
      this.lblButton2.Size = new System.Drawing.Size(64, 20);
      this.lblButton2.TabIndex = 34;
      this.lblButton2.Text = "Button 2:";
      this.lblButton2.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // txtButton1
      // 
      this.txtButton1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.txtButton1.Enabled = false;
      this.txtButton1.Location = new System.Drawing.Point(224, 56);
      this.txtButton1.Name = "txtButton1";
      this.txtButton1.ReadOnly = true;
      this.txtButton1.Size = new System.Drawing.Size(64, 20);
      this.txtButton1.TabIndex = 33;
      this.txtButton1.Text = "";
      // 
      // lblButton1
      // 
      this.lblButton1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblButton1.Enabled = false;
      this.lblButton1.Location = new System.Drawing.Point(160, 56);
      this.lblButton1.Name = "lblButton1";
      this.lblButton1.Size = new System.Drawing.Size(64, 20);
      this.lblButton1.TabIndex = 32;
      this.lblButton1.Text = "Button 1:";
      this.lblButton1.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // txtDown
      // 
      this.txtDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.txtDown.Enabled = false;
      this.txtDown.Location = new System.Drawing.Point(88, 128);
      this.txtDown.Name = "txtDown";
      this.txtDown.ReadOnly = true;
      this.txtDown.Size = new System.Drawing.Size(64, 20);
      this.txtDown.TabIndex = 31;
      this.txtDown.Text = "";
      // 
      // lblDown
      // 
      this.lblDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblDown.Enabled = false;
      this.lblDown.Location = new System.Drawing.Point(24, 128);
      this.lblDown.Name = "lblDown";
      this.lblDown.Size = new System.Drawing.Size(64, 20);
      this.lblDown.TabIndex = 30;
      this.lblDown.Text = "Down:";
      this.lblDown.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // txtRight
      // 
      this.txtRight.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.txtRight.Enabled = false;
      this.txtRight.Location = new System.Drawing.Point(88, 104);
      this.txtRight.Name = "txtRight";
      this.txtRight.ReadOnly = true;
      this.txtRight.Size = new System.Drawing.Size(64, 20);
      this.txtRight.TabIndex = 29;
      this.txtRight.Text = "";
      // 
      // lblRight
      // 
      this.lblRight.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblRight.Enabled = false;
      this.lblRight.Location = new System.Drawing.Point(24, 104);
      this.lblRight.Name = "lblRight";
      this.lblRight.Size = new System.Drawing.Size(64, 20);
      this.lblRight.TabIndex = 28;
      this.lblRight.Text = "Right:";
      this.lblRight.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // txtLeft
      // 
      this.txtLeft.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.txtLeft.Enabled = false;
      this.txtLeft.Location = new System.Drawing.Point(88, 80);
      this.txtLeft.Name = "txtLeft";
      this.txtLeft.ReadOnly = true;
      this.txtLeft.Size = new System.Drawing.Size(64, 20);
      this.txtLeft.TabIndex = 27;
      this.txtLeft.Text = "";
      // 
      // lblLeft
      // 
      this.lblLeft.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblLeft.Enabled = false;
      this.lblLeft.Location = new System.Drawing.Point(24, 80);
      this.lblLeft.Name = "lblLeft";
      this.lblLeft.Size = new System.Drawing.Size(64, 20);
      this.lblLeft.TabIndex = 26;
      this.lblLeft.Text = "Left:";
      this.lblLeft.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // txtUp
      // 
      this.txtUp.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.txtUp.Enabled = false;
      this.txtUp.Location = new System.Drawing.Point(88, 56);
      this.txtUp.Name = "txtUp";
      this.txtUp.ReadOnly = true;
      this.txtUp.Size = new System.Drawing.Size(64, 20);
      this.txtUp.TabIndex = 25;
      this.txtUp.Text = "";
      // 
      // lblUp
      // 
      this.lblUp.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblUp.Enabled = false;
      this.lblUp.Location = new System.Drawing.Point(24, 56);
      this.lblUp.Name = "lblUp";
      this.lblUp.Size = new System.Drawing.Size(64, 20);
      this.lblUp.TabIndex = 24;
      this.lblUp.Text = "Up:";
      this.lblUp.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // cboPlayer
      // 
      this.cboPlayer.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.cboPlayer.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
      this.cboPlayer.Location = new System.Drawing.Point(88, 8);
      this.cboPlayer.Name = "cboPlayer";
      this.cboPlayer.Size = new System.Drawing.Size(200, 21);
      this.cboPlayer.TabIndex = 23;
      this.cboPlayer.SelectedIndexChanged += new System.EventHandler(this.cboPlayer_SelectedIndexChanged);
      // 
      // lblPlayer
      // 
      this.lblPlayer.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblPlayer.Location = new System.Drawing.Point(8, 8);
      this.lblPlayer.Name = "lblPlayer";
      this.lblPlayer.Size = new System.Drawing.Size(80, 21);
      this.lblPlayer.TabIndex = 22;
      this.lblPlayer.Text = "Player:";
      this.lblPlayer.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // txtJButton4
      // 
      this.txtJButton4.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.txtJButton4.Enabled = false;
      this.txtJButton4.Location = new System.Drawing.Point(224, 232);
      this.txtJButton4.Name = "txtJButton4";
      this.txtJButton4.ReadOnly = true;
      this.txtJButton4.Size = new System.Drawing.Size(64, 20);
      this.txtJButton4.TabIndex = 51;
      this.txtJButton4.Text = "";
      this.txtJButton4.Leave += new System.EventHandler(this.txtJButton_Leave);
      this.txtJButton4.Enter += new System.EventHandler(this.txtJButton_Enter);
      // 
      // txtJButton3
      // 
      this.txtJButton3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.txtJButton3.Enabled = false;
      this.txtJButton3.Location = new System.Drawing.Point(224, 208);
      this.txtJButton3.Name = "txtJButton3";
      this.txtJButton3.ReadOnly = true;
      this.txtJButton3.Size = new System.Drawing.Size(64, 20);
      this.txtJButton3.TabIndex = 49;
      this.txtJButton3.Text = "";
      this.txtJButton3.Leave += new System.EventHandler(this.txtJButton_Leave);
      this.txtJButton3.Enter += new System.EventHandler(this.txtJButton_Enter);
      // 
      // txtJButton2
      // 
      this.txtJButton2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.txtJButton2.Enabled = false;
      this.txtJButton2.Location = new System.Drawing.Point(88, 232);
      this.txtJButton2.Name = "txtJButton2";
      this.txtJButton2.ReadOnly = true;
      this.txtJButton2.Size = new System.Drawing.Size(64, 20);
      this.txtJButton2.TabIndex = 47;
      this.txtJButton2.Text = "";
      this.txtJButton2.Leave += new System.EventHandler(this.txtJButton_Leave);
      this.txtJButton2.Enter += new System.EventHandler(this.txtJButton_Enter);
      // 
      // txtJButton1
      // 
      this.txtJButton1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.txtJButton1.Enabled = false;
      this.txtJButton1.Location = new System.Drawing.Point(88, 208);
      this.txtJButton1.Name = "txtJButton1";
      this.txtJButton1.ReadOnly = true;
      this.txtJButton1.Size = new System.Drawing.Size(64, 20);
      this.txtJButton1.TabIndex = 45;
      this.txtJButton1.Text = "";
      this.txtJButton1.Leave += new System.EventHandler(this.txtJButton_Leave);
      this.txtJButton1.Enter += new System.EventHandler(this.txtJButton_Enter);
      // 
      // lblJButton4
      // 
      this.lblJButton4.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblJButton4.Enabled = false;
      this.lblJButton4.Location = new System.Drawing.Point(160, 232);
      this.lblJButton4.Name = "lblJButton4";
      this.lblJButton4.Size = new System.Drawing.Size(64, 20);
      this.lblJButton4.TabIndex = 50;
      this.lblJButton4.Text = "Button 4:";
      this.lblJButton4.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // lblJButton3
      // 
      this.lblJButton3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblJButton3.Enabled = false;
      this.lblJButton3.Location = new System.Drawing.Point(160, 208);
      this.lblJButton3.Name = "lblJButton3";
      this.lblJButton3.Size = new System.Drawing.Size(64, 20);
      this.lblJButton3.TabIndex = 48;
      this.lblJButton3.Text = "Button 3:";
      this.lblJButton3.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // lblJButton2
      // 
      this.lblJButton2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblJButton2.Enabled = false;
      this.lblJButton2.Location = new System.Drawing.Point(24, 232);
      this.lblJButton2.Name = "lblJButton2";
      this.lblJButton2.Size = new System.Drawing.Size(64, 20);
      this.lblJButton2.TabIndex = 46;
      this.lblJButton2.Text = "Button 2:";
      this.lblJButton2.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // lblJButton1
      // 
      this.lblJButton1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
      this.lblJButton1.Enabled = false;
      this.lblJButton1.Location = new System.Drawing.Point(24, 208);
      this.lblJButton1.Name = "lblJButton1";
      this.lblJButton1.Size = new System.Drawing.Size(64, 20);
      this.lblJButton1.TabIndex = 44;
      this.lblJButton1.Text = "Button 1:";
      this.lblJButton1.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
      // 
      // label1
      // 
      this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
         | System.Windows.Forms.AnchorStyles.Right)));
      this.label1.Location = new System.Drawing.Point(8, 264);
      this.label1.Name = "label1";
      this.label1.Size = new System.Drawing.Size(288, 32);
      this.label1.TabIndex = 52;
      this.label1.Text = "To change button configuration, click on a box and press the key/button to map to" +
         " that button.";
      // 
      // frmControls
      // 
      this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
      this.ClientSize = new System.Drawing.Size(298, 295);
      this.Controls.Add(this.label1);
      this.Controls.Add(this.txtJButton4);
      this.Controls.Add(this.txtJButton3);
      this.Controls.Add(this.txtJButton2);
      this.Controls.Add(this.txtJButton1);
      this.Controls.Add(this.txtButton4);
      this.Controls.Add(this.txtButton3);
      this.Controls.Add(this.txtButton2);
      this.Controls.Add(this.txtButton1);
      this.Controls.Add(this.txtDown);
      this.Controls.Add(this.txtRight);
      this.Controls.Add(this.txtLeft);
      this.Controls.Add(this.txtUp);
      this.Controls.Add(this.lblJButton4);
      this.Controls.Add(this.lblJButton3);
      this.Controls.Add(this.lblJButton2);
      this.Controls.Add(this.lblJButton1);
      this.Controls.Add(this.lblController);
      this.Controls.Add(this.cboController);
      this.Controls.Add(this.rdoController);
      this.Controls.Add(this.rdoKeyboard);
      this.Controls.Add(this.lblButton4);
      this.Controls.Add(this.lblButton3);
      this.Controls.Add(this.lblButton2);
      this.Controls.Add(this.lblButton1);
      this.Controls.Add(this.lblDown);
      this.Controls.Add(this.lblRight);
      this.Controls.Add(this.lblLeft);
      this.Controls.Add(this.lblUp);
      this.Controls.Add(this.cboPlayer);
      this.Controls.Add(this.lblPlayer);
      this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
      this.MaximizeBox = false;
      this.Name = "frmControls";
      this.Text = "Customize Controls";
      this.ResumeLayout(false);

   }
   #endregion

   private void InputType_Changed(object sender, System.EventArgs e)
   {
      if (((RadioButton)sender).Checked)
      {
         lblUp.Enabled = txtUp.Enabled =
            lblLeft.Enabled = txtLeft.Enabled =
            lblRight.Enabled = txtRight.Enabled =
            lblDown.Enabled = txtDown.Enabled =
            lblButton1.Enabled = txtButton1.Enabled = 
            lblButton2.Enabled = txtButton2.Enabled = 
            lblButton3.Enabled = txtButton3.Enabled = 
            lblButton4.Enabled = txtButton4.Enabled =
            sender == rdoKeyboard;

         lblController.Enabled = cboController.Enabled = 
            lblJButton1.Enabled = txtJButton1.Enabled =
            lblJButton2.Enabled = txtJButton2.Enabled =
            lblJButton3.Enabled = txtJButton3.Enabled =
            lblJButton4.Enabled = txtJButton4.Enabled =
            (sender != rdoKeyboard);

         if (!bLoading)
         {
            if (sender == rdoKeyboard)
               Project.GameWindow.Players[SelectedPlayer] = new KeyboardPlayer(SelectedPlayer);
            else
               Project.GameWindow.Players[SelectedPlayer] = new ControllerPlayer(SelectedPlayer % cboController.Items.Count);
         }

         LoadCurrentControls();
      }
   }

   private int SelectedPlayer
   {
      get
      {
         return cboPlayer.SelectedIndex;
      }
   }

   private void ProcessMessage(KeyTextBox sender, Message m)
   {
      if (m.Msg == WM_KEYDOWN)
      {
         KeyboardState kbs = Project.GameWindow.KeyboardState;
         kbs.Poll();
         sender.Text = System.Enum.Format(typeof(Key), kbs.GetFirstKey(), "g");
         KeyboardPlayer player = (KeyboardPlayer)Project.GameWindow.Players[SelectedPlayer];
         if (sender == txtUp)
            player.key_up = kbs.GetFirstKey();
         else if (sender == txtLeft)
            player.key_left = kbs.GetFirstKey();
         else if (sender == txtRight)
            player.key_right = kbs.GetFirstKey();
         else if (sender == txtDown)
            player.key_down = kbs.GetFirstKey();
         else if (sender == txtButton1)
            player.key_button1 = kbs.GetFirstKey();
         else if (sender == txtButton2)
            player.key_button2 = kbs.GetFirstKey();
         else if (sender == txtButton3)
            player.key_button3 = kbs.GetFirstKey();
         else if (sender == txtButton4)
            player.key_button4 = kbs.GetFirstKey();
      }
   }

   private void cboController_SelectedIndexChanged(object sender, System.EventArgs e)
   {
      if (cboController.SelectedIndex &gt;= 0)
         ((ControllerPlayer)Project.GameWindow.Players[SelectedPlayer]).deviceNumber = cboController.SelectedIndex;
   }

   private void cboPlayer_SelectedIndexChanged(object sender, System.EventArgs e)
   {
      // Required for cross-thread access
      currentPlayer = SelectedPlayer;
      LoadCurrentControls();
   }

   private void LoadCurrentControls()
   {
      if (Project.GameWindow.Players[SelectedPlayer] is KeyboardPlayer)
      {
         bLoading = true;
         KeyboardPlayer player = (KeyboardPlayer)Project.GameWindow.Players[SelectedPlayer];
         rdoKeyboard.Checked = true;
         txtUp.Text = System.Enum.Format(typeof(Key), player.key_up, "g");
         txtLeft.Text = System.Enum.Format(typeof(Key), player.key_left, "g");
         txtRight.Text = System.Enum.Format(typeof(Key), player.key_right, "g");
         txtDown.Text = System.Enum.Format(typeof(Key), player.key_down, "g");
         txtButton1.Text = System.Enum.Format(typeof(Key), player.key_button1, "g");
         txtButton2.Text = System.Enum.Format(typeof(Key), player.key_button2, "g");
         txtButton3.Text = System.Enum.Format(typeof(Key), player.key_button3, "g");
         txtButton4.Text = System.Enum.Format(typeof(Key), player.key_button4, "g");
         bLoading = false;
      }
      else
      {
         bLoading = true;
         rdoController.Checked = true;
         ControllerPlayer player = ((ControllerPlayer)Project.GameWindow.Players[SelectedPlayer]);
         int devNum = player.deviceNumber;
         if (cboController.Items.Count &gt; devNum)
         {
            cboController.SelectedIndex = devNum;
            txtJButton1.Text = player.buttonMap[0].ToString();
            txtJButton2.Text = player.buttonMap[1].ToString();
            txtJButton3.Text = player.buttonMap[2].ToString();
            txtJButton4.Text = player.buttonMap[3].ToString();
         }
         else
            cboController.SelectedIndex = -1;
         bLoading = false;
      }
   }

   private void ControllerButtonPressed(byte button)
   {
      ControllerPlayer plr = (ControllerPlayer)Project.GameWindow.Players[SelectedPlayer];
      if (txtCurJButton == txtJButton1)
         plr.buttonMap[0] = button;
      else if (txtCurJButton == txtJButton2)
         plr.buttonMap[1] = button;
      else if (txtCurJButton == txtJButton3)
         plr.buttonMap[2] = button;
      else if (txtCurJButton == txtJButton4)
         plr.buttonMap[3] = button;
      if (txtCurJButton != null)
         txtCurJButton.Text = button.ToString();
   }

   private void ReadControllerLoop()
   {
      ControllerButtonPressedDelegate cbp = new ControllerButtonPressedDelegate(ControllerButtonPressed);
      while (!bExitControllerThread)
      {
         Project.GameWindow.ReadControllers();
         for (byte button = 0; button &lt; 32; button++)
         {
            if (((pressedButtons &amp; (1 &lt;&lt; button)) == 0) &amp;&amp;
               (Project.GameWindow.GetControllerState(((ControllerPlayer)Project.GameWindow.Players[
            currentPlayer]).deviceNumber)[button]))
            {
               this.Invoke(cbp, new object[] { button });
               pressedButtons |= (1 &lt;&lt; button);
            }
            else
               pressedButtons &amp;= ~(1 &lt;&lt; button);
         }
         System.Threading.Thread.Sleep(0);
      }
   }

   private void BeginControllerThread()
   {
      EndControllerThread();
      System.Threading.ThreadStart ts = new System.Threading.ThreadStart(ReadControllerLoop);
      readControllerThread = new System.Threading.Thread(ts);
      readControllerThread.Start();
   }

   private void EndControllerThread()
   {
      if (readControllerThread != null)
      {
         bExitControllerThread = true;
         readControllerThread.Join();
      }
      readControllerThread = null;
      bExitControllerThread = false;
   }

   private void txtJButton_Enter(object sender, System.EventArgs e)
   {
      txtCurJButton = (System.Windows.Forms.TextBox)sender;
      BeginControllerThread();
   }

   private void txtJButton_Leave(object sender, System.EventArgs e)
   {
      txtCurJButton = null;
      EndControllerThread();
   }
}

</Text>
  </SourceCode>
  <SourceCode Name="Display.cs" IsCustomObject="false">
    <Text>/*
 * Created using Scrolling Game Development Kit 2.0
 * See Project.cs for copyright/licensing details
 */

using System;
using System.Collections;
using OpenTK;
using OpenTK.Graphics;
using OpenTK.Graphics.OpenGL;
using System.Collections.Generic;

/// &lt;summary&gt;
/// Specifies a size, color depth and scaling factor for a display.
/// &lt;/summary&gt;
/// &lt;remarks&gt;Color depth only applies when the display is in full screen mode.&lt;/remarks&gt;
public enum GameDisplayMode
{
   /// &lt;summary&gt;
   /// 320x240-pixel display with 16-bit color
   /// &lt;/summary&gt;
   m320x240x16,
   /// &lt;summary&gt;
   /// 640x480-pixel display with 16-bit color
   /// &lt;/summary&gt;
   m640x480x16,
   /// &lt;summary&gt;
   /// 800x600-pixel display with 16-bit color
   /// &lt;/summary&gt;
   m800x600x16,
   /// &lt;summary&gt;
   /// 1024x768-pixel display with 16-bit color
   /// &lt;/summary&gt;
   m1024x768x16,
   /// &lt;summary&gt;
   /// 1280x1024-pixel display with 16-bit color
   /// &lt;/summary&gt;
   m1280x1024x16,
   /// &lt;summary&gt;
   /// 1920x1080-pixel display with 16-bit color
   /// &lt;/summary&gt;
   m1920x1080x16,
   /// &lt;summary&gt;
   /// 320x240-pixel display with 24-bit color
   /// &lt;/summary&gt;
   m320x240x24,
   /// &lt;summary&gt;
   /// 640x480-pixel display with 24-bit color
   /// &lt;/summary&gt;
   m640x480x24,
   /// &lt;summary&gt;
   /// 800x600-pixel display with 24-bit color
   /// &lt;/summary&gt;
   m800x600x24,
   /// &lt;summary&gt;
   /// 1024x768-pixel display with 24-bit color
   /// &lt;/summary&gt;
   m1024x768x24,
   /// &lt;summary&gt;
   /// 1280x1024-pixel display with 24-bit color
   /// &lt;/summary&gt;
   m1280x1024x24,
   /// &lt;summary&gt;
   /// 1920x1080-pixel display with 24-bit color
   /// &lt;/summary&gt;
   m1920x1080x24,
   /// &lt;summary&gt;
   /// 160x120-pixel view with 16-bit color, scaled up to 320x240-pixel display
   /// &lt;/summary&gt;
   m160x120x16_2x,
   /// &lt;summary&gt;
   /// 320x240-pixel view with 16-bit color, scaled up to 640x480-pixel display
   /// &lt;/summary&gt;
   m320x240x16_2x,
   /// &lt;summary&gt;
   /// 400x300-pixel view with 16-bit color, scaled up to 800x600-pixel display
   /// &lt;/summary&gt;
   m400x300x16_2x,
   /// &lt;summary&gt;
   /// 512x384-pixel view with 16-bit color, scaled up to 1024x768-pixel display
   /// &lt;/summary&gt;
   m512x384x16_2x,
   /// &lt;summary&gt;
   /// 640x512-pixel view with 16-bit color, scaled up to 1280x1024-pixel display
   /// &lt;/summary&gt;
   m640x512x16_2x,
   /// &lt;summary&gt;
   /// 960x540-pixel view with 16-bit color, scaled up to 1920x1080-pixel display
   /// &lt;/summary&gt;
   m960x540x16_2x,
   /// &lt;summary&gt;
   /// 160x120-pixel view with 24-bit color, scaled up to 320x240-pixel display
   /// &lt;/summary&gt;
   m160x120x24_2x,
   /// &lt;summary&gt;
   /// 320x240-pixel view with 24-bit color, scaled up to 640x480-pixel display
   /// &lt;/summary&gt;
   m320x240x24_2x,
   /// &lt;summary&gt;
   /// 400x300-pixel view with 24-bit color, scaled up to 800x600-pixel display
   /// &lt;/summary&gt;
   m400x300x24_2x,
   /// &lt;summary&gt;
   /// 512x384-pixel view with 24-bit color, scaled up to 1024x768-pixel display
   /// &lt;/summary&gt;
   m512x384x24_2x,
   /// &lt;summary&gt;
   /// 640x512-pixel view with 24-bit color, scaled up to 1280x1024-pixel display
   /// &lt;/summary&gt;
   m640x512x24_2x,
   /// &lt;summary&gt;
   /// 960x540-pixel view with 24-bit color, scaled up to 1920x1080-pixel display
   /// &lt;/summary&gt;
   m960x540x24_2x,
}

/// &lt;summary&gt;
/// Manages the display device on which real-time game graphics are drawn
/// &lt;/summary&gt;
[Serializable()]
public partial class Display : GLControl, IDisposable, System.Runtime.Serialization.ISerializable
{
   #region Embedded Classes
   /// &lt;summary&gt;
   /// Object used to refer to a texture (graphic sheet) managed by a particular &lt;see cref="Display" /&gt;.
   /// &lt;/summary&gt;
   public partial class TextureRef : IDisposable
   {
      private string m_Name;
      private int m_Texture = 0;
      private int m_NormalMap = 0;
      private Display m_Display;
      private int m_Width = 0;
      private int m_Height = 0;
      private bool? m_HasNormalMap = null;

      public TextureRef(Display Disp, string Name)
      {
         m_Display = Disp;
         m_Name = Name;
      }

      /// &lt;summary&gt;
      /// Name of a graphic sheet
      /// &lt;/summary&gt;
      public string Name
      {
         get
         {
            return m_Name;
         }
      }

      /// &lt;summary&gt;
      /// Make this texture current so texture-based drawing operations use this texture.
      /// &lt;/summary&gt;
      /// &lt;param name="sp"&gt;Which shader program's variables should be bound to this texture.&lt;/param&gt;
      /// &lt;param name="enableLighting"&gt;True to allow this texture's normal map (which is the
      /// same name with " nm" appended) to also be activated for this texture, or false to
      /// prevent this activation from also activating a normal map if one exists.&lt;/param&gt;
      /// &lt;remarks&gt;This is implicitly called by
      /// &lt;see cref="Display.DrawFrame(TextureRef, System.Drawing.Rectangle, System.Drawing.PointF[], int, int)"/&gt;
      /// whenever the specified texture is different than the already active texture.&lt;/remarks&gt;
      public void Use(ShaderProgram sp, bool enableLighting)
      {
         if (m_Texture == 0)
            m_Texture = m_Display.GetTexture(m_Name, TextureUnit.Texture0);
         if (m_Texture != 0)
         {
            GL.ActiveTexture(TextureUnit.Texture0);
            GL.BindTexture(texTarget, m_Texture);
            int texLoc = sp.GetUniformLocation("tex");
            GL.Uniform1(texLoc, 0);
            CheckError();
         }

         if ((m_NormalMap == 0) &amp;&amp; enableLighting)
            m_NormalMap = m_Display.GetTexture(m_Name + " nm", TextureUnit.Texture1);
         if ((m_NormalMap != 0) &amp;&amp; enableLighting)
         {
            GL.ActiveTexture(TextureUnit.Texture1);
            GL.BindTexture(texTarget, m_NormalMap);
            int texLoc = sp.GetUniformLocation("norm");
            GL.Uniform1(texLoc, 1);
            CheckError();
         }
      }

      /// &lt;summary&gt;
      /// Returns true if a normal map exists for this texture or false if not.
      /// &lt;/summary&gt;
      /// &lt;remarks&gt;A normal map is a graphic sheet aka texture with the same name, but
      /// an additional "nm" appended after a space.&lt;/remarks&gt;
      public bool HasNormalMap
      {
         get
         {
            if (!m_HasNormalMap.HasValue)
               m_HasNormalMap = Project.Resources.GetObject(m_Name + " nm") != null;
            return m_HasNormalMap.Value;
         }
      }

      /// &lt;summary&gt;
      /// Returns OpenGL handle to the texture referenced by this object
      /// &lt;/summary&gt;
      public int Texture
      {
         get
         {
            if (m_Texture == 0)
            {
               m_Texture = m_Display.GetTexture(m_Name, TextureUnit.Texture0);
            }
            return m_Texture;
         }
      }

      public int Width
      {
         get
         {
            if (m_Width &lt;= 0)
               m_Width = m_Display.m_TextureSizes[m_Name].Width;
            return m_Width;
         }
      }

      public int Height
      {
         get
         {
            if (m_Height &lt;= 0)
               m_Height = m_Display.m_TextureSizes[m_Name].Height;
            return m_Height;
         }
      }

      #region IDisposable Members
      /// &lt;summary&gt;
      /// Releases all resources for the associated texture.
      /// &lt;/summary&gt;
      public void Dispose()
      {
         if (m_Texture != 0)
         {
            if (m_Display.Context != null)
            {
               if (!m_Display.Context.IsCurrent)
                  m_Display.MakeCurrent();
               GL.DeleteTextures(1, ref m_Texture);
               if (m_NormalMap != 0)
                  GL.DeleteTextures(1, ref m_NormalMap);
               m_NormalMap = 0;
            }
            m_Texture = 0;
         }
      }
      #endregion
   }

   private enum DisplayOperation
   {
      None = 0,
      DrawFrames,
      DrawLines,
      DrawPoints
   }
   #endregion

   #region Fields
   private System.Collections.Generic.Dictionary&lt;string, WeakReference&gt; m_TextureRefs = null;
   private System.Collections.Generic.Dictionary&lt;string, System.Drawing.Size&gt; m_TextureSizes = null;
   private GameDisplayMode m_GameDisplayMode;
   private DisplayOperation m_currentOp;
   private TextureRef m_currentTexture = null;
   private readonly int m_scaleFactor;
   private const TextureTarget texTarget = TextureTarget.Texture2D;
   private const EnableCap texCap = EnableCap.Texture2D;
   private static TextureRef m_DefaultFont = null;
   private static byte[] shadedStipple = new byte[] {
      0x55, 0x55, 0x55, 0x55, 0xAA, 0xAA, 0xAA, 0xAA,
      0x55, 0x55, 0x55, 0x55, 0xAA, 0xAA, 0xAA, 0xAA,
      0x55, 0x55, 0x55, 0x55, 0xAA, 0xAA, 0xAA, 0xAA,
      0x55, 0x55, 0x55, 0x55, 0xAA, 0xAA, 0xAA, 0xAA,
      0x55, 0x55, 0x55, 0x55, 0xAA, 0xAA, 0xAA, 0xAA,
      0x55, 0x55, 0x55, 0x55, 0xAA, 0xAA, 0xAA, 0xAA,
      0x55, 0x55, 0x55, 0x55, 0xAA, 0xAA, 0xAA, 0xAA,
      0x55, 0x55, 0x55, 0x55, 0xAA, 0xAA, 0xAA, 0xAA,
      0x55, 0x55, 0x55, 0x55, 0xAA, 0xAA, 0xAA, 0xAA,
      0x55, 0x55, 0x55, 0x55, 0xAA, 0xAA, 0xAA, 0xAA,
      0x55, 0x55, 0x55, 0x55, 0xAA, 0xAA, 0xAA, 0xAA,
      0x55, 0x55, 0x55, 0x55, 0xAA, 0xAA, 0xAA, 0xAA,
      0x55, 0x55, 0x55, 0x55, 0xAA, 0xAA, 0xAA, 0xAA,
      0x55, 0x55, 0x55, 0x55, 0xAA, 0xAA, 0xAA, 0xAA,
      0x55, 0x55, 0x55, 0x55, 0xAA, 0xAA, 0xAA, 0xAA,
      0x55, 0x55, 0x55, 0x55, 0xAA, 0xAA, 0xAA, 0xAA};
   private System.Drawing.Point endPoint = System.Drawing.Point.Empty;
   private int frameBuffer = -1;
   private int texUnscaledOutput = -1;
   /// &lt;summary&gt;
   /// Determines if requirements have already been checked or need to be
   /// (re-)checked during the next call to &lt;see cref="DrawFrame"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;value&gt;If true, requirements have already been checked.
   /// If false, requirements will be checked next time DrawFrame executes.&lt;/value&gt;
   public bool isInitialized = false;
   VertexBuffer&lt;TileVertex&gt; vertexBuffer;
   VertexBuffer&lt;ColoredVertex&gt; solidVertexBuffer;
   Matrix4 projectionMatrix;
   private LightSources[] lights;
   private VertexArray&lt;TileVertex&gt; normalVertexArray;
   private VertexArray&lt;TileVertex&gt; flatVertexArray;
   private VertexArray&lt;ColoredVertex&gt; solidVertexArray;
   private VertexArray&lt;TileVertex&gt; nolightVertexArray;
   private Color4 currentColor;
   /// &lt;summary&gt;
   /// Determines which set of light sources should be used in subsequent drawing operations.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Because light source positions are relative to the display window and not
   /// individual views within it (in case of a multi-view display for a multi-player game,
   /// for example), a different set of light source positions are stored for each view.&lt;/remarks&gt;
   public int currentView;
   /// &lt;summary&gt;
   /// Determines whether lights and normal maps should be processed during subsequent drawing
   /// operations.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Performance may be optimized by disabling this when lighting is not needed.
   /// This property is set to disable lighting when drawing layers whose lighting is
   /// disabled.&lt;/remarks&gt;
   public bool enableLighting;
   #endregion

   #region Initialization and clean-up
   /// &lt;summary&gt;
   /// Creates a default instance of Display with a resolution of 640x480x24 windowed.
   /// &lt;/summary&gt;
   public Display()
      : this(GameDisplayMode.m640x480x24, true)
   {
   }

   /// &lt;summary&gt;
   /// Create a display with the specified resolution and window state.
   /// &lt;/summary&gt;
   /// &lt;param name="mode"&gt;Determines the size or resolution of this display from a preset list of available modes.&lt;/param&gt;
   /// &lt;param name="windowed"&gt;Determines whether the display appears in a window or consumes the whole screen.&lt;/param&gt;
   public Display(GameDisplayMode mode, bool windowed)
      : base(CreateGraphicsMode(mode))
   {
      m_GameDisplayMode = mode;
      m_scaleFactor = (mode &gt;= GameDisplayMode.m160x120x16_2x ? 2 : 1);
   }

   private void Initialize()
   {
      if (isInitialized)
         return;

      // Check Requirements
      GL.Finish();
      string[] versionParts = GL.GetString(StringName.Version).Split(new char[] { '.' }, 3);
      int majorVer = int.Parse(versionParts[0]);
      int minorVer = int.Parse(versionParts[1]);
      if (majorVer &lt; 3)
      {
         string errString = "OpenGL version 3.0 is required";
         try
         {
            errString += "; your version is: " + GL.GetString(StringName.Version);
         }
         catch
         {
         }
         if (System.Windows.Forms.DialogResult.Cancel == System.Windows.Forms.MessageBox.Show(this, errString + "\r\nTry updating your video drivers.", "Requirement Check Warning", System.Windows.Forms.MessageBoxButtons.OKCancel, System.Windows.Forms.MessageBoxIcon.Exclamation, System.Windows.Forms.MessageBoxDefaultButton.Button2))
            throw new ApplicationException(errString);
      }

      // Create vertex buffer
      vertexBuffer = new VertexBuffer&lt;TileVertex&gt;(TileVertex.Size);
      solidVertexBuffer = new VertexBuffer&lt;ColoredVertex&gt;(ColoredVertex.Size);

      // Set up VertexArray objects
      VertexAttribute vaposition = new VertexAttribute("vPosition", 2, VertexAttribPointerType.Float, TileVertex.Size, 0);
      VertexAttribute vasrc = new VertexAttribute("vSrc", 2, VertexAttribPointerType.Float, TileVertex.Size, 2 * 4);
      VertexAttribute vacolor = new VertexAttribute("vColor", 4, VertexAttribPointerType.Float, TileVertex.Size, 4 * 4);
      normalVertexArray = new VertexArray&lt;TileVertex&gt;(vertexBuffer, ShaderProgram.NormalMappedShader, vaposition, vasrc, vacolor);
      flatVertexArray = new VertexArray&lt;TileVertex&gt;(vertexBuffer, ShaderProgram.FlatShader, vaposition, vasrc, vacolor);
      nolightVertexArray = new VertexArray&lt;TileVertex&gt;(vertexBuffer, ShaderProgram.NoLightShader, vaposition, vasrc, vacolor);
      VertexAttribute vaSolidPosition = new VertexAttribute("vPosition", 2, VertexAttribPointerType.Float, ColoredVertex.Size, 0);
      VertexAttribute vaSolidColor = new VertexAttribute("vColor", 4, VertexAttribPointerType.Float, ColoredVertex.Size, 2 * 4);
      solidVertexArray = new VertexArray&lt;ColoredVertex&gt;(solidVertexBuffer, ShaderProgram.SolidShader, vaSolidPosition, vaSolidColor);

      // One set of light sources for each possible view
      if (Project.MaxViews == 4)
         lights = new LightSources[] { new LightSources(), new LightSources(), new LightSources(), new LightSources() };
      else if (Project.MaxViews == 2)
         lights = new LightSources[] { new LightSources(), new LightSources() };
      else
         lights = new LightSources[] { new LightSources() };

      // Align to display
      System.Drawing.Size nativeSize = GetScreenSize(m_GameDisplayMode, false);
      projectionMatrix = Matrix4.CreateOrthographicOffCenter(0, nativeSize.Width, nativeSize.Height, 0, .1f, 10f);

      if (m_scaleFactor &gt; 1)
         Buffer(false, true);

      isInitialized = true;
   }
   #endregion

   #region Overrides
   protected override bool IsInputKey(System.Windows.Forms.Keys keyData)
   {
      return true;
   }
   protected override void OnResize(EventArgs e)
   {
      base.OnResize(e);
      if (GraphicsContext.CurrentContext == null)
         return;
      System.Drawing.Size nativeSize = GetScreenSize(m_GameDisplayMode, false);
      GL.Viewport(0, 0, nativeSize.Width, nativeSize.Height);
      projectionMatrix = Matrix4.CreateOrthographicOffCenter(0, nativeSize.Width, nativeSize.Height, 0, .1f, 10f);
   }

   protected override void WndProc(ref System.Windows.Forms.Message m)
   {
      switch (m.Msg)
      {
         case 0x2: // WM_DESTROY
            CheckError();
            Dispose();
            break;
      }
      base.WndProc(ref m);
   }

   protected override void Dispose(bool disposing)
   {
      // If controls are disposed in the wrong order, GL somehow gets into an error
      // state during non-application code.
      CheckError();
      if (disposing)
      {
         if (vertexBuffer != null)
         {
            vertexBuffer.Dispose();
            vertexBuffer = null;
         }
         if (solidVertexBuffer != null)
         {
            solidVertexBuffer.Dispose();
            solidVertexBuffer = null;
         }
         if (normalVertexArray != null)
         {
            normalVertexArray.Dispose();
            normalVertexArray = null;
         }
         if (flatVertexArray != null)
         {
            flatVertexArray.Dispose();
            flatVertexArray = null;
         }
         if (solidVertexArray != null)
         {
            solidVertexArray.Dispose();
            solidVertexArray = null;
         }
         if (nolightVertexArray != null)
         {
            nolightVertexArray.Dispose();
            nolightVertexArray = null;
         }
         ShaderProgram.DisposeShaderPrograms();
         OpenTK.DisplayDevice.Default.RestoreResolution();
         DisposeAllTextures();
      }
      if (frameBuffer != -1)
      {
         GL.DeleteFramebuffer(frameBuffer);
         frameBuffer = -1;
      }
      if (texUnscaledOutput != -1)
      {
         GL.DeleteTexture(texUnscaledOutput);
         texUnscaledOutput = -1;
      }
      base.Dispose(disposing);
   }
   #endregion

   #region Private members
   private int GetTexture(string Name, TextureUnit unit)
   {
      int texture;
      System.Drawing.Bitmap bmpTexture = (System.Drawing.Bitmap)Project.Resources.GetObject(Name);
      if (bmpTexture == null)
         return 0;
      GL.GenTextures(1, out texture);
      GL.ActiveTexture(unit);
      GL.BindTexture(texTarget, texture);
      CheckError();
      GL.TexParameter(texTarget, TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Linear);
      GL.TexParameter(texTarget, TextureParameterName.TextureMagFilter, (int)TextureMagFilter.Linear);
      CheckError();
      GL.TexParameter(texTarget, TextureParameterName.TextureWrapS, (int)TextureWrapMode.Clamp);
      GL.TexParameter(texTarget, TextureParameterName.TextureWrapT, (int)TextureWrapMode.Clamp);
      CheckError();

      int useWidth = OpenTK.MathHelper.NextPowerOfTwo(bmpTexture.Width);
      int useHeight = OpenTK.MathHelper.NextPowerOfTwo(bmpTexture.Height);

      bool useSubTexture = (useWidth != bmpTexture.Width) || (useHeight != bmpTexture.Height);

      int texSize;
      GL.GetInteger(GetPName.MaxTextureSize, out texSize);
      CheckError();
      if ((texSize &lt; useWidth) ||
          (texSize &lt; useHeight))
         throw new System.ApplicationException("Texture " + Name + " is size " + useWidth + "x" + useHeight +
            " (after rounding up to power of 2), but the current OpenGL video drivers only support textures up to " + texSize.ToString());

      if (m_TextureSizes == null)
         m_TextureSizes = new System.Collections.Generic.Dictionary&lt;string, System.Drawing.Size&gt;();
      if (!m_TextureSizes.ContainsKey(Name))
         m_TextureSizes[Name] = new System.Drawing.Size(useWidth, useHeight);

      System.Drawing.Imaging.BitmapData bits = bmpTexture.LockBits(new System.Drawing.Rectangle(0, 0, bmpTexture.Width, bmpTexture.Height),
         System.Drawing.Imaging.ImageLockMode.ReadOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
      try
      {
         if (useSubTexture)
         {
            GL.TexImage2D(texTarget, 0, PixelInternalFormat.Rgba8, useWidth, useHeight, 0, PixelFormat.Bgra, PixelType.UnsignedByte, IntPtr.Zero);
            GL.TexSubImage2D(texTarget, 0, 0, 0, bmpTexture.Width, bmpTexture.Height, PixelFormat.Bgra, PixelType.UnsignedByte, bits.Scan0);
            CheckError();
         }
         else
         {
            GL.TexImage2D(texTarget, 0, PixelInternalFormat.Rgba8, useWidth, useHeight, 0, PixelFormat.Bgra, PixelType.UnsignedByte, bits.Scan0);
            CheckError();
         }
      }
      finally
      {
         bmpTexture.UnlockBits(bits);
      }
      return texture;
   }
   #endregion

   #region Public members
   /// &lt;summary&gt;
   /// Retrieve a reference to a hardware-supported graphic sheet ("texture") given its name
   /// &lt;/summary&gt;
   /// &lt;param name="Name"&gt;The name of a graphic sheet defined by the game&lt;/param&gt;
   /// &lt;returns&gt;Object that manages graphics on the hardware for this graphic sheet&lt;/returns&gt;
   public TextureRef GetTextureRef(string Name)
   {
      if (m_TextureRefs == null)
         m_TextureRefs = new System.Collections.Generic.Dictionary&lt;string, WeakReference&gt;();

      if (m_TextureRefs.ContainsKey(Name))
      {
         WeakReference wr = m_TextureRefs[Name];
         if (wr.IsAlive)
            return (TextureRef)wr.Target;
      }

      TextureRef tex = new TextureRef(this, Name);
      m_TextureRefs[Name] = new WeakReference(tex);
      return tex;
   }

   /// &lt;summary&gt;
   /// Release resources used by all hardware copies of graphic sheets
   /// &lt;/summary&gt;
   public void DisposeAllTextures()
   {
      if (m_TextureRefs != null)
      {
         foreach (System.Collections.Generic.KeyValuePair&lt;string, WeakReference&gt; de in m_TextureRefs)
         {
            if (de.Value.IsAlive)
               ((TextureRef)(de.Value).Target).Dispose();
         }
      }
   }

   /// &lt;summary&gt;
   /// Get the size of a display based on the specified mode
   /// &lt;/summary&gt;
   /// &lt;param name="mode"&gt;Game display mode used for the display&lt;/param&gt;
   /// &lt;param name="scaled"&gt;true to return the scaled size (multiplied by scaleFactor), false to return the native size&lt;/param&gt;
   /// &lt;returns&gt;Width and height in pixels&lt;/returns&gt;
   public static System.Drawing.Size GetScreenSize(GameDisplayMode mode, bool scaled)
   {
      int scale = scaled ? 2 : 1;
      switch (mode)
      {
         case GameDisplayMode.m320x240x16:
         case GameDisplayMode.m320x240x24:
            return new System.Drawing.Size(320, 240);
         case GameDisplayMode.m640x480x16:
         case GameDisplayMode.m640x480x24:
            return new System.Drawing.Size(640, 480);
         case GameDisplayMode.m800x600x16:
         case GameDisplayMode.m800x600x24:
            return new System.Drawing.Size(800, 600);
         case GameDisplayMode.m1024x768x16:
         case GameDisplayMode.m1024x768x24:
            return new System.Drawing.Size(1024, 768);
         case GameDisplayMode.m1280x1024x16:
         case GameDisplayMode.m1280x1024x24:
            return new System.Drawing.Size(1280, 1024);
         case GameDisplayMode.m1920x1080x16:
         case GameDisplayMode.m1920x1080x24:
            return new System.Drawing.Size(1920, 1080);
         case GameDisplayMode.m160x120x16_2x:
         case GameDisplayMode.m160x120x24_2x:
            return new System.Drawing.Size(160 * scale, 120 * scale);
         case GameDisplayMode.m320x240x16_2x:
         case GameDisplayMode.m320x240x24_2x:
            return new System.Drawing.Size(320 * scale, 240 * scale);
         case GameDisplayMode.m400x300x16_2x:
         case GameDisplayMode.m400x300x24_2x:
            return new System.Drawing.Size(400 * scale, 300 * scale);
         case GameDisplayMode.m512x384x16_2x:
         case GameDisplayMode.m512x384x24_2x:
            return new System.Drawing.Size(512 * scale, 384 * scale);
         case GameDisplayMode.m640x512x16_2x:
         case GameDisplayMode.m640x512x24_2x:
            return new System.Drawing.Size(640 * scale, 512 * scale);
         case GameDisplayMode.m960x540x16_2x:
         case GameDisplayMode.m960x540x24_2x:
            return new System.Drawing.Size(960 * scale, 540 * scale);
      }
      return new System.Drawing.Size(0, 0);
   }

   /// &lt;summary&gt;
   /// Return the bit depth of the specified mode
   /// &lt;/summary&gt;
   /// &lt;param name="mode"&gt;GameDisplayMode value whose depth will be returned&lt;/param&gt;
   /// &lt;returns&gt;Integer value of 16 or 24&lt;/returns&gt;
   public static int GetModeDepth(GameDisplayMode mode)
   {
      switch (mode)
      {
         case GameDisplayMode.m320x240x16:
         case GameDisplayMode.m640x480x16:
         case GameDisplayMode.m800x600x16:
         case GameDisplayMode.m1024x768x16:
         case GameDisplayMode.m1280x1024x16:
         case GameDisplayMode.m1920x1080x16:
         case GameDisplayMode.m160x120x16_2x:
         case GameDisplayMode.m320x240x16_2x:
         case GameDisplayMode.m400x300x16_2x:
         case GameDisplayMode.m512x384x16_2x:
         case GameDisplayMode.m640x512x16_2x:
         case GameDisplayMode.m960x540x16_2x:
            return 16;
         default:
            return 24;
      }
   }

   /// &lt;summary&gt;
   /// Returns a GraphicsMode structure corresponding to the requested GameDisplayMode
   /// &lt;/summary&gt;
   /// &lt;param name="mode"&gt;Game requested display mode&lt;/param&gt;
   public static GraphicsMode CreateGraphicsMode(GameDisplayMode mode)
   {
      return new GraphicsMode(new ColorFormat(GetModeDepth(mode)));
   }

   /// &lt;summary&gt;
   /// Gets or sets the size/resolution and color depth of the display
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;If the display is windowed, this only affects the size. The color depth
   /// will match that of the user's desktop. In full screen mode this affects the
   /// resolution and color depth of the display.&lt;/remarks&gt;
   public GameDisplayMode GameDisplayMode
   {
      get
      {
         return m_GameDisplayMode;
      }
      set
      {
         m_GameDisplayMode = value;
         System.Drawing.Size nativeSize = GetScreenSize(m_GameDisplayMode, false);
         projectionMatrix = Matrix4.CreateOrthographicOffCenter(0, nativeSize.Width, nativeSize.Height, 0, .1f, 10f);
      }
   }

   /// &lt;summary&gt;
   /// Switch the monitor to the full-screen resolution required by &lt;see cref="GameDisplayMode"/&gt;.
   /// &lt;/summary&gt;
   public void SwitchToResolution()
   {
      System.Drawing.Size size = GetScreenSize(m_GameDisplayMode, true);
      int depth = GetModeDepth(m_GameDisplayMode);
      OpenTK.DisplayResolution best = null;
      foreach (OpenTK.DisplayResolution dr in OpenTK.DisplayDevice.Default.AvailableResolutions)
      {
         if ((dr.Width == size.Width) &amp;&amp; (dr.Height == size.Height))
         {
            if ((dr.BitsPerPixel == 32 ? 24 : 32) == depth)
            {
               if ((best == null) || (best.RefreshRate &lt; dr.RefreshRate))
                  best = dr;
            }
            else
            {
               if ((best == null) || (best.BitsPerPixel != depth) &amp;&amp;
                   (best.BitsPerPixel &lt; dr.BitsPerPixel))
                  best = dr;
            }
         }
      }
      if (best != null)
      {
         OpenTK.DisplayDevice.Default.ChangeResolution(best);
         return;
      }
      throw new ApplicationException("Cannot match display mode " + m_GameDisplayMode.ToString());
   }

   /// &lt;summary&gt;
   /// Restores the original (desktop) resolution, for example after switching to full
   /// screen mode in another resolution with &lt;see cref="SwitchToResolution"/&gt;.
   /// &lt;/summary&gt;
   public static void RestoreResolution()
   {
      OpenTK.DisplayDevice.Default.RestoreResolution();
   }

   /// &lt;summary&gt;
   /// Draw a rectangle from a texture on the display
   /// &lt;/summary&gt;
   /// &lt;param name="texture"&gt;Texture from which graphics are copied&lt;/param&gt;
   /// &lt;param name="sourceRect"&gt;Specifies the source area of the copy&lt;/param&gt;
   /// &lt;param name="corners"&gt;Specifies the corners (counter-clockwise) of the output quadrilateral&lt;/param&gt;
   /// &lt;param name="offsetX"&gt;Specifies the horizontal (rightward) offset of the corners&lt;/param&gt;
   /// &lt;param name="offsetY"&gt;Specifies the vertical (downward) offset of the corners&lt;/param&gt;
   public void DrawFrame(TextureRef texture, System.Drawing.Rectangle sourceRect, System.Drawing.PointF[] corners, int offsetX, int offsetY)
   {
      if ((m_currentOp != DisplayOperation.DrawFrames) ||
          (m_currentTexture != texture))
      {
         Initialize();
         Flush();

         GL.Enable(EnableCap.Blend);
         GL.BlendFunc(BlendingFactorSrc.SrcAlpha, BlendingFactorDest.OneMinusSrcAlpha);
         GL.Disable(EnableCap.PolygonSmooth);
         GL.Enable(texCap);
         GL.Disable(EnableCap.DepthTest);
         GL.Disable(EnableCap.Lighting);
         GL.Disable(EnableCap.Dither);

         CheckError();
         if (enableLighting)
         {
            if (texture.HasNormalMap)
            {
               ShaderProgram.NormalMappedShader.Use(projectionMatrix);
               texture.Use(ShaderProgram.NormalMappedShader, enableLighting);
               normalVertexArray.Bind();
               lights[currentView].UseProgram(ShaderProgram.NormalMappedShader, "lights");
               lights[currentView].Set();
            }
            else
            {
               ShaderProgram.FlatShader.Use(projectionMatrix);
               texture.Use(ShaderProgram.FlatShader, enableLighting);
               flatVertexArray.Bind();
               lights[currentView].UseProgram(ShaderProgram.FlatShader, "lights");
               lights[currentView].Set();
            }
         }
         else
         {
            ShaderProgram.NoLightShader.Use(projectionMatrix);
            texture.Use(ShaderProgram.NoLightShader, enableLighting);
            nolightVertexArray.Bind();
         }
         m_currentOp = DisplayOperation.DrawFrames;
         m_currentTexture = texture;
      }

      vertexBuffer.AddVertex(new TileVertex(corners[0].X + offsetX, corners[0].Y + offsetY, sourceRect.X, sourceRect.Y, currentColor));
      vertexBuffer.AddVertex(new TileVertex(corners[1].X + offsetX, corners[1].Y + offsetY, sourceRect.X, sourceRect.Bottom, currentColor));
      vertexBuffer.AddVertex(new TileVertex(corners[2].X + offsetX, corners[2].Y + offsetY, sourceRect.Right, sourceRect.Bottom, currentColor));
      vertexBuffer.AddVertex(new TileVertex(corners[3].X + offsetX, corners[3].Y + offsetY, sourceRect.Right, sourceRect.Y, currentColor));
   }

   /// &lt;summary&gt;
   /// Finishes any pending drawing operation on the display.
   /// &lt;/summary&gt;
   public void Flush()
   {
      switch (m_currentOp)
      {
         case DisplayOperation.DrawFrames:
            vertexBuffer.Bind();
            vertexBuffer.BufferData();
            vertexBuffer.Draw(PrimitiveType.Quads);
            break;
         case DisplayOperation.DrawLines:
            solidVertexBuffer.Bind();
            solidVertexBuffer.BufferData();
            solidVertexBuffer.Draw(PrimitiveType.LineStrip);
            break;
         case DisplayOperation.DrawPoints:
            solidVertexBuffer.Bind();
            solidVertexBuffer.BufferData();
            solidVertexBuffer.Draw(PrimitiveType.Points);
            break;
      }
      GL.BindBuffer(BufferTarget.ArrayBuffer, 0);
      GL.UseProgram(0);
      GL.BindVertexArray(0);
      if (solidVertexBuffer != null)
         solidVertexBuffer.Clear();
      if (vertexBuffer != null)
      vertexBuffer.Clear();
      m_currentOp = DisplayOperation.None;
      CheckError();
   }

   /// &lt;summary&gt;
   /// Draw series of connected lines connecting points ending in an arrow head.
   /// &lt;/summary&gt;
   /// &lt;param name="points"&gt;Points between which lines are drawn&lt;/param&gt;
   /// &lt;param name="width"&gt;Width of the lines&lt;/param&gt;
   /// &lt;param name="pattern"&gt;Bit pattern defining the line's dash style&lt;/param&gt;
   /// &lt;param name="antiAlias"&gt;Determines whether or not the line should be anti-aliased&lt;/param&gt;
   /// &lt;param name="arrowSize"&gt;The length of the arrow head in pixels&lt;/param&gt;
   /// &lt;param name="arrowShorten"&gt;The number of pixels (beyond arrowSize) by which the last line is shortened, and the arrowhead pulled back.&lt;/param&gt;
   public void DrawArrow(System.Drawing.Point[] points, int width, short pattern, bool antiAlias, int arrowSize, int arrowShorten)
   {
      Initialize();
      Flush();
      ShaderProgram.SolidShader.Use(projectionMatrix);
      solidVertexArray.Bind();
      solidVertexBuffer.Bind();
      solidVertexBuffer.Clear();

      GL.Disable(texCap);
      if (antiAlias)
      {
         GL.Enable(EnableCap.LineSmooth);
         GL.Hint(HintTarget.LineSmoothHint, HintMode.Nicest);
         GL.Enable(EnableCap.PolygonSmooth);
         GL.Hint(HintTarget.PolygonSmoothHint, HintMode.Nicest);
      }
      else
      {
         GL.Disable(EnableCap.LineSmooth);
         GL.Disable(EnableCap.PolygonSmooth);
      }
      GL.LineWidth(width);

      if ((pattern != unchecked((short)(0xffff))) &amp;&amp; (pattern != 0))
      {
         GL.Enable(EnableCap.LineStipple);
         GL.LineStipple(1, pattern);
      }
      else
      {
         GL.Disable(EnableCap.LineStipple);
      }

      for (int i = 0; i &lt; points.Length - 1; i++)
         solidVertexBuffer.AddVertex(new ColoredVertex(points[i].X, points[i].Y, currentColor));
      int x = points[points.Length - 1].X;
      int y = points[points.Length - 1].Y;
      int dx = x - points[points.Length - 2].X;
      int dy = y - points[points.Length - 2].Y;
      float len = (float)Math.Sqrt(dx * dx + dy * dy);
      if (len &gt; 1)
      {
         float ndx = dx * (arrowSize + arrowShorten) / len;
         float ndy = dy * (arrowSize + arrowShorten) / len;
         float x1 = x - ndx;
         float y1 = y - ndy;
         solidVertexBuffer.AddVertex(new ColoredVertex(x1, y1, currentColor));
         ndx = dx * arrowSize / len;
         ndy = dy * arrowSize / len;
         solidVertexBuffer.BufferData();
         solidVertexBuffer.Draw(PrimitiveType.LineStrip);
         solidVertexBuffer.Clear();

         GL.Enable(EnableCap.PolygonSmooth);
         GL.Hint(HintTarget.PolygonSmoothHint, HintMode.Nicest);
         solidVertexBuffer.AddVertex(new ColoredVertex(x1 - ndy / 2, y1 + ndx / 2, currentColor));
         solidVertexBuffer.AddVertex(new ColoredVertex(x1 + ndx, y1 + ndy, currentColor));
         solidVertexBuffer.AddVertex(new ColoredVertex(x1 + ndy / 2, y1 - ndx / 2, currentColor));
         solidVertexBuffer.BufferData();
         solidVertexBuffer.Draw(PrimitiveType.Triangles);
      }
      else
      {
         solidVertexBuffer.AddVertex(new ColoredVertex(points[points.Length - 1].X, points[points.Length - 1].Y, currentColor));
         solidVertexBuffer.BufferData();
         solidVertexBuffer.Draw(PrimitiveType.LineStrip);
      }
      solidVertexBuffer.Clear();
      GL.BindBuffer(BufferTarget.ArrayBuffer, 0);
      GL.UseProgram(0);
      GL.BindVertexArray(0);
      m_currentOp = DisplayOperation.None;
   }

   /// &lt;summary&gt;
   /// Begins drawing a series of connected lines.
   /// &lt;/summary&gt;
   /// &lt;param name="width"&gt;Width of the lines.&lt;/param&gt;
   /// &lt;param name="pattern"&gt;Bit pattern determining how/if the line is dashed.&lt;/param&gt;
   /// &lt;param name="antiAlias"&gt;Determines if the lines are anti-aliased.&lt;/param&gt;
   public void BeginLine(float width, short pattern, bool antiAlias)
   {
      Initialize();
      Flush();

      GL.Disable(texCap);
      if (antiAlias)
      {
         GL.Enable(EnableCap.LineSmooth);
         GL.Hint(HintTarget.LineSmoothHint, HintMode.Nicest);
      }
      else
      {
         GL.Disable(EnableCap.LineSmooth);
      }
      GL.LineWidth(width);

      if ((pattern != unchecked((short)(0xffff))) &amp;&amp; (pattern != 0))
      {
         GL.Enable(EnableCap.LineStipple);
         GL.LineStipple(1, pattern);
      }
      else
      {
         GL.Disable(EnableCap.LineStipple);
      }
      m_currentOp = DisplayOperation.DrawLines;
      solidVertexBuffer.Clear();
      solidVertexBuffer.Bind();
      solidVertexArray.Bind();
      ShaderProgram.SolidShader.Use(projectionMatrix);
   }

   /// &lt;summary&gt;
   /// Continues a line started with &lt;see cref="BeginLine"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;param name="x"&gt;Horizontal coordinate within the display&lt;/param&gt;
   /// &lt;param name="y"&gt;Vertical coordinate within the display&lt;/param&gt;
   /// &lt;remarks&gt;First first call to LineTo sets the beginning point
   /// of the line. Coordinates are relative to the top left corner of
   /// the display, not the layer or map.&lt;/remarks&gt;
   public void LineTo(int x, int y)
   {
      if (m_currentOp != DisplayOperation.DrawLines)
      {
         Initialize();
         Flush();
         BeginLine(1, 0, false);
      }
      ColoredVertex cv = new ColoredVertex(x, y, currentColor);
      solidVertexBuffer.AddVertex(new ColoredVertex(x, y, currentColor));
      endPoint = new System.Drawing.Point(x, y);
   }

   /// &lt;summary&gt;
   /// End a line begun with &lt;see cref="BeginLine"/&gt; with an arrowhead.
   /// &lt;/summary&gt;
   /// &lt;param name="x"&gt;Horizontal coordinate of the tip of the arrowhead&lt;/param&gt;
   /// &lt;param name="y"&gt;Vertical coordinate of the tip of the arrowhead&lt;/param&gt;
   /// &lt;param name="ArrowSize"&gt;Length of the arrowhead&lt;/param&gt;
   public void ArrowTo(int x, int y, int ArrowSize)
   {
      if (m_currentOp != DisplayOperation.DrawLines)
      {
         Initialize();
         Flush();
         BeginLine(1, 0, true);
         solidVertexBuffer.AddVertex(new ColoredVertex(endPoint.X, endPoint.Y, currentColor));
      }
      int dx = (x - endPoint.X);
      int dy = (y - endPoint.Y);
      float len = (float)Math.Sqrt(dx * dx + dy * dy);
      if (len &gt; 1)
      {
         float ndx = dx * ArrowSize / len;
         float ndy = dy * ArrowSize / len;
         float x1 = x - ndx;
         float y1 = y - ndy;
         solidVertexBuffer.AddVertex(new ColoredVertex(x1, y1, currentColor));
         Flush();

         m_currentOp = DisplayOperation.None;

         GL.Enable(EnableCap.PolygonSmooth);
         GL.Hint(HintTarget.PolygonSmoothHint, HintMode.Nicest);
         solidVertexBuffer.AddVertex(new ColoredVertex(x1 - ndy / 2, y1 + ndx / 2, currentColor));
         solidVertexBuffer.AddVertex(new ColoredVertex(x1 + ndx, y1 + ndy, currentColor));
         solidVertexBuffer.AddVertex(new ColoredVertex(x1 + ndy / 2, y1 - ndx / 2, currentColor));
         solidVertexBuffer.BufferData();
         solidVertexBuffer.Draw(PrimitiveType.Triangles);
         solidVertexBuffer.Clear();
      }
      else
         LineTo(x, y);
   }

   /// &lt;summary&gt;
   /// Draw a rectangular outline on the display.
   /// &lt;/summary&gt;
   /// &lt;param name="rect"&gt;Rectangle relative to the top left corner of the display.&lt;/param&gt;
   /// &lt;param name="pattern"&gt;Dash pattern applied to the lines forming the outline.&lt;/param&gt;
   public void DrawRectangle(System.Drawing.Rectangle rect, short pattern)
   {
      Initialize();
      Flush();
      if ((pattern == 0) || (pattern == unchecked((short)(0xffff))))
         GL.Disable(EnableCap.LineStipple);
      else
      {
         GL.Enable(EnableCap.LineStipple);
         GL.LineStipple(1, pattern);
      }
      System.Drawing.RectangleF rectf = rect;
      rectf.Offset(0.5f, 0.5f); // Align to pixel grid
      GL.Disable(EnableCap.LineSmooth);
      GL.LineWidth(1);
      GL.Disable(texCap);
      solidVertexBuffer.Bind();
      solidVertexArray.Bind();
      ShaderProgram.SolidShader.Use(projectionMatrix);
      solidVertexBuffer.AddVertex(new ColoredVertex(rectf.X, rectf.Y, currentColor));
      solidVertexBuffer.AddVertex(new ColoredVertex(rectf.X, rectf.Y + rectf.Height - 1, currentColor));
      solidVertexBuffer.AddVertex(new ColoredVertex(rectf.X + rectf.Width - 1, rectf.Y + rectf.Height - 1, currentColor));
      solidVertexBuffer.AddVertex(new ColoredVertex(rectf.X + rectf.Width - 1, rectf.Y, currentColor));
      solidVertexBuffer.BufferData();
      solidVertexBuffer.Draw(PrimitiveType.LineLoop);
      solidVertexBuffer.Clear();
      GL.UseProgram(0);
      GL.BindBuffer(BufferTarget.ArrayBuffer, 0);
      GL.BindVertexArray(0);
   }

   /// &lt;summary&gt;
   /// Fills a rectangular area with a solid color
   /// &lt;/summary&gt;
   /// &lt;param name="rect"&gt;Rectangular area to fill.&lt;/param&gt;
   /// &lt;remarks&gt;
   /// &lt;see cref="SetColor"/&gt; determines the color with which to fill
   /// the rectangle, and may be semi-translucent.
   /// &lt;seealso cref="SetColor"/&gt;&lt;/remarks&gt;
   public void FillRectangle(System.Drawing.Rectangle rect)
   {
      Initialize();
      Flush();
      m_currentOp = DisplayOperation.None;
      GL.Disable(texCap);
      solidVertexBuffer.Bind();
      ShaderProgram.SolidShader.Use(projectionMatrix);
      solidVertexArray.Bind();
      solidVertexBuffer.AddVertex(new ColoredVertex(rect.X, rect.Y, currentColor));
      solidVertexBuffer.AddVertex(new ColoredVertex(rect.X, rect.Y + rect.Height, currentColor));
      solidVertexBuffer.AddVertex(new ColoredVertex(rect.X + rect.Width, rect.Y + rect.Height, currentColor));
      solidVertexBuffer.AddVertex(new ColoredVertex(rect.X + rect.Width, rect.Y, currentColor));
      solidVertexBuffer.BufferData();
      solidVertexBuffer.Draw(PrimitiveType.Quads);
      solidVertexBuffer.Clear();
      GL.UseProgram(0);
      GL.BindBuffer(BufferTarget.ArrayBuffer, 0);
      GL.BindVertexArray(0);
   }

   /// &lt;summary&gt;
   /// Specifies the size of points drawn with &lt;see cref="DrawPoint"/&gt;.
   /// &lt;/summary&gt;
   public int PointSize
   {
      set
      {
         Flush();
         m_currentOp = DisplayOperation.None;
         GL.PointSize(value);
      }
   }

   /// &lt;summary&gt;
   /// Draw a point in the display
   /// &lt;/summary&gt;
   /// &lt;param name="location"&gt;Coordinate relative to the top left corner of the display.&lt;/param&gt;
   public void DrawPoint(System.Drawing.Point location)
   {
      if (m_currentOp != DisplayOperation.DrawPoints)
      {
         Initialize();
         Flush();
         GL.Hint(HintTarget.PointSmoothHint, HintMode.Nicest);
         GL.Enable(EnableCap.PointSmooth);
         GL.Disable(texCap);
         solidVertexBuffer.Bind();
         solidVertexArray.Bind();
         ShaderProgram.SolidShader.Use(projectionMatrix);
         m_currentOp = DisplayOperation.DrawPoints;
      }
      solidVertexBuffer.AddVertex(new ColoredVertex(location.X, location.Y, currentColor));
   }

   /// &lt;summary&gt;
   /// Set the current color for drawing operations.
   /// &lt;/summary&gt;
   /// &lt;param name="color"&gt;Color to select.&lt;/param&gt;
   public void SetColor(System.Drawing.Color color)
   {
      currentColor = new Color4(color.R, color.G, color.B, color.A);
   }

   /// &lt;summary&gt;
   /// Set the current color for drawing operations.
   /// &lt;/summary&gt;
   /// &lt;param name="color"&gt;Color as an integer with bytes in ARGB order.&lt;/param&gt;
   public void SetColor(int color)
   {
      SetColor(System.Drawing.Color.FromArgb(color));
   }

   /// &lt;summary&gt;
   /// Draw a shaded rectangular frame.
   /// &lt;/summary&gt;
   /// &lt;param name="inner"&gt;Inner, empty portion of the rectangle&lt;/param&gt;
   /// &lt;param name="thickness"&gt;Thickness of the frame in pixels.&lt;/param&gt;
   /// &lt;param name="color1"&gt;Background color&lt;/param&gt;
   /// &lt;param name="color2"&gt;Foreground dither color&lt;/param&gt;
   public void DrawShadedRectFrame(System.Drawing.Rectangle inner, int thickness, System.Drawing.Color color1, System.Drawing.Color color2)
   {
      Initialize();
      Flush();
      GL.Disable(texCap);
      GL.Disable(EnableCap.PolygonStipple);
      SetColor(color1);
      solidVertexBuffer.Bind();
      solidVertexArray.Bind();
      ShaderProgram.SolidShader.Use(projectionMatrix);
      SendRectFramePoints(inner, thickness);
      solidVertexBuffer.BufferData();
      solidVertexBuffer.Draw(PrimitiveType.QuadStrip);
      solidVertexBuffer.Clear();
      GL.Enable(EnableCap.PolygonStipple);
      GL.PolygonStipple(shadedStipple);
      SetColor(color2);
      SendRectFramePoints(inner, thickness);
      solidVertexBuffer.BufferData();
      solidVertexBuffer.Draw(PrimitiveType.QuadStrip);
      solidVertexBuffer.Clear();
      GL.Disable(EnableCap.PolygonStipple);
   }

   private void SendRectFramePoints(System.Drawing.Rectangle inner, int thickness)
   {
      solidVertexBuffer.AddVertex(new ColoredVertex(inner.X - thickness, inner.Y - thickness, currentColor));
      solidVertexBuffer.AddVertex(new ColoredVertex(inner.X - 1, inner.Y - 1, currentColor));
      solidVertexBuffer.AddVertex(new ColoredVertex(inner.X - thickness, inner.Y + inner.Height + thickness - 1, currentColor));
      solidVertexBuffer.AddVertex(new ColoredVertex(inner.X - 1, inner.Y + inner.Height, currentColor));
      solidVertexBuffer.AddVertex(new ColoredVertex(inner.X + inner.Width + thickness - 1, inner.Y + inner.Height + thickness - 1, currentColor));
      solidVertexBuffer.AddVertex(new ColoredVertex(inner.X + inner.Width, inner.Y + inner.Height, currentColor));
      solidVertexBuffer.AddVertex(new ColoredVertex(inner.X + inner.Width + thickness - 1, inner.Y - thickness, currentColor));
      solidVertexBuffer.AddVertex(new ColoredVertex(inner.X + inner.Width, inner.Y - 1, currentColor));
      solidVertexBuffer.AddVertex(new ColoredVertex(inner.X - thickness, inner.Y - thickness, currentColor));
      solidVertexBuffer.AddVertex(new ColoredVertex(inner.X - 1, inner.Y - 1, currentColor));
   }

   /// &lt;summary&gt;
   /// Clear the display of all graphics.
   /// &lt;/summary&gt;
   public void Clear()
   {
      Flush();
      GL.Clear(ClearBufferMask.AccumBufferBit | ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit | ClearBufferMask.StencilBufferBit);
   }

   /// &lt;summary&gt;
   /// Set the clipping rectangle that determines the area of the display which will be
   /// affected by all drawing operations.
   /// &lt;/summary&gt;
   /// &lt;param name="rect"&gt;Rectangle relative to the top-left corner of the display in pixel coordinates.&lt;/param&gt;
   public void Scissor(System.Drawing.Rectangle rect)
   {
      Flush();
      GL.Enable(EnableCap.ScissorTest);
      System.Drawing.Size nativeSize = GetScreenSize(m_GameDisplayMode, false);
      GL.Scissor(rect.X, nativeSize.Height - (rect.Y + rect.Height), rect.Width, rect.Height);
   }

   /// &lt;summary&gt;
   /// Disables clipping defined with &lt;see cref="Scissor"/&gt;.
   /// &lt;/summary&gt;
   public void ScissorOff()
   {
      Flush();
      GL.Disable(EnableCap.ScissorTest);
   }

   /// &lt;summary&gt;
   /// Check if any internal graphics-related errors have occurred and report them if so.
   /// &lt;/summary&gt;
   public static void CheckError()
   {
      if (GraphicsContext.CurrentContext == null)
         return;
      ErrorCode ec = GL.GetError();
      if (ec != 0)
      {
         throw new System.Exception(ec.ToString());
      }
   }

   /// &lt;summary&gt;
   /// Draws a string of text on the display using the "CoolFont" graphic sheet
   /// &lt;/summary&gt;
   /// &lt;param name="text"&gt;String to be drawn. Embedded line feeds (\n) are the only cause for line breaks.&lt;/param&gt;
   /// &lt;param name="x"&gt;Horizontal coordinate relative to the top left corner of the display where drawing begins.&lt;/param&gt;
   /// &lt;param name="y"&gt;Vertical coordinate relative to the top left corner of the display where drawing begins.&lt;/param&gt;
   /// &lt;remarks&gt;An error will occur if there is no "CoolFont" graphic sheet in the project.
   /// This function is only a very basic implementation of text drawing intended for debugging purposes.
   /// For more full-featured text support, see the &lt;see cref="GeneralRules.ShowMessage"/&gt; rule function.&lt;/remarks&gt;
   public void DrawText(string text, int x, int y)
   {
      const int charWidth = 13;
      const int charHeight = 18;
      if (m_DefaultFont == null)
      {
         object testExist = Project.Resources.GetObject("CoolFont");
         if (testExist == null)
            throw new ApplicationException("In order to use Display.DrawText, the project must have a Graphic Sheet named \"CoolFont\"");
         m_DefaultFont = GetTextureRef("CoolFont");
      }
      byte[] charBytes = System.Text.Encoding.ASCII.GetBytes(text);
      System.Drawing.PointF[] corners = new System.Drawing.PointF[]
         { new System.Drawing.PointF(0, 0),
           new System.Drawing.PointF(0, charHeight),
           new System.Drawing.PointF(charWidth, charHeight),
           new System.Drawing.PointF(charWidth, 0)};
      int origX = x;
      for (int charIdx = 0; charIdx &lt; charBytes.Length; charIdx++)
      {
         byte curChar = charBytes[charIdx];
         if (curChar &gt; 32)
         {
            int col = (curChar - 33) % 24;
            int row = (curChar - 33) / 24;
            System.Drawing.Rectangle sourceRect = new System.Drawing.Rectangle(
               col * charWidth, row * charHeight, charWidth, charHeight);
            DrawFrame(m_DefaultFont, sourceRect, corners, x, y);
            x += charWidth;
         }
         else if (curChar == 10)
         {
            x = origX;
            y += charHeight;
         }
      }
   }

   /// &lt;summary&gt;
   /// Set the properties of one of the display's light sources for real-time lighting effects.
   /// &lt;/summary&gt;
   /// &lt;param name="index"&gt;Indicates which light source to set. Must be between 0 and MAX_LIGHTS - 1, inclusive&lt;/param&gt;
   /// &lt;param name="windowCoordinate"&gt;Coordinate within the display at which the light should be positioned with the origin at the top left corner&lt;/param&gt;
   /// &lt;param name="falloff"&gt;Constant, linear and quadratic falloff of the light intensity. Google linear light falloff for details.&lt;/param&gt;
   /// &lt;param name="color"&gt;Color and intensity of the light source. Alpha channel indicates intensity.&lt;/param&gt;
   /// &lt;param name="aimX"&gt;Relative horizontal offset of direction in which the light points.&lt;/param&gt;
   /// &lt;param name="aimY"&gt;Relative vertical offset of direction in which the light points.&lt;/param&gt;
   /// &lt;param name="aimZ"&gt;Relative depth offset of direction in which the light points.&lt;/param&gt;
   /// &lt;param name="lightZ"&gt;Z position of light source relative to map layer. Positive moves from layer toward viewer.&lt;/param&gt;
   /// &lt;param name="apertureFocus"&gt;Determines how focused the light source is. 1 is an invisibly narrow beam and 0 covers a 180-degree arc.&lt;/param&gt;
   /// &lt;param name="apertureSoftness"&gt;Determines how soft the edges of the light beam are.&lt;/param&gt;
   /// &lt;param name="walls"&gt;Array of Vector3 structures specifying the endpoints of walls (in pairs)&lt;/param&gt;
   /// &lt;param name="wallCoordCount"&gt;Number of applicable (non-zero) elements in walls. This should be a multiple of 2.&lt;/param&gt;
   public void SetLightSource(int index, Vector2 windowCoordinate, Vector3 falloff, System.Drawing.Color color,
      float aimX, float aimY, float aimZ, float lightZ, float apertureFocus, float apertureSoftness, Vector3[] walls, int wallCoordCount)
   {
      if (index &gt;= LightSources.MAX_LIGHTS)
         throw new IndexOutOfRangeException("SetLightSource index must be less than MAX_LIGHTS");

      System.Drawing.Size nativeSize = GetScreenSize(m_GameDisplayMode, false);
      lights[currentView][index].Falloff = falloff;
      lights[currentView][index].Position = new Vector3(
         windowCoordinate.X, nativeSize.Height - windowCoordinate.Y, lightZ);
      lights[currentView][index].Color = color;
      lights[currentView][index].Aim = new Vector3(aimX, -aimY, aimZ);
      lights[currentView][index].ApertureFocus = apertureFocus;
      lights[currentView][index].ApertureSoftness = apertureSoftness;
      int wallIndex;
      for (wallIndex = 0; wallIndex &lt; wallCoordCount; wallIndex++)
         lights[currentView][index][wallIndex] = new Vector3(walls[wallIndex].X, nativeSize.Height - walls[wallIndex].Y, walls[wallIndex].Z);
      while (wallIndex &lt; LightSource.wallsPerLight * 2)
         lights[currentView][index][wallIndex++] = new Vector3(0, 0, 0);
   }

   /// &lt;summary&gt;
   /// Reset all light sources to initial default behavior
   /// &lt;/summary&gt;
   public void ResetLights()
   {
      lights[currentView].Reset();
   }

   /// &lt;summary&gt;
   /// Maximum number of light sources that can be active during any particular drawing operation.
   /// &lt;/summary&gt;
   public const int MAX_LIGHTS = LightSources.MAX_LIGHTS;

   /// &lt;summary&gt;
   /// Return the rectangle into which code can draw using game-native coordinates
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This rectangle's coordinates will be half of the physical coordinates if scaleFactor is 2.&lt;/remarks&gt;
   public System.Drawing.Rectangle NativeDisplayRect
   {
      get
      {
         return new System.Drawing.Rectangle(DisplayRectangle.X, DisplayRectangle.Y, DisplayRectangle.Width / m_scaleFactor, DisplayRectangle.Height / m_scaleFactor);
      }
   }

   /// &lt;summary&gt;
   /// Controls how graphics output is buffered and copied to the display.
   /// &lt;/summary&gt;
   /// &lt;param name="copy"&gt;When true, the content of the buffer will be copied to the display, scaling
   /// the buffer to the size of the display if necessary.&lt;/param&gt;
   /// &lt;param name="enable"&gt;When true, subsequent drawing operations will go to a buffer whose size is
   /// determined by the native game display size instead od directly to the screen. When false, this
   /// buffer, if it exists will be bypassed.&lt;/param&gt;
   /// &lt;remarks&gt;The purpose of this command is to optimize scaling because lighting effects
   /// can severly burden the GPU if they happen at the scaled up size. Therefore, when scaling up,
   /// everything is rendered to the smaller buffer, and then copied and scaled to the larger size.&lt;/remarks&gt;
   private void Buffer(bool copy, bool enable)
   {
      if (copy)
      {
         Flush();
         GL.BindFramebuffer(FramebufferTarget.Framebuffer, 0);
         CheckError();
         System.Drawing.Size nativeSize = GetScreenSize(m_GameDisplayMode, false);
         System.Drawing.Size displaySize = GetScreenSize(m_GameDisplayMode, true);
         Matrix4 copyMatrix = Matrix4.CreateOrthographicOffCenter(0, displaySize.Width, 0, displaySize.Height, .1f, 10f);
         GL.Viewport(ClientRectangle);
         ShaderProgram.NoLightShader.Use(copyMatrix);
         GL.ActiveTexture(TextureUnit.Texture0);
         GL.BindTexture(texTarget, texUnscaledOutput);
         int texLoc = ShaderProgram.NoLightShader.GetUniformLocation("tex");
         GL.Uniform1(texLoc, 0);
         CheckError();
         nolightVertexArray.Bind();
         GL.Disable(EnableCap.DepthTest);
         vertexBuffer.AddVertex(new TileVertex(0, 0, 0, 0));
         vertexBuffer.AddVertex(new TileVertex(0, displaySize.Height, 0, nativeSize.Height));
         vertexBuffer.AddVertex(new TileVertex(displaySize.Width, displaySize.Height, nativeSize.Width, nativeSize.Height));
         vertexBuffer.AddVertex(new TileVertex(displaySize.Width, 0, nativeSize.Width, 0));
         vertexBuffer.Bind();
         vertexBuffer.BufferData();
         vertexBuffer.Draw(PrimitiveType.Quads);
         Flush();
         GL.Viewport(0, 0, nativeSize.Width, nativeSize.Height);
      }

      if (enable)
      {
         if (frameBuffer == -1)
         {
            // Create frame buffer for scaling after rendering
            frameBuffer = GL.GenFramebuffer();
            GL.BindFramebuffer(FramebufferTarget.Framebuffer, frameBuffer);
            CheckError();
         }
         if (texUnscaledOutput == -1)
         {
            texUnscaledOutput = GL.GenTexture();
            GL.BindTexture(TextureTarget.Texture2D, texUnscaledOutput);
            CheckError();
            System.Drawing.Size nativeSize = GetScreenSize(m_GameDisplayMode, false);
            GL.TexImage2D(TextureTarget.Texture2D, 0, PixelInternalFormat.Rgb, nativeSize.Width, nativeSize.Height, 0, PixelFormat.Rgb, PixelType.UnsignedByte, IntPtr.Zero);
            CheckError();
            GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMinFilter, (int)TextureMinFilter.Nearest);
            GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMinFilter, (int)TextureMagFilter.Nearest);
            CheckError();
            GL.FramebufferTexture2D(FramebufferTarget.Framebuffer, FramebufferAttachment.ColorAttachment0, TextureTarget.Texture2D, texUnscaledOutput, 0);
            CheckError();
         }
         GL.BindFramebuffer(FramebufferTarget.Framebuffer, frameBuffer);
         CheckError();
      }
      else if (!copy)
      {
         GL.BindFramebuffer(FramebufferTarget.Framebuffer, 0);
         CheckError();
      }
   }

   /// &lt;summary&gt;
   /// Present the buffered display to the visible window.
   /// &lt;/summary&gt;
   public void FinishFrame()
   {
      if (frameBuffer != -1)
         Buffer(true, false);
      SwapBuffers();
      if (frameBuffer != -1)
         Buffer(false, true);
   }
   #endregion

   #region ISerializable Members
   /// &lt;summary&gt;
   /// This is for internal use only and is needed to control behavior of the
   /// Display with respect to the Save Game functions.
   /// &lt;/summary&gt;
   /// &lt;param name="info"&gt;Internal use only&lt;/param&gt;
   /// &lt;param name="context"&gt;Not used&lt;/param&gt;
   public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
   {
      info.SetType(typeof(DisplayRef));
   }
   #endregion
}

/// &lt;summary&gt;
/// Provides serialization "services" for the &lt;see cref="Display"/&gt; object, preventing
/// attempts to save or load data for the display object when the game is saved/loaded.
/// &lt;/summary&gt;
[Serializable()]
public partial class DisplayRef : System.Runtime.Serialization.IObjectReference, System.Runtime.Serialization.ISerializable
{

   private DisplayRef(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
   {
   }

   /// &lt;summary&gt;
   /// This is for internal use only and is needed to control behavior of the
   /// Display with respect to the Save Game functions.
   /// &lt;/summary&gt;
   public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
   {
      throw new System.NotImplementedException("Unexpected serialization call");
   }

   #region IObjectReference Members
   /// &lt;summary&gt;
   /// This is for internal use only and is needed to control behavior of the
   /// Display with respect to the Load Game functions.
   /// &lt;/summary&gt;
   public object GetRealObject(System.Runtime.Serialization.StreamingContext context)
   {
      return Project.GameWindow.GameDisplay;
   }
   #endregion
}</Text>
  </SourceCode>
  <SourceCode Name="Frame.cs" IsCustomObject="false">
    <Text>/*
 * Created using Scrolling Game Development Kit 2.0
 * See Project.cs for copyright/licensing details
 */
using System;
using System.Drawing;

/// &lt;summary&gt;
/// An instance of the Frame class represents one image from a frameset.
/// &lt;/summary&gt;
public partial struct Frame
{
   /// &lt;summary&gt;
   /// References the un-transformed graphics on which this frame is based
   /// &lt;/summary&gt;
   public Display.TextureRef GraphicSheetTexture;
   /// &lt;summary&gt;
   /// Refers to an index into the graphic sheet of the individual graphic on which this frame is based
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This is informational only. The actual graphic is obtained using
   /// &lt;see cref="SourceRect"/&gt;.&lt;/remarks&gt;
   public short CellIndex;
   /// &lt;summary&gt;
   /// Defines the transformed corners of this frame when drawn.
   /// &lt;/summary&gt;
   public PointF[] Corners;
   /// &lt;summary&gt;
   /// Specifies color channel modulations that are applied to this frame
   /// &lt;/summary&gt;
   public int Color;
   /// &lt;summary&gt;
   /// Specifies the area on the graphic sheet which is used to form the graphic cell on which
   /// this frame is based.
   /// &lt;/summary&gt;
   public Rectangle SourceRect;

   /// &lt;summary&gt;
   /// Creates a new frame definition based on a graphic sheet, cell index, transformation, source rectangle and color modulation.
   /// &lt;/summary&gt;
   /// &lt;param name="texture"&gt;Refers to an object that provides a hardware copy of the graphic
   /// sheet on which this frame is based.&lt;/param&gt;
   /// &lt;param name="cell"&gt;Provides a value for this frame's &lt;see cref="CellIndex"/&gt; property.&lt;/param&gt;
   /// &lt;param name="corners"&gt;Corners of the output rectangle for drawing this frame in
   /// counter-clockwise order beginning with the top left corner.&lt;/param&gt;
   /// &lt;param name="srcRect"&gt;Provides this frame's &lt;see cref="SourceRect"/&gt;.&lt;/param&gt;
   /// &lt;param name="color"&gt;Provides this frame's &lt;see cref="Color"/&gt;.&lt;/param&gt;
   public Frame(Display.TextureRef texture, short cell, PointF[] corners, Rectangle srcRect, int color)
   {
      GraphicSheetTexture = texture;
      CellIndex = cell;
      this.Corners = corners;
      SourceRect = srcRect;
      this.Color = color;
   }

   /// &lt;summary&gt;
   /// Creates a new frame definition based on a graphic sheet, cell index, transformation and source rectangle.
   /// &lt;/summary&gt;
   /// &lt;param name="texture"&gt;Refers to an object that provides a hardware copy of the graphic
   /// sheet on which this frame is based.&lt;/param&gt;
   /// &lt;param name="cell"&gt;Provides a value for this frame's &lt;see cref="CellIndex"/&gt; property.&lt;/param&gt;
   /// &lt;param name="corners"&gt;Corners of the output rectangle for drawing this frame in
   /// counter-clockwise order beginning with the top left corner.&lt;/param&gt;
   /// &lt;param name="srcRect"&gt;Provides this frame's &lt;see cref="SourceRect"/&gt;.&lt;/param&gt;
   public Frame(Display.TextureRef texture, short cell, PointF[] corners, Rectangle srcRect) :
      this(texture, cell, corners, srcRect, -1)
   {
   }

   /// &lt;summary&gt;
   /// Creates a new frame definition based on a graphic sheet, cell index, source rectangle and color modulation.
   /// &lt;/summary&gt;
   /// &lt;param name="texture"&gt;Refers to an object that provides a hardware copy of the graphic
   /// sheet on which this frame is based.&lt;/param&gt;
   /// &lt;param name="cell"&gt;Provides a value for this frame's &lt;see cref="CellIndex"/&gt; property.&lt;/param&gt;
   /// &lt;param name="srcRect"&gt;Provides this frame's &lt;see cref="SourceRect"/&gt;.&lt;/param&gt;
   /// &lt;param name="color"&gt;Provides this frame's &lt;see cref="Color"/&gt;.&lt;/param&gt;
   /// &lt;remarks&gt;This constructor provides a shortcut for creating frames without transformations.&lt;/remarks&gt;
   public Frame(Display.TextureRef texture, short cell, Rectangle srcRect, int color)
   {
      GraphicSheetTexture = texture;
      CellIndex = cell;
      Corners = new PointF[] {
         new PointF(0, 0),
         new PointF(0, srcRect.Height),
         new PointF(srcRect.Width, srcRect.Height),
         new PointF(srcRect.Width, 0) };
      SourceRect = srcRect;
      this.Color = color;
   }

   /// &lt;summary&gt;
   /// Creates a new frame definition based on a graphic sheet, cell index and source rectangle.
   /// &lt;/summary&gt;
   /// &lt;param name="texture"&gt;Refers to an object that provides a hardware copy of the graphic
   /// sheet on which this frame is based.&lt;/param&gt;
   /// &lt;param name="cell"&gt;Provides a value for this frame's &lt;see cref="CellIndex"/&gt; property.&lt;/param&gt;
   /// &lt;param name="srcRect"&gt;Provides this frame's &lt;see cref="SourceRect"/&gt;.&lt;/param&gt;
   /// &lt;remarks&gt;This constructor provides a shortcut for creating frames without transformations or color modulations.&lt;/remarks&gt;
   public Frame(Display.TextureRef texture, short cell, Rectangle srcRect) :
      this(texture, cell, srcRect, -1)
   {
   }
}
</Text>
  </SourceCode>
  <SourceCode Name="GameForm.cs" IsCustomObject="false">
    <Text>/*
 * Created using Scrolling Game Development Kit 2.0
 * See Project.cs for copyright/licensing details
 */
using System;
using System.Drawing;
using System.Windows.Forms;

/// &lt;summary&gt;
/// UI that contains and manages the main display for the game.
/// &lt;/summary&gt;
public partial class GameForm : Form
{
   /// &lt;summary&gt;
   /// Hardware-backed display object embedded in the main window.
   /// &lt;/summary&gt;
   public Display GameDisplay = null;
   private KeyboardState m_keyboardState = null;
   private Joystick[] controllers = null;
   private System.Collections.BitArray controllerEnabled;
   /// &lt;summary&gt;
   /// Refers to the currently active primary map that is being drawn on the display
   /// &lt;/summary&gt;
   public MapBase CurrentMap;
   /// &lt;summary&gt;
   /// Refers to the currently active overlay map being drawn in front of the primary map
   /// &lt;/summary&gt;
   /// &lt;value&gt;This is a null reference if no overlay is active&lt;/value&gt;
   public MapBase OverlayMap;
   /// &lt;summary&gt;
   /// Contains a collection of all currently loaded maps.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The key of this collection is the type of the map class. The value is an
   /// instance of the map.
   /// &lt;seealso cref="UnloadMap"/&gt;
   /// &lt;seealso cref="GeneralRules.SwitchToMap"/&gt;&lt;/remarks&gt;
   public System.Collections.Hashtable LoadedMaps = new System.Collections.Hashtable();
   private int m_fps = 0;
   private int m_frameCount = 0;
   private DateTime m_frameStart;
   /// &lt;summary&gt;
   /// Used to write debug text that will be displayed for the current frame.
   /// &lt;/summary&gt;
   public System.IO.StringWriter debugText = new System.IO.StringWriter();
   private bool m_quit = false;
   /// &lt;summary&gt;
   /// Provides access to the input currently coming from the players' input devices.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Each of these objects can refer to a &lt;see cref="KeyboardPlayer"/&gt;
   /// or a &lt;see cref="ControllerPlayer"/&gt;, or you can create your own player input.&lt;/remarks&gt;
   public IPlayer[] Players = new IPlayer[Project.MaxPlayers];
   bool isFullScreen = false;
   private string title;
   public static System.Drawing.Point oldMousePosition;
   public static System.Drawing.Point curMousePosition;
   public static System.Windows.Forms.MouseButtons oldMouseButtons;
   public static System.Windows.Forms.MouseButtons curMouseButtons;

   #region Events
   /// &lt;summary&gt;
   /// Defines a mechanism by which simple notifications without any data can be triggered.
   /// &lt;/summary&gt;
   public delegate void SimpleNotification();
   /// &lt;summary&gt;
   /// Event fires every frame even when the game is not advancing.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The game may not be moving because the window may be minimized, but
   /// this event will still be raised. This might be useful for monitoring sounds that
   /// might continue to play while the window is minimized.&lt;/remarks&gt;
   public event SimpleNotification OnFrameStart;
   /// &lt;summary&gt;
   /// Event fires every frame that the game is advancing right before the scene is started.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This event does not occur if the game is minimized/paused.&lt;/remarks&gt;
   public event SimpleNotification OnBeforeBeginScene;
   /// &lt;summary&gt;
   /// Event fires every frame that the game is advancing right before executing rules.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This event does not occur if the game is minimized/paused.&lt;/remarks&gt;
   public event SimpleNotification OnBeforeExecuteRules;
   /// &lt;summary&gt;
   /// Event fires every frame that the game is advancing while the scene is being
   /// generated, right before the overlay map is drawn.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This event does not occur if the game is minimized/paused.&lt;/remarks&gt;
   public event SimpleNotification OnBeforeDrawOverlay;
   /// &lt;summary&gt;
   /// Event fires every frame that the game is advancing after the overlay map is drawn.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This event does not occur if the game is minimized/paused.&lt;/remarks&gt;
   public event SimpleNotification OnAfterDrawOverlay;
   #endregion


   #region Windows Forms Components
   private System.Windows.Forms.MainMenu mnuGame;
   private System.Windows.Forms.MenuItem mnuFile;
   private System.Windows.Forms.MenuItem mnuFileExit;
   private System.Windows.Forms.MenuItem mnuTools;
   private System.Windows.Forms.MenuItem mnuToolsOptions;
   private System.Windows.Forms.MenuItem mnuHelp;
   private System.ComponentModel.IContainer components;
   private System.Windows.Forms.MenuItem mnuHelpAbout;
   #endregion

   /// &lt;summary&gt;
   /// Constructs the main form for containing the game display.
   /// &lt;/summary&gt;
   /// &lt;param name="mode"&gt;Defines the size of the form in windowed mode and the resolution and
   /// color depth of the display in full screen mode.&lt;/param&gt;
   /// &lt;param name="windowed"&gt;Determines whether the display is initially windowed or full screen.&lt;/param&gt;
   /// &lt;param name="title"&gt;Supplies a title for the window when the game is in windowed mode.&lt;/param&gt;
   /// &lt;param name="initMapType"&gt;Defines the map that is initially active when the game starts.&lt;/param&gt;
   /// &lt;param name="overlayMapType"&gt;Defines the map that in initially set as the
   /// &lt;seealso cref="OverlayMap"/&gt; or null if there is no overlay initially.&lt;/param&gt;
   public GameForm(GameDisplayMode mode, bool windowed, string title, System.Type initMapType, System.Type overlayMapType)
   {
      InitializeComponent();
#if DEBUG
      MessageBox.Show("You are running in debug mode.  Unexpected runtime conditions may cause the game to halt, and if an error occurs you will have the opportunity to debug into it if you have a debugger installed and the project's source code handy", "Debug Mode Active");
#endif
      ClientSize = Display.GetScreenSize(mode, true);
      GameDisplay = new Display(mode, windowed);
      GameDisplay.BorderStyle = System.Windows.Forms.BorderStyle.None;
      GameDisplay.Location = new System.Drawing.Point(0, 0);
      GameDisplay.Name = "GameDisplay";
      GameDisplay.Size = Display.GetScreenSize(mode, true);
      Controls.Add(this.GameDisplay);
      Name = "GameForm";
      Text = this.title = title;
      KeyPreview = true;
      FormBorderStyle = FormBorderStyle.FixedSingle;
      CurrentMap = GetMap(initMapType);
      if (overlayMapType != null)
         OverlayMap = GetMap(overlayMapType);
      else
         OverlayMap = null;
      if (!windowed)
         FullScreen = true;
   }

   /// &lt;summary&gt;
   /// Clean up any resources being used.
   /// &lt;/summary&gt;
   protected override void Dispose( bool disposing )
   {
      if( disposing )
      {
         if (GameDisplay != null)
         {
            GameDisplay.Dispose();
            GameDisplay = null;
         }
      }
      base.Dispose( disposing );
   }

   /// &lt;summary&gt;
   /// Main game loop initializes input devices and runs the game.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The general sequence of steps performed in this loop are:
   /// &lt;list type="number"&gt;
   /// &lt;item&gt;&lt;description&gt;Trigger &lt;see cref="OnFrameStart"/&gt;.&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;description&gt;Check if game has been closed/quit, and exit if necessary.&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;description&gt;If game is inactive draw the screen as it was when it
   /// was last active, and skip the rest of the loop.&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;description&gt;Trigger &lt;see cref="OnBeforeBeginScene"/&gt;.&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;description&gt;Draw the main map.&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;description&gt;Read players' input devices.&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;description&gt;Trigger &lt;see cref="OnBeforeExecuteRules"/&gt;.&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;description&gt;Execute the main map's rules.&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;description&gt;Trigger &lt;see cref="OnBeforeDrawOverlay"/&gt;.&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;description&gt;If an overlay map is active, draw it and execute its rules.&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;description&gt;Draw the current debug output if debug mode is active, and clear the debug text buffer.&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;description&gt;Trigger &lt;see cref="OnAfterDrawOverlay"/&gt;.&lt;/description&gt;&lt;/item&gt;
   /// &lt;/list&gt;
   /// &lt;/remarks&gt;
   public void Run()
   {
      int controllerCount = Joystick.GetDeviceCount();
      if (controllerCount &gt; 0)
      {
         controllers = new Joystick[controllerCount];
         controllerEnabled = new System.Collections.BitArray(controllers.Length, false);
      }
      else
      {
         controllers = null;
         controllerEnabled = null;
      }

      // Player 0 always uses keyboard by default
      Players[0] = new KeyboardPlayer(0);

      // Players 1 through (M-N) use keyboard while players (M-N+1) through M use controllers
      // where M is max player number and N is number of controllers.
      for (int playerIdx = 1; playerIdx&lt;Project.MaxPlayers; playerIdx++)
      {
         if ((controllers != null) &amp;&amp; (Project.MaxPlayers - playerIdx &lt;= controllers.Length))
            Players[playerIdx] = new ControllerPlayer(playerIdx - (Project.MaxPlayers - controllers.Length));
         else
            Players[playerIdx] = new KeyboardPlayer(playerIdx);
      }

      m_keyboardState = new KeyboardState();

      Application.DoEvents();
      while(true)
      {
         oldMousePosition = curMousePosition;
         oldMouseButtons = curMouseButtons;
         curMousePosition = System.Windows.Forms.Control.MousePosition;
         curMouseButtons = System.Windows.Forms.Control.MouseButtons;

         if (OnFrameStart != null)
            OnFrameStart();
         if ((GameDisplay == null) || GameDisplay.IsDisposed || m_quit)
         {
            Close();
            return;
         }
         bool isActive;
         isActive = (System.Windows.Forms.Form.ActiveForm == this);
         if (!isActive)
         {
            // Display is minimized or inactive, wait until it is restored
            Application.DoEvents();
            if (GameDisplay != null)
               GameDisplay.FinishFrame();
            System.Threading.Thread.Sleep(0);
            continue;
         }
         if (OnBeforeBeginScene != null)
            OnBeforeBeginScene();
         CurrentMap.DrawAllViews();
         ReadControllers();
         if (OnBeforeExecuteRules != null)
            OnBeforeExecuteRules();
         CurrentMap.ExecuteRules();
         if (OnBeforeDrawOverlay != null)
            OnBeforeDrawOverlay();
         GeneralRules.DrawMessages();
         if (OverlayMap != null)
         {
            OverlayMap.DrawAllViews();
            OverlayMap.ExecuteRules();
         }
         OutputDebugInfo();
         if (OnAfterDrawOverlay != null)
            OnAfterDrawOverlay();
         GameDisplay.Flush();
         GameDisplay.FinishFrame();
         Application.DoEvents();
      }
   }

   /// &lt;summary&gt;
   /// Draw the text currently in the &lt;see cref="debugText"/&gt; buffer and clear the buffer.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This will only execute in debug mode. It requires that the "CoolFont" graphic
   /// sheet be embedded in the project.&lt;/remarks&gt;
   [System.Diagnostics.Conditional("DEBUG")]
   public void OutputDebugInfo()
   {
      GameDisplay.ScissorOff();
      GameDisplay.SetColor(Color.White);
      GameDisplay.DrawText(debugText.ToString(), 0, 0);

      debugText.GetStringBuilder().Length = 0;
      debugText.WriteLine("fps=" + m_fps.ToString());
      m_frameCount++;
      if (DateTime.Now.Subtract(m_frameStart).TotalSeconds &gt;= 1f)
      {
         m_fps = m_frameCount;
         m_frameCount=0;
         m_frameStart = DateTime.Now;
      }
   }

   protected override void OnClosing(System.ComponentModel.CancelEventArgs e)
   {
      GameDisplay.Dispose();
      GameDisplay = null;
      base.OnClosing(e);
   }

   /// &lt;summary&gt;
   /// Retrieves an instance of the specified map.
   /// &lt;/summary&gt;
   /// &lt;param name="mapType"&gt;Specifies which map to retrieve by its type&lt;/param&gt;
   /// &lt;returns&gt;A newly initialized map if the map was not loaded, or the existing
   /// map if it was already loaded.&lt;/returns&gt;
   /// &lt;remarks&gt;Loaded maps are stored in &lt;see cref="LoadedMaps"/&gt;.
   /// &lt;seealso cref="GeneralRules.UnloadMap"/&gt;
   /// &lt;seealso cref="GeneralRules.SwitchToMap"/&gt;&lt;/remarks&gt;
   public MapBase GetMap(System.Type mapType)
   {
      if (!LoadedMaps.ContainsKey(mapType))
      {
         MapBase result = (MapBase)mapType.GetConstructor(new System.Type[] {typeof(Display)}).Invoke(new object[] {GameDisplay});
         LoadedMaps[mapType] = result;
         return result;
      }
      else
         return (MapBase)(LoadedMaps[mapType]);
   }

   /// &lt;summary&gt;
   /// Unloads the currently loaded instance of the specified map type if it is loaded.
   /// &lt;/summary&gt;
   /// &lt;param name="mapType"&gt;Specifies which map to unload.&lt;/param&gt;
   /// &lt;remarks&gt;This is called by &lt;see cref="GeneralRules.UnloadMap"/&gt;.&lt;/remarks&gt;
   public void UnloadMap(System.Type mapType)
   {
      LoadedMaps.Remove(mapType);
   }

   /// &lt;summary&gt;
   /// Unload all maps that are not the current primary map or overlay map.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This is called by &lt;see cref="GeneralRules.UnloadBackgroundMaps"/&gt;.
   /// &lt;seealso cref="UnloadMap"/&gt;&lt;/remarks&gt;
   public void UnloadBackgroundMaps()
   {
      System.Collections.ArrayList toRemove = new System.Collections.ArrayList();
      foreach(System.Collections.DictionaryEntry de in LoadedMaps)
      {
         if ((de.Value != CurrentMap) &amp;&amp; (de.Value != OverlayMap))
            toRemove.Add(de.Key);
      }
      foreach(System.Type removeKey in toRemove)
      {
         LoadedMaps.Remove(removeKey);
      }
   }

   private void InitializeComponent()
   {
      this.components = new System.ComponentModel.Container();
      this.mnuGame = new System.Windows.Forms.MainMenu(this.components);
      this.mnuFile = new System.Windows.Forms.MenuItem();
      this.mnuFileExit = new System.Windows.Forms.MenuItem();
      this.mnuTools = new System.Windows.Forms.MenuItem();
      this.mnuToolsOptions = new System.Windows.Forms.MenuItem();
      this.mnuHelp = new System.Windows.Forms.MenuItem();
      this.mnuHelpAbout = new System.Windows.Forms.MenuItem();
      this.SuspendLayout();
      // 
      // mnuGame
      // 
      this.mnuGame.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
            this.mnuFile,
            this.mnuTools,
            this.mnuHelp});
      // 
      // mnuFile
      // 
      this.mnuFile.Index = 0;
      this.mnuFile.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
            this.mnuFileExit});
      this.mnuFile.Text = "&amp;File";
      // 
      // mnuFileExit
      // 
      this.mnuFileExit.Index = 0;
      this.mnuFileExit.Shortcut = System.Windows.Forms.Shortcut.AltF4;
      this.mnuFileExit.Text = "E&amp;xit";
      this.mnuFileExit.Click += new System.EventHandler(this.mnuFileExit_Click);
      // 
      // mnuTools
      // 
      this.mnuTools.Index = 1;
      this.mnuTools.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
            this.mnuToolsOptions});
      this.mnuTools.Text = "&amp;Tools";
      // 
      // mnuToolsOptions
      // 
      this.mnuToolsOptions.Index = 0;
      this.mnuToolsOptions.Text = "&amp;Options";
      this.mnuToolsOptions.Click += new System.EventHandler(this.mnuToolsOptions_Click);
      // 
      // mnuHelp
      // 
      this.mnuHelp.Index = 2;
      this.mnuHelp.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
            this.mnuHelpAbout});
      this.mnuHelp.Text = "&amp;Help";
      // 
      // mnuHelpAbout
      // 
      this.mnuHelpAbout.Index = 0;
      this.mnuHelpAbout.Text = "&amp;About...";
      this.mnuHelpAbout.Click += new System.EventHandler(this.mnuHelpAbout_Click);
      // 
      // GameForm
      // 
      this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
      this.ClientSize = new System.Drawing.Size(292, 273);
      this.MaximizeBox = false;
      this.Menu = this.mnuGame;
      this.Name = "GameForm";
      this.ResumeLayout(false);

   }

   /// &lt;summary&gt;
   /// Represents the current state of the keyboard.
   /// &lt;/summary&gt;
   public KeyboardState KeyboardState
   {
      get
      {
         return m_keyboardState;
      }
   }

   /// &lt;summary&gt;
   /// Reads the state of all relevant game controller devices into the respective
   /// objects in &lt;see cref="Players"/&gt;.
   /// &lt;/summary&gt;
   public void ReadControllers()
   {
      KeyboardState.Poll();

      if (controllerEnabled == null)
         return;

      foreach(IPlayer plr in Players)
      {
         if (plr is ControllerPlayer)
            controllerEnabled[((ControllerPlayer)plr).deviceNumber] = true;
      }

      for (int i=0; i&lt;controllerEnabled.Count; i++)
      {
         if (controllerEnabled[i])
         {
            if (controllers[i] == null)
               controllers[i] = new Joystick(i);
            controllers[i].Read();
         }
         else if (controllers[i] != null)
            controllers[i] = null;
      }
   }

   /// &lt;summary&gt;
   /// Return the number of available controllers connected to the system
   /// &lt;/summary&gt;
   public int ControllerCount
   {
      get
      {
         if (controllers == null)
            return 0;
         return controllers.Length;
      }
   }

   /// &lt;summary&gt;
   /// Return the name of a specific game controller as displayed in the options window.
   /// &lt;/summary&gt;
   /// &lt;param name="deviceNumber"&gt;Zero-based index of the game controller&lt;/param&gt;
   /// &lt;returns&gt;String containing the display name for the device&lt;/returns&gt;
   public string GetControllerName(int deviceNumber)
   {
      if (controllers[deviceNumber] == null)
         controllers[deviceNumber] = new Joystick(deviceNumber);
      return controllers[deviceNumber].Name;
   }

   /// &lt;summary&gt;
   /// Reads the current state of a game controller
   /// &lt;/summary&gt;
   /// &lt;param name="deviceNumber"&gt;Zero-based index of the game controller&lt;/param&gt;
   public Joystick GetControllerState(int deviceNumber)
   {
      return controllers[deviceNumber];
   }

   /// &lt;summary&gt;
   /// Returns true if the controller is currently enabled for input.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;A controller is enabled when a player is using it.&lt;/remarks&gt;
   public System.Collections.BitArray ControllerEnabled
   {
      get
      {
         return controllerEnabled;
      }
   }

   private void mnuFileExit_Click(object sender, System.EventArgs e)
   {
      Quit();
   }
   
   private void mnuToolsOptions_Click(object sender, System.EventArgs e)
   {
      frmControls frm = new frmControls();
      frm.ShowDialog();
      frm.Dispose();
   }

   private void mnuHelpAbout_Click(object sender, System.EventArgs e)
   {
      using (frmAbout frm = new frmAbout())
         frm.ShowDialog();
   }

   /// &lt;summary&gt;
   /// Sets an indicator that causes the game to quit at the beginning of the
   /// next game loop.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This value is checked during &lt;see cref="Run"/&gt;.&lt;/remarks&gt;
   public void Quit()
   {
      m_quit = true;
   }

   /// &lt;summary&gt;
   /// This function is called by the SGDK2 generated code when a top-level
   /// exception occurs.
   /// &lt;/summary&gt;
   /// &lt;param name="ex"&gt;Refers to the exception that was received at the top level&lt;/param&gt;
   public static void HandleException(System.Exception ex)
   {
      if (Project.GameWindow != null)
         Project.GameWindow.Close();
      MessageBox.Show("A fatal error occurred initializing or running the game:\r\n" + ex.ToString(), "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
   }

   protected override void OnKeyDown(KeyEventArgs e)
   {
      if (e.KeyCode == Keys.Enter &amp;&amp; e.Modifiers == Keys.Alt)
      {
         e.Handled = true;
         e.SuppressKeyPress = true;
         FullScreen = !FullScreen;
      }
   }

   /// &lt;summary&gt;
   /// Determines whether the display will occupy the full screen rather than being contained in a window.
   /// &lt;/summary&gt;
   public bool FullScreen
   {
      get
      {
         return isFullScreen;
      }
      set
      {
         if (value != isFullScreen)
         {
            isFullScreen = value;
            if (isFullScreen)
            {
               Text = String.Empty;
               FormBorderStyle = FormBorderStyle.None;
               ControlBox = false;
               MinimizeBox = false;
               Menu = null;
               GameDisplay.SwitchToResolution();
               WindowState = FormWindowState.Maximized;
            }
            else
            {
               Display.RestoreResolution();
               WindowState = FormWindowState.Normal;
               FormBorderStyle = FormBorderStyle.FixedSingle;
               ControlBox = true;
               MinimizeBox = true;
               Menu = mnuGame;
               ClientSize = Display.GetScreenSize(GameDisplay.GameDisplayMode, true);
               Text = title;
            }
         }
      }
   }
}</Text>
  </SourceCode>
  <SourceCode Name="LayerBase.cs" IsCustomObject="false">
    <Text>/*
 * Created using Scrolling Game Development Kit 2.0
 * See Project.cs for copyright/licensing details
 */
using System;
using System.Drawing;

/// &lt;summary&gt;
/// Defines the basic operation of a layer of tiles and sprites within a map.
/// &lt;/summary&gt;
[Serializable()]
public abstract partial class LayerBase : System.Collections.IEnumerable
{
   #region Embedded Classes
   /// &lt;summary&gt;
   /// Maintains information about a &lt;see cref="Frame"/&gt; that has been inserted
   /// into the layer for the current loop.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Frames may be inserted behind the layer (drawn before the tiles),
   /// Appended in front of the layer (drawn after all the tiles) or inserted between
   /// rows of tiles in the layer (drawn after the rows above it, and before the rows
   /// below it). Frames are generally injected into a layer by the existence of a
   /// sprite on the layer.&lt;/remarks&gt;
   private class InjectedFrame : IComparable
   {
      /// &lt;summary&gt;
      /// Horizontal pixel coordinate of the frame within the layer
      /// &lt;/summary&gt;
      public int x;
      /// &lt;summary&gt;
      /// Vertical pixel coordinate of the frame within the layer
      /// &lt;/summary&gt;
      public int y;
      /// &lt;summary&gt;
      /// Determines whether the frame is drawn behind the layer, in front of it,
      /// ir interleaved with the tiles.
      /// &lt;/summary&gt;
      /// &lt;value&gt;&lt;list type="table"&gt;
      /// &lt;listheader&gt;&lt;term&gt;Value&lt;/term&gt;&lt;description&gt;Drawing Order&lt;/description&gt;&lt;/listheader&gt;
      /// &lt;item&gt;&lt;term&gt;-1&lt;/term&gt;&lt;description&gt;Behind tiles&lt;/description&gt;&lt;/item&gt;
      /// &lt;item&gt;&lt;term&gt;0&lt;/term&gt;&lt;description&gt;Interleaved with tiles&lt;/description&gt;&lt;/item&gt;
      /// &lt;item&gt;&lt;term&gt;1&lt;/term&gt;&lt;description&gt;In front of tiles&lt;/description&gt;&lt;/item&gt;
      /// &lt;/list&gt;&lt;/value&gt;
      /// &lt;remarks&gt;Although at design time, priorities are generally specified with
      /// a wide range of numbers on the sprite instances, all we need to know at
      /// runtime is whether a frame is behind, interleaved or in front, so this
      /// priority value only has 3 possible values.&lt;/remarks&gt;
      public int priority;
      /// &lt;summary&gt;
      /// Refers to the frame that is drawn "injected" into this layer
      /// &lt;/summary&gt;
      public Frame frame;
      /// &lt;summary&gt;
      /// Speifies any color modulation that is applied to the frame when it is drawn
      /// &lt;/summary&gt;
      public int color;
      /// &lt;summary&gt;
      /// Constructs a new frame provided with all the values
      /// &lt;/summary&gt;
      /// &lt;param name="x"&gt;Initial value for &lt;see cref="x"/&gt;&lt;/param&gt;
      /// &lt;param name="y"&gt;Initial value for &lt;see cref="y"/&gt;&lt;/param&gt;
      /// &lt;param name="priority"&gt;Initial value for &lt;see cref="priority"/&gt;&lt;/param&gt;
      /// &lt;param name="frame"&gt;Initial value for &lt;see cref="frame"/&gt;&lt;/param&gt;
      /// &lt;param name="color"&gt;Initial value for &lt;see cref="color"/&gt;&lt;/param&gt;
      /// &lt;remarks&gt;A frame may have its own color modulation value internally.
      /// If the color provided to this constructor (presumably from the sprite's
      /// color modulation value) and the frame's color are both specified (not the
      /// default of -1) then they are combined.&lt;/remarks&gt;
      public InjectedFrame(int x, int y, int priority, Frame frame, int color)
      {
         this.x = x;
         this.y = y;
         this.frame = frame;
         this.priority = priority;
         if (color == -1)
            this.color = frame.Color;
         else //if (frame.Color == -1)
            this.color = color;
         /*else
            this.color = Microsoft.DirectX.Direct3D.ColorOperator.Modulate(ColorValue.FromArgb(frame.Color), ColorValue.FromArgb(color)).ToArgb();*/
      }
      #region IComparable Members

      /// &lt;summary&gt;
      /// Dertermine whether a specified frame should be drawn before or after this frame.
      /// &lt;/summary&gt;
      /// &lt;param name="obj"&gt;Another &lt;see cref="InjectedFrame"/&gt; object.&lt;/param&gt;
      /// &lt;returns&gt;A signed integer that indicates the sequence of the frames
      /// &lt;list type="table"&gt;
      /// &lt;listheader&gt;&lt;term&gt;Return Value&lt;/term&gt;&lt;item&gt;Description&lt;/item&gt;&lt;/listheader&gt;
      /// &lt;item&gt;&lt;term&gt;Less than zero&lt;/term&gt;&lt;description&gt;This injected frame should be drawn
      /// before &lt;paramref name="obj"/&gt;.&lt;/description&gt;&lt;/item&gt;
      /// &lt;item&gt;&lt;term&gt;Zero&lt;/term&gt;&lt;description&gt;Frames overlap exactly, drawing order indeterminant.&lt;/description&gt;&lt;/item&gt;
      /// &lt;item&gt;&lt;term&gt;Greater than zero&lt;/term&gt;&lt;description&gt;This injected frame should be drawn
      /// after &lt;paramref name="obj"/&gt;.&lt;/description&gt;&lt;/item&gt;
      /// &lt;/list&gt;&lt;/returns&gt;
      /// &lt;remarks&gt;&lt;see cref="InjectFrames"/&gt; relies on this interface to make sure that newly
      /// injected frames will be drawn in the right order. Frames higher up in the layer are
      /// drawn before frames that are lower down in the layer regardless of the order in which
      /// they are injected. Frames at the same vertical position will use the horizontal position
      /// to determine drawing order, frames on the left will draw first.&lt;/remarks&gt;
      public int CompareTo(object obj)
      {
         int result = y.CompareTo((obj as InjectedFrame).y);
         if (result != 0)
            return result;
         result = x.CompareTo((obj as InjectedFrame).x);
         if (result != 0)
            return result;
         return -1;
      }

      #endregion
   }
   #endregion

   #region Fields
   protected readonly Tileset m_Tileset;
   private Frameset m_Frameset;
   [NonSerialized()]
   private System.Collections.ArrayList m_InjectedFrames = null;
   
   private readonly int m_nLeftBuffer;
   private readonly int m_nTopBuffer;
   private readonly int m_nRightBuffer;
   private readonly int m_nBottomBuffer;
   protected readonly int m_nColumns;
   protected readonly int m_nRows;
   private readonly int m_nVirtualColumns;
   private readonly int m_nVirtualRows;
   private System.Drawing.Point m_AbsolutePosition;
   private LightingMode m_Lighting;

   /// &lt;summary&gt;
   /// A "Category" or collection of all sprites contained by the layer.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;"Static" sprites (sprite instances added at design time in the
   /// map editor) occupy the first portion of this collection. Any dynamically
   /// added sprites (added with functions like &lt;see cref="SpriteBase.TileAddSprite"/&gt;)
   /// are appended to the end. When a dynamically added sprite is deactivated, it is
   /// removed from this collection.&lt;/remarks&gt;
   public SpriteCollection m_Sprites;
   private readonly System.Drawing.SizeF m_ScrollRate;
   private System.Drawing.Point[] m_CurrentPosition = new System.Drawing.Point[Project.MaxViews];
   private MapBase m_ParentMap;
   /// &lt;summary&gt;
   /// Provides access to all sprite categories as they relate to this layer.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The objects provided by this member will return a collection of all sprites
   /// in the requested category that are on this layer.&lt;/remarks&gt;
   public LayerSpriteCategoriesBase m_SpriteCategories;
   protected readonly int m_nInjectStartIndex;
   protected readonly int m_nAppendStartIndex;
   #endregion

   protected LayerBase(Tileset Tileset, MapBase Parent, int nLeftBuffer, int nTopBuffer, int nRightBuffer, int nBottomBuffer,
      int nColumns, int nRows, int nVirtualColumns, int nVirtualRows, System.Drawing.Point Position,
      System.Drawing.SizeF ScrollRate, LightingMode Lighting, int nInjectStartIndex, int nAppendStartIndex)
   {
      this.m_ParentMap = Parent;
      this.m_Tileset = Tileset;
      this.m_Frameset = Tileset.GetFrameset(Parent.Display);
      this.m_nLeftBuffer = nLeftBuffer;
      this.m_nTopBuffer = nTopBuffer;
      this.m_nRightBuffer = nRightBuffer;
      this.m_nBottomBuffer = nBottomBuffer;
      this.m_nColumns = nColumns;
      this.m_nRows = nRows;
      if (nVirtualColumns == 0)
         this.m_nVirtualColumns = nColumns;
      else
         this.m_nVirtualColumns = nVirtualColumns;
      if (nVirtualRows == 0)
         this.m_nVirtualRows = nRows;
      else
         this.m_nVirtualRows = nVirtualRows;
      this.m_AbsolutePosition = Position;
      this.m_ScrollRate = ScrollRate;
      this.m_Lighting = Lighting;
      byte origView = Parent.CurrentViewIndex;
      for (byte v = 0; v &lt; Project.MaxViews; v++)
      {
         Parent.CurrentViewIndex = v;
         this.Move(new Point(0, 0));
      }
      Parent.CurrentViewIndex = origView;
      this.m_nInjectStartIndex = nInjectStartIndex;
      this.m_nAppendStartIndex = nAppendStartIndex;
   }

   #region Abstract Members
   /// &lt;summary&gt;
   /// Retrieves or sets the value of a tile at the specified tile coordinate
   /// &lt;/summary&gt;
   public abstract int this[int x, int y]
   {
      get;
      set;
   }
   protected abstract int[] GetTileFrame(int x, int y);
   /// &lt;summary&gt;
   /// Retrieves information about the tile at the specified tile coordinate
   /// &lt;/summary&gt;
   /// &lt;param name="x"&gt;Horizontal tile coordinate of the tile to retrieve&lt;/param&gt;
   /// &lt;param name="y"&gt;Vertical tile coordinate of the tile to retrieve&lt;/param&gt;
   /// &lt;returns&gt;Object describing the tile at the specified position in the layer.&lt;/returns&gt;
   /// &lt;remarks&gt;If the coordinate is beyond the edge of the layer's data, it wraps
   /// to the other side of the layer in order to support layers whose virtual size
   /// is larger than the data size.&lt;/remarks&gt;
   public abstract TileBase GetTile(int x, int y);
   #endregion

   #region IEnumerable Members
   /// &lt;summary&gt;
   /// Enumerates active sprites on the layer.
   /// &lt;/summary&gt;
   public System.Collections.IEnumerator GetEnumerator()
   {
      return new ActiveSpriteEnumerator(m_Sprites);
   }
   #endregion

   #region Properties
   /// &lt;summary&gt;
   /// Get the number of columns of tiles in the layer's tile data
   /// &lt;/summary&gt;
   public int ActualColumns
   {
      get
      {
         return m_nColumns;
      }
   }
   /// &lt;summary&gt;
   /// Get the number of rows of tiles in the layer's tile data
   /// &lt;/summary&gt;
   public int ActualRows
   {
      get
      {
         return m_nRows;
      }
   }

   /// &lt;summary&gt;
   /// Get the number of columns of tiles in the layer's displayed
   /// virtual scroll space (data is wrapped)
   /// &lt;/summary&gt;
   public int VirtualColumns
   {
      get
      {
         return m_nVirtualColumns;
      }
   }
   /// &lt;summary&gt;
   /// Get the number of rows of tiles in the layer's displayed
   /// virtual scroll space (data is wrapped)
   /// &lt;/summary&gt;
   public int VirtualRows
   {
      get
      {
         return m_nVirtualRows;
      }
   }

   /// &lt;summary&gt;
   /// Get or set the position of the layer within the map. 
   /// (Does not affect current position until &lt;see cref="Move"/&gt; is called)
   /// &lt;/summary&gt;
   public System.Drawing.Point AbsolutePosition
   {
      get
      {
         return m_AbsolutePosition;
      }
      set
      {
         m_AbsolutePosition = value;
      }
   }

   /// &lt;summary&gt;
   /// Gets the scroll rate that is applied to &lt;see cref="Move"/&gt; operations.
   /// &lt;/summary&gt;
   public System.Drawing.SizeF ScrollRate
   {
      get
      {
         return m_ScrollRate;
      }
   }

   /// &lt;summary&gt;
   /// Gets/Sets the current pixel position of the layer relative to the screen.
   /// (Setting this directly ignores &lt;see cref="ScrollRate"/&gt; and &lt;see cref="AbsolutePosition"/&gt;.)
   /// &lt;/summary&gt;
   public System.Drawing.Point CurrentPosition
   {
      get
      {
         return m_CurrentPosition[ParentMap.CurrentViewIndex];
      }
      set
      {
         m_CurrentPosition[ParentMap.CurrentViewIndex] = value;
      }
   }

   /// &lt;summary&gt;
   /// Returns the map that owns this layer
   /// &lt;/summary&gt;
   public MapBase ParentMap
   {
      get
      {
         return m_ParentMap;
      }
   }
   
   public Tileset Tileset
   {
      get
      {
         return m_Tileset;
      }
   }
   #endregion

   #region Public methods
   /// &lt;summary&gt;
   /// Move/Scroll the layer to a new position based on the current map position.
   /// The layer's current position is offset by its position on the map and scaled
   /// by the layer's scroll rate.
   /// &lt;/summary&gt;
   /// &lt;param name="MapPosition"&gt;Position of the map. If one component is int.minValue,
   /// that axis is not affected.&lt;/param&gt;
   /// &lt;remarks&gt;Map positions are usually negative because the map position indicates
   /// the position of the top-left corner of the map which is usually scrolled off
   /// the top-left corner of the screen to a negative position.&lt;/remarks&gt;
   public void Move(Point MapPosition)
   {
      if (MapPosition.X != int.MinValue)
         if (MapPosition.Y != int.MinValue)
            CurrentPosition = new Point(m_AbsolutePosition.X + (int)(MapPosition.X * m_ScrollRate.Width), m_AbsolutePosition.Y + (int)(MapPosition.Y * m_ScrollRate.Height));
         else
            CurrentPosition = new Point(m_AbsolutePosition.X + (int)(MapPosition.X * m_ScrollRate.Width), CurrentPosition.Y);
      else if (MapPosition.Y != int.MinValue)
         CurrentPosition = new Point(CurrentPosition.X, m_AbsolutePosition.Y + (int)(MapPosition.Y * m_ScrollRate.Height));
   }

   /// &lt;summary&gt;
   /// Determines whether lighing effect are enabled for this layer.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This value determines whether the lighting effects are enabled or disabled on the
   /// display before drawing this layer. The reason this is an enumerated value instead of a boolean
   /// value is to allow for future expansion supporting multiple forms of lighting to use on a layer
   /// and multiple levels of feature support.&lt;/remarks&gt;
   public LightingMode Lighting
   {
      get
      {
         return m_Lighting;
      }
      set
      {
         m_Lighting = value;
      }
   }

   /// &lt;summary&gt;
   /// Draw the layer according to the currently active view defined by &lt;see cref="MapBase.CurrentView"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Drawing the layer includes drawing of all the tiles and the sprites in the layer.&lt;/remarks&gt;
   public void Draw()
   {
      int nTileWidth = m_Tileset.TileWidth;
      int nTileHeight = m_Tileset.TileHeight;

      int nStartCol = (-m_nLeftBuffer - CurrentPosition.X) / nTileWidth;
      if (nStartCol &lt; 0)
         nStartCol = 0;
      int nStartRow = (-m_nTopBuffer - CurrentPosition.Y) / nTileHeight;
      if (nStartRow &lt; 0)
         nStartRow = 0;

      Rectangle ViewRect = m_ParentMap.CurrentView;
      Display disp = m_ParentMap.Display;
      disp.Scissor(ViewRect);
      disp.currentView = m_ParentMap.CurrentViewIndex;
      disp.enableLighting = Lighting == LightingMode.Normal;

      int EndCol = (ViewRect.Width - 1 + m_nRightBuffer - CurrentPosition.X) / nTileWidth;
      if (EndCol &gt;= VirtualColumns)
         EndCol = VirtualColumns - 1;
      int EndRow = (ViewRect.Height - 1 + m_nBottomBuffer - CurrentPosition.Y) / nTileHeight;
      if (EndRow &gt;= VirtualRows)
         EndRow = VirtualRows - 1;

      System.Collections.IEnumerator Injected = null;
      InjectedFrame CurFrame;
      if (m_InjectedFrames != null)
      {
         Injected = m_InjectedFrames.GetEnumerator();
         if (!Injected.MoveNext())
            Injected = null;
      }

      int lastColor = 0;

      for (int y = nStartRow; y &lt;= EndRow; y++)
      {
         if (Injected != null)
         {
            while ((((CurFrame = (InjectedFrame)Injected.Current).y &lt; y * nTileHeight)) &amp;&amp; (CurFrame.priority &lt;= 0) ||
                   (CurFrame.priority &lt; 0))
            {
               if (CurFrame.color != lastColor)
               {
                  disp.SetColor(CurFrame.color);
                  lastColor = CurFrame.color;
               }
               disp.DrawFrame(CurFrame.frame.GraphicSheetTexture,
                  CurFrame.frame.SourceRect, CurFrame.frame.Corners,
                  CurFrame.x + CurrentPosition.X + ViewRect.X,
                  CurFrame.y + CurrentPosition.Y + ViewRect.Y);
               if (!Injected.MoveNext())
               {
                  Injected = null;
                  break;
               }
            }
         }

         for (int x = nStartCol; x &lt;= EndCol; x++)
         {
            int[] SubFrames = GetTileFrame(x,y);
            for (int nFrame = 0; nFrame &lt; SubFrames.Length; nFrame++)
            {
               Frame f = m_Frameset[SubFrames[nFrame]];
               if (f.Color != lastColor)
               {
                  disp.SetColor(f.Color);
                  lastColor = f.Color;
               }
               disp.DrawFrame(f.GraphicSheetTexture, f.SourceRect, f.Corners,
                  x * nTileWidth + CurrentPosition.X + ViewRect.X,
                  y * nTileHeight + CurrentPosition.Y + ViewRect.Y);
            }
         }
      }

      while (Injected != null)
      {
         CurFrame = (InjectedFrame)Injected.Current;
         if (CurFrame.color != lastColor)
         {
            disp.SetColor(CurFrame.color);
            lastColor = CurFrame.color;
         }
         disp.DrawFrame(CurFrame.frame.GraphicSheetTexture,
            CurFrame.frame.SourceRect, CurFrame.frame.Corners,
            CurFrame.x + CurrentPosition.X + ViewRect.X,
            CurFrame.y + CurrentPosition.Y + ViewRect.Y);
         if (!Injected.MoveNext())
         {
            Injected = null;
            break;
         }
      }
      disp.SetColor(-1);
   }

   /// &lt;summary&gt;
   /// Returns a rectangle within this layer that represents the currently visible portion.
   /// &lt;/summary&gt;
   public Rectangle VisibleArea
   {
      get
      {
         return new Rectangle(new System.Drawing.Point(-CurrentPosition.X, -CurrentPosition.Y), m_ParentMap.CurrentView.Size);
      }
   }

   /// &lt;summary&gt;
   /// Determines if any part of the specified sprite is visible in the current view.
   /// &lt;/summary&gt;
   /// &lt;param name="sprite"&gt;Sprite to test.&lt;/param&gt;
   /// &lt;returns&gt;True if any part of the specified sprite is visible in the map's
   /// &lt;see cref="MapBase.CurrentView"/&gt;.&lt;/returns&gt;
   public bool IsSpriteVisible(SpriteBase sprite)
   {
      return sprite.isActive &amp;&amp; sprite.GetBounds().IntersectsWith(VisibleArea);
   }

   /// &lt;summary&gt;
   /// Injects a series of &lt;see cref="Frame"/&gt; objects into this layer, to be interleaved
   /// with the tiles on the layer.
   /// &lt;/summary&gt;
   /// &lt;param name="x"&gt;Horizontal pixel coordinate of the location to inject the frames&lt;/param&gt;
   /// &lt;param name="y"&gt;Vertical pixel coordinate of the location to inject the frames&lt;/param&gt;
   /// &lt;param name="frames"&gt;Array of frames to be injected at the specified coordinate&lt;/param&gt;
   /// &lt;remarks&gt;Often times only a single frame is injected, but sprites with compound frames
   /// may inject multiple frames at once.&lt;/remarks&gt;
   public void InjectFrames(int x, int y, Frame[] frames)
   {
      InjectFrames(x, y, frames, -1);
   }

   /// &lt;summary&gt;
   /// Injects a series of &lt;see cref="Frame"/&gt; objects into this layer, to be interleaved
   /// with the tiles on the layer, specifying a color modulation value.
   /// &lt;/summary&gt;
   /// &lt;param name="x"&gt;Horizontal pixel coordinate of the location to inject the frames&lt;/param&gt;
   /// &lt;param name="y"&gt;Vertical pixel coordinate of the location to inject the frames&lt;/param&gt;
   /// &lt;param name="frames"&gt;Array of frames to be injected at the specified coordinate&lt;/param&gt;
   /// &lt;param name="color"&gt;Specifies how the color channels of the injected frames will be affected.
   /// If the frames include their own color modulation, they will be merged with this.&lt;/param&gt;
   /// &lt;remarks&gt;Often times only a single frame is injected, but sprites with compound frames
   /// may inject multiple frames at once.&lt;/remarks&gt;
   public void InjectFrames(int x, int y, Frame[] frames, int color)
   {
      if (frames.Length &lt;= 0)
         return;

      InjectedFrame[] additions = new InjectedFrame[frames.Length];
      for (int idx=0; idx&lt;frames.Length; idx++)
         additions[idx] = new InjectedFrame(x, y, 0, frames[idx], color);

      int insIdx;
      if (m_InjectedFrames == null)
      {
         m_InjectedFrames = new System.Collections.ArrayList();
         insIdx = 0;
      }
      else
      {
         insIdx = m_InjectedFrames.BinarySearch(additions[0]);
         if (insIdx &lt; 0)
            insIdx = ~insIdx;
      }
      m_InjectedFrames.InsertRange(insIdx, additions);
   }

   /// &lt;summary&gt;
   /// Injects a series of &lt;see cref="Frame"/&gt; objects into this layer, to be drawn behind the
   /// layer or in front of it, specifying a color modulation value.
   /// &lt;/summary&gt;
   /// &lt;param name="x"&gt;Horizontal pixel coordinate of the location to inject the frames&lt;/param&gt;
   /// &lt;param name="y"&gt;Vertical pixel coordinate of the location to inject the frames&lt;/param&gt;
   /// &lt;param name="frames"&gt;Array of frames to be injected at the specified coordinate&lt;/param&gt;
   /// &lt;param name="color"&gt;Specifies how the color channels of the injected frames will be affected.
   /// If the frames include their own color modulation, they will be merged with this.&lt;/param&gt;
   /// &lt;param name="priority"&gt;&lt;list type="table"&gt;
   /// &lt;listheader&gt;&lt;term&gt;Value&lt;/term&gt;&lt;description&gt;Drawing Order&lt;/description&gt;&lt;/listheader&gt;
   /// &lt;item&gt;&lt;term&gt;-1&lt;/term&gt;&lt;description&gt;Behind tiles&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;1&lt;/term&gt;&lt;description&gt;In front of tiles&lt;/description&gt;&lt;/item&gt;
   /// &lt;/list&gt;&lt;/param&gt;
   /// &lt;remarks&gt;Often times only a single frame is injected, but sprites with compound frames
   /// may inject multiple frames at once.&lt;/remarks&gt;
   public void AppendFrames(int x, int y, Frame[] frames, int color, int priority)
   {
      InjectedFrame[] additions = new InjectedFrame[frames.Length];
      for (int idx=0; idx&lt;frames.Length; idx++)
         additions[idx] = new InjectedFrame(x, y, priority, frames[idx], color);
      if (m_InjectedFrames == null)
      {
         m_InjectedFrames = new System.Collections.ArrayList(additions);
      }
      else
         m_InjectedFrames.AddRange(additions);
   }

   /// &lt;summary&gt;
   /// Remove all injected frames from the layer.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This is performed after each time the layer is drawn to
   /// prepare for the next iteration.&lt;/remarks&gt;
   public void ClearInjections()
   {
      if (m_InjectedFrames != null)
         m_InjectedFrames.Clear();
   }

   /// &lt;summary&gt;
   /// Inject frames into the layer to represent the current images and positions of
   /// the sprites contained in this layer for this loop iteration.
   /// &lt;/summary&gt;
   public void InjectSprites()
   {
      for (int i = 0; (i &lt; m_nInjectStartIndex) &amp;&amp; (i &lt; m_Sprites.Count); i++)
      {
         SpriteBase sprite = m_Sprites[i];
         if (IsSpriteVisible(sprite))
            AppendFrames(sprite.PixelX, sprite.PixelY, sprite.GetCurrentFramesetFrames(), sprite.color, -1);
      }
      for (int i = m_nInjectStartIndex; (i &lt; m_nAppendStartIndex) &amp;&amp; (i &lt; m_Sprites.Count); i++)
      {
         SpriteBase sprite = m_Sprites[i];
         if (IsSpriteVisible(sprite))
            InjectFrames(sprite.PixelX, sprite.PixelY, sprite.GetCurrentFramesetFrames(), sprite.color);
      }
      for (int i = m_nAppendStartIndex; (i &lt; m_Sprites.Count); i++)
      {
         SpriteBase sprite = m_Sprites[i];
         if (IsSpriteVisible(sprite))
            AppendFrames(sprite.PixelX, sprite.PixelY, sprite.GetCurrentFramesetFrames(), sprite.color, 1);
      }
   }

   /// &lt;summary&gt;
   /// Execute the rules of all active sprites on this layer.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;After the rules are executed, the function checks to see if
   /// any dynamic sprites have been de-activated and removes them.
   /// This function can be overridden in the derived layer to customize how
   /// and when ProcessRules is called on each sprite.&lt;/remarks&gt;
   public virtual void ProcessSprites()
   {
      foreach(SpriteBase sprite in m_Sprites)
         // Assuming it's more efficient to just set them all to false rather than
         // try and only enumerate the active ones.
         sprite.Processed = false;
      for(int i=0; i &lt; m_Sprites.Count; i++)
         if (m_Sprites[i].isActive)
            m_Sprites[i].ProcessRules();
      m_Sprites.Clean();
   }

   /// &lt;summary&gt;
   /// Executes the rules for all the plans on this layer
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;See &lt;see cref="ExecuteRules"/&gt; for information on overriding this.&lt;/remarks&gt;
   public virtual void ExecuteRulesInternal()
   {
      throw new NotImplementedException("ExecuteRules called on a layer without rules");
   }

   public virtual void ExecuteRules() { ExecuteRulesInternal(); }
  
   /// &lt;summary&gt;
   /// Retrieve the current mouse position
   /// &lt;/summary&gt;
   /// &lt;returns&gt;Layer-relative coordinate representing the current position of the mouse.&lt;/returns&gt;
   /// &lt;remarks&gt;This can be used to set a sprite's position at the mouse cursor and make it behave
   /// like a mouse pointer.
   /// &lt;seealso cref="PlanBase.TransportToPoint"/&gt;&lt;/remarks&gt;
   public Point GetMousePosition()
   {
      Point dispPos;
      dispPos = m_ParentMap.Display.PointToClient(GameForm.curMousePosition);
      dispPos.Offset(-CurrentPosition.X, -CurrentPosition.Y);
      return dispPos;
   }

   /// &lt;summary&gt;
   /// Scroll the currently active view on the map so the specified sprite is visible.
   /// &lt;/summary&gt;
   /// &lt;param name="sprite"&gt;Sprite to scroll into view&lt;/param&gt;
   /// &lt;param name="useScrollMargins"&gt;True to scroll the sprite so that it is also within
   /// the scroll margins, false to only scroll it so it is fully visible in the view.&lt;/param&gt;
   public void ScrollSpriteIntoView(SpriteBase sprite, bool useScrollMargins)
   {
      Rectangle spriteBounds = sprite.GetBounds();
      int newX = int.MinValue;
      int newY = int.MinValue;
      int marginLeft;
      int marginTop;
      int marginRight;
      int marginBottom;
      if (useScrollMargins)
      {
         marginLeft = ParentMap.ScrollMarginLeft;
         marginTop = ParentMap.ScrollMarginTop;
         marginRight = ParentMap.ScrollMarginRight;
         marginBottom = ParentMap.ScrollMarginBottom;
      }
      else
      {
         marginLeft = 0;
         marginTop = 0;
         marginRight = 0;
         marginBottom = 0;
      }
      if (spriteBounds.Left + CurrentPosition.X &lt; marginLeft)
      {
         if (ScrollRate.Width &gt; 0)
            newX = (int)((-spriteBounds.Left + marginLeft - AbsolutePosition.X) / ScrollRate.Width);
         else
            CurrentPosition = new Point(-spriteBounds.Left + marginLeft, CurrentPosition.Y);
      }
      else if (spriteBounds.Right + CurrentPosition.X &gt; VisibleArea.Width - marginRight)
      {
         if (ScrollRate.Width &gt; 0)
            newX = (int)((-spriteBounds.Right + VisibleArea.Width - marginRight - AbsolutePosition.X) / ScrollRate.Width);
         else
            CurrentPosition = new Point(-spriteBounds.Right + VisibleArea.Width - marginRight, CurrentPosition.Y);
      }

      if (spriteBounds.Top + CurrentPosition.Y &lt; marginTop)
      {
         if (ScrollRate.Height &gt; 0)
            newY = (int)((-spriteBounds.Top + marginTop - AbsolutePosition.Y) / ScrollRate.Height);
         else
            CurrentPosition = new Point(CurrentPosition.X, -spriteBounds.Top + marginTop);
      }
      else if (spriteBounds.Bottom + CurrentPosition.Y &gt; VisibleArea.Height - marginBottom)
      {
         if (ScrollRate.Height &gt; 0)
            newY = (int)((-spriteBounds.Bottom + VisibleArea.Height - marginBottom - AbsolutePosition.Y) / ScrollRate.Height);
         else
            CurrentPosition = new Point(CurrentPosition.X, -spriteBounds.Bottom + VisibleArea.Height - marginBottom);
      }
      ParentMap.Scroll(new Point(newX, newY));
   }

   /// &lt;summary&gt;
   /// Push the specified sprite into the currently active view.
   /// &lt;/summary&gt;
   /// &lt;param name="sprite"&gt;Sprite to be pushed&lt;/param&gt;
   /// &lt;param name="stayInScrollMargins"&gt;True to push the sprite until it's within the scroll
   /// margins, or false to only push it until it's fully visible in the view.&lt;/param&gt;
   /// &lt;remarks&gt;This only affects the sprites intended velocity and does not actually move it.
   /// Solidity ot other factors could still impede the sprite's ability to stay in the view.&lt;/remarks&gt;
   public void PushSpriteIntoView(SpriteBase sprite, bool stayInScrollMargins)
   {
      Rectangle spriteBounds = sprite.GetBounds();
      int marginLeft;
      int marginTop;
      int marginRight;
      int marginBottom;
      if (stayInScrollMargins)
      {
         marginLeft = ParentMap.ScrollMarginLeft;
         marginTop = ParentMap.ScrollMarginTop;
         marginRight = ParentMap.ScrollMarginRight;
         marginBottom = ParentMap.ScrollMarginBottom;
      }
      else
      {
         marginLeft = 0;
         marginTop = 0;
         marginRight = 0;
         marginBottom = 0;
      }

      if (spriteBounds.Left + CurrentPosition.X &lt; marginLeft)
      {
         if (double.IsNaN(sprite.LocalDX))
            sprite.dx = marginLeft - CurrentPosition.X - spriteBounds.Left;
         else
            sprite.LocalDX = marginLeft - CurrentPosition.X - spriteBounds.Left - sprite.RidingOn.dx;
      }
      else if (spriteBounds.Right + CurrentPosition.X &gt; VisibleArea.Width - marginRight)
      {
         if (double.IsNaN(sprite.LocalDX))
            sprite.dx = VisibleArea.Width - marginRight - CurrentPosition.X - spriteBounds.Right;
         else
            sprite.LocalDX = VisibleArea.Width - marginRight - CurrentPosition.X - spriteBounds.Right - sprite.RidingOn.dx;
      }

      if (spriteBounds.Top + CurrentPosition.Y &lt; marginTop)
      {
         if (double.IsNaN(sprite.LocalDY))
            sprite.dy = marginTop - spriteBounds.Top - CurrentPosition.Y;
         else
            sprite.LocalDY = marginTop - spriteBounds.Top - CurrentPosition.Y - sprite.RidingOn.dy;
      }
      else if (spriteBounds.Bottom + CurrentPosition.Y &gt; VisibleArea.Height - marginBottom)
      {
         if (double.IsNaN(sprite.LocalDY))
            sprite.dy = VisibleArea.Height - marginBottom - spriteBounds.Bottom - CurrentPosition.Y;
         else
            sprite.LocalDY = VisibleArea.Height - marginBottom - spriteBounds.Bottom - CurrentPosition.Y - sprite.RidingOn.dy;
      }
   }

   /// &lt;summary&gt;
   /// Determine the vertical offset of the top-most solid pixel within the specified rectangle.
   /// &lt;/summary&gt;
   /// &lt;param name="testArea"&gt;Rectangle to test&lt;/param&gt;
   /// &lt;param name="solid"&gt;Solidity definition defining tile shapes&lt;/param&gt;
   /// &lt;returns&gt;Layer-relative vertical coordinate (y) of the top-most solid pixel contained
   /// in the rectangle, or &lt;see cref="int.MinValue"/&gt; if none exists.&lt;/returns&gt;
   /// &lt;remarks&gt;This function (and solidity in general) only deals with solid boundaries of tiles.
   /// Therefore if the rectangle is fully embedded in a solid tile and is not crossing any solid
   /// boundaries, the return value will indicate that no solidity was found. This allows such
   /// features as tiles through which the player can jump upward but land down on solidly.&lt;/remarks&gt;
   public int GetTopSolidPixel(Rectangle testArea, Solidity solid)
   {
      int topTile = (testArea.Top + m_Tileset.TileHeight) / m_Tileset.TileHeight - 1;
      int bottomTile = (int)((testArea.Top + testArea.Height - 1) / m_Tileset.TileHeight);
      int leftTile = (testArea.Left + m_Tileset.TileWidth) / m_Tileset.TileWidth - 1;
      int rightTile = (int)((testArea.Left + testArea.Width - 1) / m_Tileset.TileWidth);
      bool outOfBounds = false;
      if ((topTile &lt; 0) || (topTile &gt;= VirtualRows) || (bottomTile &lt; 0) || (bottomTile &gt;= VirtualRows)
         || (leftTile &lt; 0) || (leftTile &gt;= VirtualColumns) || (rightTile &lt; 0) || (rightTile &gt;= VirtualColumns))
         outOfBounds = true;
      short minTileTop = (short)(testArea.Top % m_Tileset.TileHeight);
      int tileLeft = leftTile * m_Tileset.TileWidth;
      for (int y = topTile; y &lt;= bottomTile; y++)
      {
         if (rightTile == leftTile)
         {
            short topMost;
            if (outOfBounds &amp;&amp; ((leftTile &lt; 0) || (leftTile &gt;= VirtualColumns) || (y &lt; 0) || (y &gt;= VirtualRows)))
               topMost = 0;
            else
               topMost = solid.GetCurrentTileShape(m_Tileset[this[leftTile,y]]).GetTopSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, (short)(testArea.Left - tileLeft),
                  (short)(testArea.Left + testArea.Width - 1 - tileLeft));
            if ((topMost != short.MaxValue) &amp;&amp; ((y &gt; topTile) || (topMost &gt;= minTileTop)))
            {
               int result = topMost + y * m_Tileset.TileHeight;
               if (result &lt; testArea.Top + testArea.Height)
                  return result;
               else
                  return int.MinValue;
            }
         }
         else
         {
            short topMost;
            if (outOfBounds &amp;&amp; ((leftTile &lt; 0) || (leftTile &gt;= VirtualColumns) || (y &lt; 0) || (y &gt;= VirtualRows)))
               topMost = 0;
            else
               topMost = solid.GetCurrentTileShape(m_Tileset[this[leftTile,y]]).GetTopSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, (short)(testArea.Left - tileLeft), (short)(m_Tileset.TileWidth - 1));
            if ((y == topTile) &amp;&amp; (topMost &lt; minTileTop))
               topMost = short.MaxValue;
            short top;
            for (int x = leftTile + 1; x &lt; rightTile; x++)
            {
               if (outOfBounds &amp;&amp; ((x &lt; 0) || (x &gt;= VirtualColumns) || (y &lt; 0) || (y &gt;= VirtualRows)))
                  top = 0;
               else
                  top = solid.GetCurrentTileShape(m_Tileset[this[x,y]]).GetTopSolidPixel(
                     m_Tileset.TileWidth, m_Tileset.TileHeight, 0, (short)(m_Tileset.TileWidth - 1));
               if ((top &lt; topMost) &amp;&amp; ((y &gt; topTile) || (top &gt;= minTileTop)))
                  topMost = top;
            }
            if (outOfBounds &amp;&amp; ((rightTile &lt; 0) || (rightTile &gt;= VirtualColumns) || (y &lt; 0) || (y &gt;= VirtualRows)))
               top = 0;
            else
               top = solid.GetCurrentTileShape(m_Tileset[this[rightTile,y]]).GetTopSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, 0, (short)((testArea.Left + testArea.Width - 1) % m_Tileset.TileWidth));
            if ((top &lt; topMost) &amp;&amp; ((y &gt; topTile) || (top &gt;= minTileTop)))
               topMost = top;
            if (topMost != short.MaxValue)
            {
               int result = topMost + y * m_Tileset.TileHeight;
               if (result &lt; testArea.Top + testArea.Height)
                  return result;
               else
                  return int.MinValue;
            }
         }
      }
      return int.MinValue;
   }

   /// &lt;summary&gt;
   /// Determine the vertical offset of the bottom-most solid pixel within the specified rectangle.
   /// &lt;/summary&gt;
   /// &lt;param name="testArea"&gt;Rectangle to test&lt;/param&gt;
   /// &lt;param name="solid"&gt;Solidity definition defining tile shapes&lt;/param&gt;
   /// &lt;returns&gt;Layer-relative vertical coordinate (y) of the bottom-most solid pixel contained
   /// in the rectangle, or &lt;see cref="int.MinValue"/&gt; if none exists.&lt;/returns&gt;
   /// &lt;remarks&gt;This function (and solidity in general) only deals with solid boundaries of tiles.
   /// Therefore if the rectangle is fully embedded in a solid tile and is not crossing any solid
   /// boundaries, the return value will indicate that no solidity was found. This allows such
   /// features as tiles through which the player can jump upward but land down on solidly.&lt;/remarks&gt;
   public int GetBottomSolidPixel(Rectangle testArea, Solidity solid)
   {
      int topTile = (testArea.Top + m_Tileset.TileHeight) / m_Tileset.TileHeight - 1;
      int bottomTile = (int)((testArea.Top + testArea.Height - 1) / m_Tileset.TileHeight);
      int leftTile = (testArea.Left + m_Tileset.TileWidth) / m_Tileset.TileWidth - 1;
      int rightTile = (int)((testArea.Left + testArea.Width - 1) / m_Tileset.TileWidth);
      bool outOfBounds = false;
      if ((topTile &lt; 0) || (topTile &gt;= VirtualRows) || (bottomTile &lt; 0) || (bottomTile &gt;= VirtualRows)
         || (leftTile &lt; 0) || (leftTile &gt;= VirtualColumns) || (rightTile &lt; 0) || (rightTile &gt;= VirtualColumns))
         outOfBounds = true;
      short maxTileBottom = (short)((testArea.Top+testArea.Height-1) % m_Tileset.TileHeight);
      int tileLeft = leftTile * m_Tileset.TileWidth;
      for (int y = bottomTile; y &gt;= topTile; y--)
      {
         if (rightTile == leftTile)
         {
            short bottomMost;
            if (outOfBounds &amp;&amp; ((leftTile &lt; 0) || (leftTile &gt;= VirtualColumns) || (y &lt; 0) || (y &gt;= VirtualRows)))
               bottomMost = (short)(m_Tileset.TileHeight - 1);
            else
               bottomMost = solid.GetCurrentTileShape(m_Tileset[this[leftTile,y]]).GetBottomSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, (short)(testArea.Left - tileLeft),
                  (short)(testArea.Left + testArea.Width - 1 - tileLeft));
            if ((bottomMost != short.MinValue) &amp;&amp; ((y &lt; bottomTile) || (bottomMost &lt;= maxTileBottom)))
            {
               int result = bottomMost + y * m_Tileset.TileHeight;
               if (result &gt;= testArea.Top)
                  return result;
               else
                  return int.MinValue;
            }
         }
         else
         {
            short bottomMost;
            if (outOfBounds &amp;&amp; ((leftTile &lt; 0) || (leftTile &gt;= VirtualColumns) || (y &lt; 0) || (y &gt;= VirtualRows)))
               bottomMost = (short)(m_Tileset.TileHeight - 1);
            else
               bottomMost = solid.GetCurrentTileShape(m_Tileset[this[leftTile,y]]).GetBottomSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, (short)(testArea.Left - tileLeft), (short)(m_Tileset.TileWidth - 1));
            if ((y == bottomTile) &amp;&amp; (bottomMost &gt; maxTileBottom))
               bottomMost = short.MinValue;
            short bottom;
            for (int x = leftTile + 1; x &lt; rightTile; x++)
            {
               if (outOfBounds &amp;&amp; ((x &lt; 0) || (x &gt;= VirtualColumns) || (y &lt; 0) || (y &gt;= VirtualRows)))
                  bottom = (short)(m_Tileset.TileHeight - 1);
               else
                  bottom = solid.GetCurrentTileShape(m_Tileset[this[x,y]]).GetBottomSolidPixel(
                     m_Tileset.TileWidth, m_Tileset.TileHeight, 0, (short)(m_Tileset.TileWidth - 1));
               if ((bottom &gt; bottomMost) &amp;&amp; ((y &lt; bottomTile) || (bottom &lt;= maxTileBottom)))
                  bottomMost = bottom;
            }
            if (outOfBounds &amp;&amp; ((rightTile &lt; 0) || (rightTile &gt;= VirtualColumns) || (y &lt; 0) || (y &gt;= VirtualRows)))
               bottom = (short)(m_Tileset.TileHeight - 1);
            else
               bottom = solid.GetCurrentTileShape(m_Tileset[this[rightTile,y]]).GetBottomSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, 0, (short)((testArea.Left + testArea.Width - 1) % m_Tileset.TileWidth));
            if ((bottom &gt; bottomMost) &amp;&amp; ((y &lt; bottomTile) || (bottom &lt;= maxTileBottom)))
               bottomMost = bottom;
            if (bottomMost != short.MinValue)
            {
               int result = bottomMost + y * m_Tileset.TileHeight;
               if (result &gt;= testArea.Top)
                  return result;
               else
                  return int.MinValue;
            }
         }
      }
      return int.MinValue;
   }

   /// &lt;summary&gt;
   /// Determine the horizontal offset of the left-most solid pixel within the specified rectangle.
   /// &lt;/summary&gt;
   /// &lt;param name="testArea"&gt;Rectangle to test&lt;/param&gt;
   /// &lt;param name="solid"&gt;Solidity definition defining tile shapes&lt;/param&gt;
   /// &lt;returns&gt;Layer-relative horizontal coordinate (x) of the left-most solid pixel contained
   /// in the rectangle, or &lt;see cref="int.MinValue"/&gt; if none exists.&lt;/returns&gt;
   /// &lt;remarks&gt;This function (and solidity in general) only deals with solid boundaries of tiles.
   /// Therefore if the rectangle is fully embedded in a solid tile and is not crossing any solid
   /// boundaries, the return value will indicate that no solidity was found. This allows such
   /// features as tiles through which the player can jump upward but land down on solidly.&lt;/remarks&gt;
   public int GetLeftSolidPixel(Rectangle testArea, Solidity solid)
   {
      int topTile = (testArea.Top + m_Tileset.TileHeight) / m_Tileset.TileHeight - 1;
      int bottomTile = (int)((testArea.Top + testArea.Height - 1) / m_Tileset.TileHeight);
      int leftTile = (testArea.Left + m_Tileset.TileWidth) / m_Tileset.TileWidth - 1;
      int rightTile = (int)((testArea.Left + testArea.Width - 1) / m_Tileset.TileWidth);
      bool outOfBounds = false;
      if ((topTile &lt; 0) || (topTile &gt;= VirtualRows) || (bottomTile &lt; 0) || (bottomTile &gt;= VirtualRows)
         || (leftTile &lt; 0) || (leftTile &gt;= VirtualColumns) || (rightTile &lt; 0) || (rightTile &gt;= VirtualColumns))
         outOfBounds = true;
      short minTileLeft = (short)(testArea.Left % m_Tileset.TileWidth);
      int tileTop = topTile * m_Tileset.TileHeight;
      for (int x = leftTile; x &lt;= rightTile; x++)
      {
         if (bottomTile == topTile)
         {
            short leftMost;
            if (outOfBounds &amp;&amp; ((topTile &lt; 0) || (topTile &gt;= VirtualRows) || (x &lt; 0) || (x &gt;= VirtualColumns)))
               leftMost = 0;
            else
               leftMost = solid.GetCurrentTileShape(m_Tileset[this[x,topTile]]).GetLeftSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, (short)(testArea.Top - tileTop),
                  (short)(testArea.Top + testArea.Height - 1 - tileTop));
            if ((leftMost != short.MaxValue) &amp;&amp; ((x &gt; leftTile) || (leftMost &gt;= minTileLeft)))
            {
               int result = leftMost + x * m_Tileset.TileWidth;
               if (result &lt; testArea.Left + testArea.Width)
                  return result;
               else
                  return int.MinValue;
            }
         }
         else
         {
            short leftMost;
            if (outOfBounds &amp;&amp; ((topTile &lt; 0) || (topTile &gt;= VirtualRows) || (x &lt; 0) || (x &gt;= VirtualColumns)))
               leftMost = 0;
            else
               leftMost = solid.GetCurrentTileShape(m_Tileset[this[x, topTile]]).GetLeftSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, (short)(testArea.Top - tileTop), (short)(m_Tileset.TileHeight - 1));
            if ((x == leftTile) &amp;&amp; (leftMost &lt; minTileLeft))
               leftMost = short.MaxValue;
            short left;
            for (int y = topTile + 1; y &lt; bottomTile; y++)
            {
               if (outOfBounds &amp;&amp; ((x &lt; 0) || (x &gt;= VirtualColumns) || (y &lt; 0) || (y &gt;= VirtualRows)))
                  left = 0;
               else
                  left = solid.GetCurrentTileShape(m_Tileset[this[x,y]]).GetLeftSolidPixel(
                     m_Tileset.TileWidth, m_Tileset.TileHeight, 0, (short)(m_Tileset.TileHeight - 1));
               if ((left &lt; leftMost) &amp;&amp; ((x &gt; leftTile) || (left &gt;= minTileLeft)))
                  leftMost = left;
            }
            if (outOfBounds &amp;&amp; ((bottomTile &lt; 0) || (bottomTile &gt;= VirtualRows) || (x &lt; 0) || (x &gt;= VirtualColumns)))
               left = 0;
            else
               left = solid.GetCurrentTileShape(m_Tileset[this[x, bottomTile]]).GetLeftSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, 0, (short)((testArea.Top + testArea.Height - 1) % m_Tileset.TileHeight));
            if ((left &lt; leftMost) &amp;&amp; ((x &gt; leftTile) || (left &gt;= minTileLeft)))
               leftMost = left;
            if (leftMost != short.MaxValue)
            {
               int result = leftMost + x * m_Tileset.TileWidth;
               if (result &lt; testArea.Left + testArea.Width)
                  return result;
               else
                  return int.MinValue;
            }
         }
      }
      return int.MinValue;
   }

   /// &lt;summary&gt;
   /// Determine the horizontal offset of the right-most solid pixel within the specified rectangle.
   /// &lt;/summary&gt;
   /// &lt;param name="testArea"&gt;Rectangle to test&lt;/param&gt;
   /// &lt;param name="solid"&gt;Solidity definition defining tile shapes&lt;/param&gt;
   /// &lt;returns&gt;Layer-relative horizontal coordinate (x) of the right-most solid pixel contained
   /// in the rectangle, or &lt;see cref="int.MinValue"/&gt; if none exists.&lt;/returns&gt;
   /// &lt;remarks&gt;This function (and solidity in general) only deals with solid boundaries of tiles.
   /// Therefore if the rectangle is fully embedded in a solid tile and is not crossing any solid
   /// boundaries, the return value will indicate that no solidity was found. This allows such
   /// features as tiles through which the player can jump upward but land down on solidly.&lt;/remarks&gt;
   public int GetRightSolidPixel(Rectangle testArea, Solidity solid)
   {
      int topTile = (testArea.Top + m_Tileset.TileHeight) / m_Tileset.TileHeight - 1;
      int bottomTile = (int)((testArea.Top + testArea.Height - 1) / m_Tileset.TileHeight);
      int leftTile = (testArea.Left + m_Tileset.TileWidth) / m_Tileset.TileWidth - 1;
      int rightTile = (int)((testArea.Left + testArea.Width - 1) / m_Tileset.TileWidth);
      bool outOfBounds = false;
      if ((topTile &lt; 0) || (topTile &gt;= VirtualRows) || (bottomTile &lt; 0) || (bottomTile &gt;= VirtualRows)
         || (leftTile &lt; 0) || (leftTile &gt;= VirtualColumns) || (rightTile &lt; 0) || (rightTile &gt;= VirtualColumns))
         outOfBounds = true;
      short maxTileRight = (short)((testArea.Left+testArea.Width-1) % m_Tileset.TileWidth);
      int tileTop = topTile * m_Tileset.TileHeight;
      for (int x = rightTile; x &gt;= leftTile; x--)
      {
         if (bottomTile == topTile)
         {
            short rightMost;
            if (outOfBounds &amp;&amp; ((topTile &lt; 0) || (topTile &gt;= VirtualRows) || (x &lt; 0) || (x &gt;= VirtualColumns)))
               rightMost = (short)(m_Tileset.TileWidth - 1);
            else
               rightMost = solid.GetCurrentTileShape(m_Tileset[this[x,topTile]]).GetRightSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, (short)(testArea.Top - tileTop),
                  (short)(testArea.Top + testArea.Height - 1 - tileTop));
            if ((rightMost != short.MinValue) &amp;&amp; ((x &lt; rightTile) || (rightMost &lt;= maxTileRight)))
            {
               int result = rightMost + x * m_Tileset.TileWidth;
               if (result &gt;= testArea.Left)
                  return result;
               else
                  return int.MinValue;
            }
         }
         else
         {
            short rightMost;
            if (outOfBounds &amp;&amp; ((topTile &lt; 0) || (topTile &gt;= VirtualRows) || (x &lt; 0) || (x &gt;= VirtualColumns)))
               rightMost = (short)(m_Tileset.TileWidth - 1);
            else
               rightMost = solid.GetCurrentTileShape(m_Tileset[this[x, topTile]]).GetRightSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, (short)(testArea.Top - tileTop), (short)(m_Tileset.TileHeight - 1));
            if ((x == rightTile) &amp;&amp; (rightMost &gt; maxTileRight))
               rightMost = short.MinValue;
            short right;
            for (int y = topTile + 1; y &lt; bottomTile; y++)
            {
               if (outOfBounds &amp;&amp; ((x &lt; 0) || (x &gt;= VirtualColumns) || (y &lt; 0) || (y &gt;= VirtualRows)))
                  right = (short)(m_Tileset.TileWidth - 1);
               else
                  right = solid.GetCurrentTileShape(m_Tileset[this[x,y]]).GetRightSolidPixel(
                     m_Tileset.TileWidth, m_Tileset.TileHeight, 0, (short)(m_Tileset.TileHeight - 1));
               if ((right &gt; rightMost) &amp;&amp; ((x &lt; rightTile) || (right &lt;= maxTileRight)))
                  rightMost = right;
            }
            if (outOfBounds &amp;&amp; ((bottomTile &lt; 0) || (bottomTile &gt;= VirtualRows) || (x &lt; 0) || (x &gt;= VirtualColumns)))
               right = (short)(m_Tileset.TileWidth - 1);
            else
               right = solid.GetCurrentTileShape(m_Tileset[this[x, bottomTile]]).GetRightSolidPixel(
                  m_Tileset.TileWidth, m_Tileset.TileHeight, 0, (short)((testArea.Top + testArea.Height - 1) % m_Tileset.TileHeight));
            if ((right &gt; rightMost) &amp;&amp; ((x &lt; rightTile) || (right &lt;= maxTileRight)))
               rightMost = right;
            if (rightMost != short.MinValue)
            {
               int result = rightMost + x * m_Tileset.TileWidth;
               if (result &gt;= testArea.Left)
                  return result;
               else
                  return int.MinValue;
            }
         }
      }
      return int.MinValue;
   }
   #endregion
}

/// &lt;summary&gt;
/// Represents a layer where each tile is represented as a 32-bit integer.
/// &lt;/summary&gt;
[Serializable()]
public abstract partial class IntLayer : LayerBase
{
   private int[,] m_Tiles;

   public IntLayer(Tileset Tileset, MapBase Parent, int nLeftBuffer, int nTopBuffer, int nRightBuffer,
      int nBottomBuffer, int nColumns, int nRows, int nVirtualColumns, int nVirtualRows, LightingMode Lighting,
      System.Drawing.Point Position, System.Drawing.SizeF ScrollRate,
      int nInjectStartIndex, int nAppendStartIndex, string Name) : 
      base(Tileset, Parent, nLeftBuffer, nTopBuffer, nRightBuffer,
      nBottomBuffer, nColumns, nRows, nVirtualColumns, nVirtualRows, Position,
      ScrollRate, Lighting, nInjectStartIndex, nAppendStartIndex)
   {
      System.Resources.ResourceManager resources = new System.Resources.ResourceManager(Parent.GetType());
      if (Name != null)
         m_Tiles = (int[,])(resources.GetObject(Name));
      else
         m_Tiles = new int[nColumns, nRows];
   }

   /// &lt;summary&gt;
   /// Retrieves or sets the value of a tile at the specified tile coordinate
   /// &lt;/summary&gt;
   public override int this[int x, int y]
   {
      get
      {
         return m_Tiles[x % m_nColumns, y % m_nRows];
      }
      set
      {
         m_Tiles[x % m_nColumns, y % m_nRows] = value;
      }
   }

   protected override int[] GetTileFrame(int x, int y)
   {
      return m_Tileset[m_Tiles[x % m_nColumns, y % m_nRows]].CurrentFrame;
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="LayerBase.GetTile"/&gt;.
   /// &lt;/summary&gt;
   public override TileBase GetTile(int x, int y)
   {
      return m_Tileset[m_Tiles[x % m_nColumns,y % m_nRows]];
   }
}

/// &lt;summary&gt;
/// Represents a layer where each tile is represented as a 16-bit integer.
/// &lt;/summary&gt;
[Serializable()]
public abstract partial class ShortLayer : LayerBase
{
   private short[,] m_Tiles;

   public ShortLayer(Tileset Tileset, MapBase Parent, int nLeftBuffer, int nTopBuffer, int nRightBuffer,
      int nBottomBuffer, int nColumns, int nRows, int nVirtualColumns, int nVirtualRows, System.Drawing.Point Position,
      System.Drawing.SizeF ScrollRate, LightingMode Lighting, int nInjectStartIndex, int nAppendStartIndex, string Name) : 
      base(Tileset, Parent, nLeftBuffer, nTopBuffer, nRightBuffer,
      nBottomBuffer, nColumns, nRows, nVirtualColumns, nVirtualRows, Position,
      ScrollRate, Lighting, nInjectStartIndex, nAppendStartIndex)
   {
      System.Resources.ResourceManager resources = new System.Resources.ResourceManager(Parent.GetType());
      if (Name != null)
         m_Tiles = (short[,])(resources.GetObject(Name));
      else
         m_Tiles = new short[nColumns, nRows];
   }

   /// &lt;summary&gt;
   /// Retrieves or sets the value of a tile at the specified tile coordinate
   /// &lt;/summary&gt;
   /// &lt;value&gt;A number from 0 to 32767&lt;/value&gt;
   /// &lt;remarks&gt;Although this member accepts an integer as the value (because that
   /// is the type required by the base class), a layer of this type can only use
   /// 16-bit values.&lt;/remarks&gt;
   public override int this[int x, int y]
   {
      get
      {
         return (int)(m_Tiles[x % m_nColumns, y % m_nRows]);
      }
      set
      {
         m_Tiles[x % m_nColumns, y % m_nRows] = (short)value;
      }
   }

   protected override int[] GetTileFrame(int x, int y)
   {
      return m_Tileset[m_Tiles[x % m_nColumns, y % m_nRows]].CurrentFrame;
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="LayerBase.GetTile"/&gt;.
   /// &lt;/summary&gt;
   public override TileBase GetTile(int x, int y)
   {
      return m_Tileset[m_Tiles[x % m_nColumns, y % m_nRows]];
   }
}

/// &lt;summary&gt;
/// Represents a layer where each tile is represented as a single byte.
/// &lt;/summary&gt;
[Serializable()]
public abstract partial class ByteLayer : LayerBase
{
   private byte[,] m_Tiles;

   public ByteLayer(Tileset Tileset, MapBase Parent, int nLeftBuffer, int nTopBuffer, int nRightBuffer,
      int nBottomBuffer, int nColumns, int nRows, int nVirtualColumns, int nVirtualRows, System.Drawing.Point Position,
      System.Drawing.SizeF ScrollRate, LightingMode Lighting, int nInjectStartIndex, int nAppendStartIndex, string Name) : 
      base(Tileset, Parent, nLeftBuffer, nTopBuffer, nRightBuffer,
      nBottomBuffer, nColumns, nRows, nVirtualColumns, nVirtualRows, Position,
      ScrollRate, Lighting, nInjectStartIndex, nAppendStartIndex)
   {
      System.Resources.ResourceManager resources = new System.Resources.ResourceManager(Parent.GetType());
      if (Name != null)
         m_Tiles = (byte[,])(resources.GetObject(Name));
      else
         m_Tiles = new byte[nColumns, nRows];
   }

   /// &lt;summary&gt;
   /// Retrieves or sets the value of a tile at the specified tile coordinate
   /// &lt;/summary&gt;
   /// &lt;value&gt;A number from 0 to 255&lt;/value&gt;
   /// &lt;remarks&gt;Although this member accepts an integer as the value (because that
   /// is the type required by the base class), a layer of this type can only use
   /// 8-bit values.&lt;/remarks&gt;
   public override int this[int x, int y]
   {
      get
      {
         return (int)(m_Tiles[x % m_nColumns, y % m_nRows]);
      }
      set
      {
         m_Tiles[x % m_nColumns, y % m_nRows] = (byte)value;
      }
   }

   protected override int[] GetTileFrame(int x, int y)
   {
      return m_Tileset[m_Tiles[x % m_nColumns, y % m_nRows]].CurrentFrame;
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="LayerBase.GetTile"/&gt;.
   /// &lt;/summary&gt;
   public override TileBase GetTile(int x, int y)
   {
      return m_Tileset[m_Tiles[x % m_nColumns, y % m_nRows]];
   }
}

/// &lt;summary&gt;
/// Determines whether lighting is enabled or disabled.
/// &lt;/summary&gt;
/// &lt;remarks&gt;The reason this enumerated type exists is because there is a hope
/// to expand on the number of lighting effects available, and use this enumeration
/// to determine what effects should be applied to various layers.&lt;/remarks&gt;
public enum LightingMode
{
   /// &lt;summary&gt;
   /// All lighting effects are disabled, and graphics are drawn at full intensity as originally designed in the graphics editor.
   /// &lt;/summary&gt;
   Disabled,
   /// &lt;summary&gt;
   /// Lighting, bump mapping (aka normal mapping) and solidity shadows are enabled.
   /// &lt;/summary&gt;
   Normal
}
</Text>
  </SourceCode>
  <SourceCode Name="MapBase.cs" IsCustomObject="false">
    <Text>/*
 * Created using Scrolling Game Development Kit 2.0
 * See Project.cs for copyright/licensing details
 */
using System;
using System.Drawing;

/// &lt;summary&gt;
/// Base class for all maps.
/// &lt;/summary&gt;
[Serializable()]
public abstract partial class MapBase
{
   protected Display m_Display;
   /// &lt;summary&gt;
   /// Stores the type of the map that was previously the current map.
   /// &lt;/summary&gt;
   /// &lt;value&gt;A &lt;see cref="System.Type"/&gt; referring to the type of the previously
   /// active map if any existed, or a null reference if there was none.&lt;/value&gt;
   /// &lt;remarks&gt;This is set by &lt;see cref="GeneralRules.SwitchToMap"/&gt; and used by
   /// &lt;see cref="GeneralRules.ReturnToPreviousMap"/&gt;.&lt;/remarks&gt;
   public Type m_CameFromMapType = null;
   private ViewLayout viewLayout = ViewLayout.Single;
   private static byte currentViewIndex = 0;
   /// &lt;summary&gt;
   /// Stores a set of arbitrary boolean/flag values that can be used for any purpose
   /// on each map.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Technically this value can be used to store any data that will
   /// fit in a 32-bit integer, but it's designed to be used with functions in
   /// &lt;see cref="GeneralRules"/&gt; to store individually accessible bits. These
   /// can be set with &lt;see cref="GeneralRules.SetMapFlag"/&gt; and checked with
   /// &lt;see cref="GeneralRules.IsMapFlagOn"/&gt;.&lt;/remarks&gt;
   public int MapFlags = 0;

   /// &lt;summary&gt;
   /// Constructs a new map and links it to the display.
   /// &lt;/summary&gt;
   /// &lt;param name="Disp"&gt;Display object on which the map will be drawn&lt;/param&gt;
   public MapBase(Display Disp)
   {
      m_Display = Disp;
   }

   /// &lt;summary&gt;
   /// Draws all the layers of this map in the current view.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;To draw all layers for all views, see &lt;see cref="DrawAllViews"/&gt;.
   /// &lt;seealso cref="CurrentView"/&gt;
   /// &lt;seealso cref="CurrentViewIndex"/&gt;&lt;/remarks&gt;
   protected abstract void Draw();

   /// &lt;summary&gt;
   /// Execute the rules of each layer in the map.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This executes all the rules for all the plans and active sprites for all layers
   /// in the map. See &lt;see cref="ExecuteRules"/&gt; for information on overiding this.&lt;/remarks&gt;
   public abstract void ExecuteRulesInternal();

   /// &lt;summary&gt;
   /// Allows customization of the way &lt;see cref="ExecuteRulesInternal"/&gt; is called.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The default implementation simply calls ExecuteRulesInternal,
   /// but a partial class on the class derived from this base class may
   /// override this behavior and call ExecuteRulesInternal conditionally.&lt;/remarks&gt;
   public virtual void ExecuteRules() { ExecuteRulesInternal(); }

   /// &lt;summary&gt;
   /// Scroll all layers to the specified coordinates after calculating relative scroll rates
   /// &lt;/summary&gt;
   /// &lt;param name="position"&gt;New coordinate. int.MinValue indicates no scrolling on this axis.&lt;/param&gt;
   public abstract void Scroll(Point position);

   /// &lt;summary&gt;
   /// Return the left scroll margin for this map
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Scroll margins are used to maintain some distance between a sprite and the
   /// edge of the map. Functions that scroll the map generally call
   /// &lt;see cref="LayerBase.ScrollSpriteIntoView"/&gt;, which, when given the appropriate
   /// parameters, will use the scroll margin settings on the map to ensure that the sprite
   /// is scrolled far enough into the view that the scroll margins are maintained.&lt;/remarks&gt;
   public abstract short ScrollMarginLeft
   {
      get;
   }
   /// &lt;summary&gt;
   /// Return the top scroll margin for this map
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Scroll margins are used to maintain some distance between a sprite and the
   /// edge of the map. Functions that scroll the map generally call
   /// &lt;see cref="LayerBase.ScrollSpriteIntoView"/&gt;, which, when given the appropriate
   /// parameters, will use the scroll margin settings on the map to ensure that the sprite
   /// is scrolled far enough into the view that the scroll margins are maintained.&lt;/remarks&gt;
   public abstract short ScrollMarginTop
   {
      get;
   }
   /// &lt;summary&gt;
   /// Return the right scroll margin for this map
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Scroll margins are used to maintain some distance between a sprite and the
   /// edge of the map. Functions that scroll the map generally call
   /// &lt;see cref="LayerBase.ScrollSpriteIntoView"/&gt;, which, when given the appropriate
   /// parameters, will use the scroll margin settings on the map to ensure that the sprite
   /// is scrolled far enough into the view that the scroll margins are maintained.&lt;/remarks&gt;
   public abstract short ScrollMarginRight
   {
      get;
   }
   /// &lt;summary&gt;
   /// Return the bottom scroll margin for this map
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Scroll margins are used to maintain some distance between a sprite and the
   /// edge of the map. Functions that scroll the map generally call
   /// &lt;see cref="LayerBase.ScrollSpriteIntoView"/&gt;, which, when given the appropriate
   /// parameters, will use the scroll margin settings on the map to ensure that the sprite
   /// is scrolled far enough into the view that the scroll margins are maintained.&lt;/remarks&gt;
   public abstract short ScrollMarginBottom
   {
      get;
   }

   /// &lt;summary&gt;
   /// Gets or sets the current arrangement of views within the display.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;By changing this you can affect the number and arrangement of views
   /// that are being managed by the map and its layers. Activating a multi-view layout
   /// will cause the layers to maintain multiple scroll positions, one for each view.
   /// And when a layer is scrolled, it will only be scrolled for the current view (as
   /// indicated by &lt;see cref="CurrentViewIndex"/&gt;.  The number of views must not exceed
   /// the maximum set in the project and stored in &lt;see cref="Project.MaxViews"/&gt;.
   /// The view layout can be set from a rule function by calling
   /// &lt;see cref="GeneralRules.SetViewLayout"/&gt;, and the current view can be changed with
   /// &lt;see cref="GeneralRules.CurrentView"/&gt;.
   /// &lt;seealso cref="CurrentView"/&gt;
   /// &lt;seealso cref="CurrentViewIndex"/&gt;
   /// &lt;seealso cref="GetView"/&gt;
   /// &lt;/remarks&gt;
   public ViewLayout ViewLayout
   {
      get
      {
         return viewLayout;
      }
      set
      {
         if (value == ViewLayout.FourCorners)
            if (Project.MaxViews &lt; 4)
            {
               System.Diagnostics.Debug.Fail("Attempted to use 4-corner view with max views less than 4");
               return;
            }
         if ((value == ViewLayout.TopBottom) || (value == ViewLayout.LeftRight))
            if (Project.MaxViews &lt; 2)
            {
               System.Diagnostics.Debug.Fail("Attempted to use double view with max views less than 2");
               return;
            }
         viewLayout = value;
      }
   }

   /// &lt;summary&gt;
   /// Retrieve the area within the display that the current view occupies.
   /// &lt;/summary&gt;
   /// &lt;param name="viewNumber"&gt;Number from 0 to &lt;see cref="Project.MaxViews"/&gt;-1 specifying
   /// which view to retrieve.&lt;/param&gt;
   /// &lt;returns&gt;Rectangle containing the area on the display object occupied by the view.&lt;/returns&gt;
   /// &lt;remarks&gt;Views are numbered in reading order, left to right and top to bottom.
   /// &lt;seealso cref="ViewLayout"/&gt;
   /// &lt;seealso cref="CurrentView"/&gt;
   /// &lt;seealso cref="CurrentViewIndex"/&gt;
   /// &lt;/remarks&gt;
   public Rectangle GetView(int viewNumber)
   {
      Rectangle result = TotalView;
      switch (viewLayout)
      {
         case ViewLayout.Single:
            return result;
         case ViewLayout.TopBottom:
            result.Height /= 2;
         switch (viewNumber)
         {
            case 0:
               return result;
            default:
               result.Y += TotalView.Height / 2;
               return result;
         }
         case ViewLayout.LeftRight:
            result.Width /= 2;
         switch(viewNumber)
         {
            case 0:
               return result;
            default:
               result.X += TotalView.Width / 2;
               return result;
         }
         default:
            result.Width /= 2;
            result.Height /= 2;
         switch(viewNumber)
         {
            case 0:
               return result;
            case 1:
               result.X += TotalView.Width / 2;
               return result;
            case 2:
               result.Y += TotalView.Height / 2;
               return result;
            default:
               result.X += TotalView.Width / 2;
               result.Y += TotalView.Height / 2;
               return result;
         }
      }
   }

   /// &lt;summary&gt;
   /// Returns the rectangle for the currently active view within the map's total view area
   /// &lt;seealso cref="GetView"/&gt;
   /// &lt;/summary&gt;
   public Rectangle CurrentView
   {
      get
      {
         return GetView(CurrentViewIndex);
      }
   }

   /// &lt;summary&gt;
   /// Which view is currently being processed (0 to &lt;see cref="Project.MaxViews"/&gt; - 1)
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;
   /// This can be retrieved and set from rule functions by using
   /// &lt;see cref="GeneralRules.CurrentView"/&gt;.
   /// &lt;seealso cref="ViewLayout"/&gt;
   /// &lt;/remarks&gt;
   public byte CurrentViewIndex
   {
      get
      {
         return currentViewIndex;
      }
      set
      {
         if ((value &gt;= 0) &amp;&amp; (value &lt; Project.MaxViews))
            currentViewIndex = value;
         else
            System.Diagnostics.Debug.Fail("Bad CurrentViewIndex value ignored");
      }
   }

   /// &lt;summary&gt;
   /// Draws all layers in the map on all views according to the map's current ViewLayout
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Each layer is drawn according to its respective scroll position in the view.
   /// currentViewIndex is reset to 0 after this function called.
   /// &lt;seealso cref="MapBase.ViewLayout"/&gt;&lt;/remarks&gt;
   public void DrawAllViews()
   {
      switch(viewLayout)
      {
         case ViewLayout.Single:
            currentViewIndex = 0;
            Draw();
            break;
         case ViewLayout.TopBottom:
         case ViewLayout.LeftRight:
            for (currentViewIndex = 0; currentViewIndex &lt; 2; currentViewIndex++)
               Draw();
            currentViewIndex = 0;
            break;
         case ViewLayout.FourCorners:
            for (currentViewIndex = 0; currentViewIndex &lt; 4; currentViewIndex++)
               Draw();
            currentViewIndex = 0;
            break;
      }
   }

   /// &lt;summary&gt;
   /// Returns the entire view area for this map (including all sub-views if multiple views exist)
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The total view area is based on the size of the display, which depends on the
   /// display mode setting of the project. Changing this is not supported.&lt;/remarks&gt;
   public virtual Rectangle TotalView
   {
      get
      {
         return m_Display.NativeDisplayRect;
      }
      set
      {
         System.Diagnostics.Debug.Assert(System.Drawing.Rectangle.Intersect(m_Display.NativeDisplayRect, value).Equals(value));
      }
   }

   /// &lt;summary&gt;
   /// Returns the display on which this map is drawn.
   /// &lt;/summary&gt;
   public Display Display
   {
      get
      {
         return m_Display;
      }
   }
}
</Text>
  </SourceCode>
  <SourceCode Name="Player.cs" IsCustomObject="false">
    <Text>/*
 * Created using Scrolling Game Development Kit 2.0
 * See Project.cs for copyright/licensing details
 */
using System;

/// &lt;summary&gt;
/// Defines a common interface by which a sprite can receive input from a player
/// or some object simulating a player.
/// &lt;/summary&gt;
public partial interface IPlayer
{
   /// &lt;summary&gt;
   /// Returns true when the player is pressing up, or false otherwise.
   /// &lt;/summary&gt;
   bool Up
   {
      get;
   }

   /// &lt;summary&gt;
   /// Returns true when the player is pressing left, or false otherwise.
   /// &lt;/summary&gt;
   bool Left
   {
      get;
   }

   /// &lt;summary&gt;
   /// Returns true when the player is pressing right, or false otherwise.
   /// &lt;/summary&gt;
   bool Right
   {
      get;
   }

   /// &lt;summary&gt;
   /// Returns true when the player is pressing down, or false otherwise.
   /// &lt;/summary&gt;
   bool Down
   {
      get;
   }

   /// &lt;summary&gt;
   /// Returns true when the player is pressing button 1, or false otherwise.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The term "button 1" simply refers to one of 4 customizable inputs
   /// on a sprite. There is no pre-defined meaning to the buttons.&lt;/remarks&gt;
   bool Button1
   {
      get;
   }

   /// &lt;summary&gt;
   /// Returns true when the player is pressing button 2, or false otherwise.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The term "button 2" simply refers to one of 4 customizable inputs
   /// on a sprite. There is no pre-defined meaning to the buttons.&lt;/remarks&gt;
   bool Button2
   {
      get;
   }

   /// &lt;summary&gt;
   /// Returns true when the player is pressing button 3, or false otherwise.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The term "button 3" simply refers to one of 4 customizable inputs
   /// on a sprite. There is no pre-defined meaning to the buttons.&lt;/remarks&gt;
   bool Button3
   {
      get;
   }

   /// &lt;summary&gt;
   /// Returns true when the player is pressing button 4, or false otherwise.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The term "button 4" simply refers to one of 4 customizable inputs
   /// on a sprite. There is no pre-defined meaning to the buttons.&lt;/remarks&gt;
   bool Button4
   {
      get;
   }
}

/// &lt;summary&gt;
/// Represents interactions between the game and a player via the keyboard
/// &lt;/summary&gt;
[Serializable()]
public partial class KeyboardPlayer : IPlayer
{
   /// &lt;summary&gt;
   /// Specifies which keyboard key maps to the notion of pressing left.
   /// &lt;/summary&gt;
   public Key key_left;
   /// &lt;summary&gt;
   /// Specifies which keyboard key maps to the notion of pressing up.
   /// &lt;/summary&gt;
   public Key key_up;
   /// &lt;summary&gt;
   /// Specifies which keyboard key maps to the notion of pressing right.
   /// &lt;/summary&gt;
   public Key key_right;
   /// &lt;summary&gt;
   /// Specifies which keyboard key maps to the notion of pressing down.
   /// &lt;/summary&gt;
   public Key key_down;
   /// &lt;summary&gt;
   /// Specifies which keyboard key maps to button 1.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The term "button 1" simply refers to 1 of 4 customizable inputs.&lt;/remarks&gt;
   public Key key_button1;
   /// &lt;summary&gt;
   /// Specifies which keyboard key maps to button 2.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The term "button 2" simply refers to 1 of 4 customizable inputs.&lt;/remarks&gt;
   public Key key_button2;
   /// &lt;summary&gt;
   /// Specifies which keyboard key maps to button 3.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The term "button 3" simply refers to 1 of 4 customizable inputs.&lt;/remarks&gt;
   public Key key_button3;
   /// &lt;summary&gt;
   /// Specifies which keyboard key maps to button 4.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The term "button 4" simply refers to 1 of 4 customizable inputs.&lt;/remarks&gt;
   public Key key_button4;

   /// &lt;summary&gt;
   /// Constructs a new player given the key mappings it will use.
   /// &lt;/summary&gt;
   /// &lt;param name="up"&gt;Initial value for &lt;see cref="key_up"/&gt;&lt;/param&gt;
   /// &lt;param name="left"&gt;Initial value for &lt;see cref="key_left"/&gt;&lt;/param&gt;
   /// &lt;param name="right"&gt;Initial value for &lt;see cref="key_right"/&gt;&lt;/param&gt;
   /// &lt;param name="down"&gt;Initial value for &lt;see cref="key_down"/&gt;&lt;/param&gt;
   /// &lt;param name="button1"&gt;Initial value for &lt;see cref="key_button1"/&gt;&lt;/param&gt;
   /// &lt;param name="button2"&gt;Initial value for &lt;see cref="key_button2"/&gt;&lt;/param&gt;
   /// &lt;param name="button3"&gt;Initial value for &lt;see cref="key_button3"/&gt;&lt;/param&gt;
   /// &lt;param name="button4"&gt;Initial value for &lt;see cref="key_button4"/&gt;&lt;/param&gt;
   private void InitializeKeys(Key up, Key left, Key right, Key down,
      Key button1, Key button2, Key button3, Key button4)
   {
      key_up = up;
      key_left = left;
      key_right = right;
      key_down = down;
      key_button1 = button1;
      key_button2 = button2;
      key_button3 = button3;
      key_button4 = button4;
   }

   /// &lt;summary&gt;
   /// Constructs a new player based on one of 4 possible sets of default key mappings
   /// &lt;/summary&gt;
   /// &lt;param name="defaultSet"&gt;Number 0 through 3 indicating which set of defaults to use.
   /// Default set number 0 is mapped as follows:
   /// &lt;list type="table"&gt;
   /// &lt;listheader&gt;&lt;term&gt;Key&lt;/term&gt;&lt;description&gt;Mapped to&lt;/description&gt;&lt;/listheader&gt;
   /// &lt;item&gt;&lt;term&gt;Up Arrow&lt;/term&gt;&lt;description&gt;&lt;see cref="key_up"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;Left Arrow&lt;/term&gt;&lt;description&gt;&lt;see cref="key_left"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;Right Arrow&lt;/term&gt;&lt;description&gt;&lt;see cref="key_right"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;Down Arrow&lt;/term&gt;&lt;description&gt;&lt;see cref="key_down"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;Right Ctrl&lt;/term&gt;&lt;description&gt;&lt;see cref="key_button1"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;Space&lt;/term&gt;&lt;description&gt;&lt;see cref="key_button2"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;Return&lt;/term&gt;&lt;description&gt;&lt;see cref="key_button3"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;Right Shift&lt;/term&gt;&lt;description&gt;&lt;see cref="key_button4"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;/list&gt;
   /// Default set number 1 is mapped as follows:
   /// &lt;list type="table"&gt;
   /// &lt;listheader&gt;&lt;term&gt;Key&lt;/term&gt;&lt;description&gt;Mapped to&lt;/description&gt;&lt;/listheader&gt;
   /// &lt;item&gt;&lt;term&gt;W&lt;/term&gt;&lt;description&gt;&lt;see cref="key_up"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;A&lt;/term&gt;&lt;description&gt;&lt;see cref="key_left"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;D&lt;/term&gt;&lt;description&gt;&lt;see cref="key_right"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;S&lt;/term&gt;&lt;description&gt;&lt;see cref="key_down"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;Left Shift&lt;/term&gt;&lt;description&gt;&lt;see cref="key_button1"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;Left Ctrl&lt;/term&gt;&lt;description&gt;&lt;see cref="key_button2"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;Q&lt;/term&gt;&lt;description&gt;&lt;see cref="key_button3"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;E&lt;/term&gt;&lt;description&gt;&lt;see cref="key_button4"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;/list&gt;
   /// Default set number 2 is mapped as follows:
   /// &lt;list type="table"&gt;
   /// &lt;listheader&gt;&lt;term&gt;Key&lt;/term&gt;&lt;description&gt;Mapped to&lt;/description&gt;&lt;/listheader&gt;
   /// &lt;item&gt;&lt;term&gt;Numeric Keypad Up/8&lt;/term&gt;&lt;description&gt;&lt;see cref="key_up"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;Numeric Keypad Left/4&lt;/term&gt;&lt;description&gt;&lt;see cref="key_left"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;Numeric Keypad Right/6&lt;/term&gt;&lt;description&gt;&lt;see cref="key_right"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;Numeric Keypad Down/2&lt;/term&gt;&lt;description&gt;&lt;see cref="key_down"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;Numeric Keypad 5&lt;/term&gt;&lt;description&gt;&lt;see cref="key_button1"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;Numeric Keypad 0&lt;/term&gt;&lt;description&gt;&lt;see cref="key_button2"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;Numeric Keypad Enter&lt;/term&gt;&lt;description&gt;&lt;see cref="key_button3"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;Numeric Keypad 7&lt;/term&gt;&lt;description&gt;&lt;see cref="key_button4"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;/list&gt;
   /// Default set number 3 is mapped as follows:
   /// &lt;list type="table"&gt;
   /// &lt;listheader&gt;&lt;term&gt;Key&lt;/term&gt;&lt;description&gt;Mapped to&lt;/description&gt;&lt;/listheader&gt;
   /// &lt;item&gt;&lt;term&gt;I&lt;/term&gt;&lt;description&gt;&lt;see cref="key_up"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;J&lt;/term&gt;&lt;description&gt;&lt;see cref="key_left"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;L&lt;/term&gt;&lt;description&gt;&lt;see cref="key_right"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;K&lt;/term&gt;&lt;description&gt;&lt;see cref="key_down"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;U&lt;/term&gt;&lt;description&gt;&lt;see cref="key_button1"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;O&lt;/term&gt;&lt;description&gt;&lt;see cref="key_button2"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;M&lt;/term&gt;&lt;description&gt;&lt;see cref="key_button3"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;,&lt;/term&gt;&lt;description&gt;&lt;see cref="key_button4"/&gt;&lt;/description&gt;&lt;/item&gt;
   /// &lt;/list&gt;
   /// &lt;/param&gt;
   public KeyboardPlayer(int defaultSet)
   {
      switch(defaultSet)
      {
         case 0:
            InitializeKeys(
               Key.Up,           // Up
               Key.Left,         // Left
               Key.Right,        // Right
               Key.Down,         // Down
               Key.RControl,     // Button 1
               Key.Space,        // Button 2
               Key.Enter,        // Button 3
               Key.RShift);      // Button 4
            break;
         case 1:
            InitializeKeys(
               Key.W,            // Up
               Key.A,            // Left
               Key.D,            // Right
               Key.S,            // Down
               Key.LShift,       // Button 1
               Key.LControl,     // Button 2
               Key.Q,            // Button 3
               Key.E);           // Button 4
            break;
         case 2:
            InitializeKeys(
               Key.NumPad8,      // Up
               Key.NumPad4,      // Right
               Key.NumPad6,      // Left
               Key.NumPad2,      // Down
               Key.NumPad5,      // Button 1
               Key.NumPad0,      // Button 2
               Key.NumPadEnter,  // Button 3
               Key.NumPad7);     // Button 4
            break;
         default:
            InitializeKeys(
               Key.I,            // Up
               Key.J,            // Right
               Key.L,            // Left
               Key.K,            // Down
               Key.U,            // Button 1
               Key.O,            // Button 2
               Key.M,            // Button 3
               Key.Comma);       // Button 4
            break;
      }
   }

   #region IPlayer Members

   /// &lt;summary&gt;
   /// See &lt;see cref="IPlayer.Up"/&gt;.
   /// &lt;/summary&gt;
   public bool Up
   {
      get
      {
         return Project.GameWindow.KeyboardState[key_up];
      }
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="IPlayer.Left"/&gt;.
   /// &lt;/summary&gt;
   public bool Left
   {
      get
      {
         return Project.GameWindow.KeyboardState[key_left];
      }
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="IPlayer.Right"/&gt;.
   /// &lt;/summary&gt;
   public bool Right
   {
      get
      {
         return Project.GameWindow.KeyboardState[key_right];
      }
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="IPlayer.Down"/&gt;.
   /// &lt;/summary&gt;
   public bool Down
   {
      get
      {
         return Project.GameWindow.KeyboardState[key_down];
      }
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="IPlayer.Button1"/&gt;.
   /// &lt;/summary&gt;
   public bool Button1
   {
      get
      {
         return Project.GameWindow.KeyboardState[key_button1];
      }
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="IPlayer.Button2"/&gt;.
   /// &lt;/summary&gt;
   public bool Button2
   {
      get
      {
         return Project.GameWindow.KeyboardState[key_button2];
      }
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="IPlayer.Button3"/&gt;.
   /// &lt;/summary&gt;
   public bool Button3
   {
      get
      {
         return Project.GameWindow.KeyboardState[key_button3];
      }
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="IPlayer.Button4"/&gt;.
   /// &lt;/summary&gt;
   public bool Button4
   {
      get
      {
         return Project.GameWindow.KeyboardState[key_button4];
      }
   }

   #endregion
}

/// &lt;summary&gt;
/// Represents interactions between the game and a player via a joystick/gamepad
/// &lt;/summary&gt;
[Serializable()]
public partial class ControllerPlayer : IPlayer
{
   public int deviceNumber;
   /// &lt;summary&gt;
   /// Array of 4 integers mapping controller button numbers to player button inputs.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The array element at index 0 contains index of the button on the controller
   /// that is mapped to player button number 1. Element 1 is the index for button 2 and
   /// so forth.&lt;/remarks&gt;
   public byte[] buttonMap;

   /// &lt;summary&gt;
   /// Constructs a player object that links input from the specified game controller device
   /// to game input.
   /// &lt;/summary&gt;
   /// &lt;param name="deviceNumber"&gt;Device number as defined in user's Control Panel&lt;/param&gt;
   public ControllerPlayer(int deviceNumber)
   {
      this.deviceNumber = deviceNumber;
      buttonMap = new byte[4] {0, 1, 2, 3};
   }

   public Joystick MyController
   {
      get
      {
         return Project.GameWindow.GetControllerState(deviceNumber);
      }
   }
   #region IPlayer Members

   /// &lt;summary&gt;
   /// See &lt;see cref="IPlayer.Up"/&gt;.
   /// &lt;/summary&gt;
   public bool Up
   {
      get
      {
         return MyController.YPosition &lt; (MyController.MinimumY * 3 + MyController.MaximumY) / 4;
      }
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="IPlayer.Left"/&gt;.
   /// &lt;/summary&gt;
   public bool Left
   {
      get
      {
         return MyController.XPosition &lt; (MyController.MinimumX * 3 + MyController.MaximumX) / 4;
      }
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="IPlayer.Right"/&gt;.
   /// &lt;/summary&gt;
   public bool Right
   {
      get
      {
         return MyController.XPosition &gt; (MyController.MinimumX + MyController.MaximumX * 3) / 4;
      }
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="IPlayer.Down"/&gt;.
   /// &lt;/summary&gt;
   public bool Down
   {
      get
      {
         return MyController.YPosition &gt; (MyController.MinimumY + MyController.MaximumY * 3) / 4;
      }
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="IPlayer.Button1"/&gt;.
   /// &lt;/summary&gt;
   public bool Button1
   {
      get
      {
         return MyController[buttonMap[0]];
      }
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="IPlayer.Button2"/&gt;.
   /// &lt;/summary&gt;
   public bool Button2
   {
      get
      {
         return MyController[buttonMap[1]];
      }
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="IPlayer.Button3"/&gt;.
   /// &lt;/summary&gt;
   public bool Button3
   {
      get
      {
         return MyController[buttonMap[2]];
      }
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="IPlayer.Button4"/&gt;.
   /// &lt;/summary&gt;
   public bool Button4
   {
      get
      {
         return MyController[buttonMap[3]];
      }
   }

   #endregion
}
</Text>
  </SourceCode>
  <SourceCode Name="Project.cs" IsCustomObject="false">
    <Text>/*
 * Scrolling Game Development Kit 2.0
 * Generated Project Template Code
 * 
 * Copyright � 2000 - 2007 Benjamin Marty &lt;bluemonkmn@users.sourceforge.net&gt;
 * 
 * Distributed under the GNU General Public License (GPL)
 *   - see included file COPYING.txt for details, or visit:
 *     http://www.fsf.org/copyleft/gpl.html
 */
using System;

/// &lt;summary&gt;
/// This class provides global, static data. No instances are created.
/// &lt;/summary&gt;
/// &lt;remarks&gt;This class was created to serve as an interface between
/// generated code and project custom code.  It exists so that the
/// Highest level code (including the entry point) can be customized
/// while still allowing the code generator to provide some high level
/// global properties in the Project.resx file.&lt;/remarks&gt;
public partial class Project
{
   private static System.Resources.ResourceManager m_res;
   private static GameForm game;

   /// &lt;summary&gt;
   /// Defines the maximum number of players that can be active.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This determines primarily how many players the user can customize
   /// in the options dialog at runtime. If there is only 1 player, there will be
   /// no dowpdown list to select which player to customize. Note that the actual
   /// number of active players is determined by the rules defined in the project.
   /// &lt;seealso cref="PlanBase.MapPlayerToInputs"/&gt;&lt;/remarks&gt;
   public static readonly System.Byte MaxPlayers;
   /// &lt;summary&gt;
   /// Defines the maxmimum number of views that can be active.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This determines which view layouts can be selected with
   /// &lt;see cref="MapBase.ViewLayout"/&gt; and related functions.&lt;/remarks&gt;
   public static readonly System.Byte MaxViews;
   /// &lt;summary&gt;
   /// Contains a string to display in the game's about dialog.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;The IDE will automatically merge credits from imported objects
   /// into this string.&lt;/remarks&gt;
   public static readonly string GameCredits;

   /// &lt;summary&gt;
   /// Initializes the project's read-only properties from the resource file
   /// provided by the code generator.
   /// &lt;/summary&gt;
   static Project()
   {
      Project.m_res = new System.Resources.ResourceManager(typeof(Project));
      MaxPlayers = byte.Parse(m_res.GetString("_MaxPlayers"));
      MaxViews = byte.Parse(m_res.GetString("_MaxViews"));
      GameCredits = m_res.GetString("_GameCredits");
   }

   /// &lt;summary&gt;
   /// Returns the object that contains all the graphic sheet resources for the project
   /// (among other things)
   /// &lt;/summary&gt;
   /// &lt;example&gt;A graphic sheet's image can be retrieved from this object using code
   /// like this:
   /// &lt;code&gt;System.Drawing.Bitmap bmpGfx = (System.Drawing.Bitmap)Project.Resources.GetObject("My Sheet")&lt;/code&gt;
   /// &lt;/example&gt;
   public static System.Resources.ResourceManager Resources
   {
      get
      {
         return m_res;
      }
   }

   /// &lt;summary&gt;
   /// Returns the main window object.
   /// &lt;/summary&gt;
   public static GameForm GameWindow
   {
      get
      {
         return Project.game;
      }
   }

   /// &lt;summary&gt;
   /// Represents the main entry point of the program.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This creates the main window, initializing it with the game's startup
   /// map, overlay map, title, and default window mode (windowed or full screen), then
   /// calls &lt;see cref="GameForm.Run"/&gt; and lets it run until the game quits.&lt;/remarks&gt;
   public static void Main()
   {
      try
      {
         GameDisplayMode mode = (GameDisplayMode)System.Enum.Parse(typeof(GameDisplayMode), m_res.GetString("_DisplayMode"));
         bool windowed = bool.Parse(m_res.GetString("_Windowed"));
         string windowTitle = m_res.GetString("_WindowTitle");
         System.Type startupMapType = System.Reflection.Assembly.GetExecutingAssembly().GetType(m_res.GetString("_StartupMapType").Replace(" ","_") + "_Map", true);
         System.Type overlayMapType = null;
         if (m_res.GetString("_OverlayMapType") != null)
             overlayMapType = System.Reflection.Assembly.GetExecutingAssembly().GetType(m_res.GetString("_OverlayMapType").Replace(" ","_") + "_Map", true);

         Project.game = new GameForm(mode, windowed, windowTitle, startupMapType, overlayMapType);
         game.Show();
         game.Run();
      }
      catch (System.Exception ex)
      {
         GameForm.HandleException(ex);
      }
   }
}
</Text>
  </SourceCode>
  <SourceCode Name="SpriteCollection.cs" IsCustomObject="false">
    <Text>/*
 * Created using Scrolling Game Development Kit 2.0
 * See Project.cs for copyright/licensing details
 */
using System;

/// &lt;summary&gt;
/// Categorizes / collects sprite instances
/// &lt;/summary&gt;
/// &lt;remarks&gt;Instances of this class are used both to represent the entire collection
/// of sprites contained within a layer &lt;see cref="LayerBase.m_Sprites"/&gt; as well
/// as sub-collections of these sprites divided into individual categories, exposed by
/// &lt;see cref="LayerBase.m_SpriteCategories"/&gt;. Sprite collections can contain static
/// and dynamic sprites. For more information about this distinction, see remarks in
/// &lt;see cref="staticSize"/&gt;.&lt;/remarks&gt;
[Serializable()]
public partial class SpriteCollection : System.Collections.CollectionBase
{
   /// &lt;summary&gt;
   /// Indicates the initial size of this collection, and the size below which
   /// sprites are never removed.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;&lt;para&gt;Sprites defined in the map editor are considered "static" and will always
   /// exist, although they may be inactive (invisible and excluded from processing rules).
   /// But sprites can also be added at runtime. These are referred to as "dynamic"
   /// sprites. When a dynamic sprite is added, it is appended to the end of the main
   /// sprite collection for the layer (&lt;see cref="LayerBase.m_Sprites"/&gt;) as well as
   /// all categories designated to include the specified sprite type (which are also
   /// &lt;see cref="SpriteCollection"/&gt; objects). So each sprite collection has a segment
   /// (at the beginning) of static sprites and a segment at the end (beginning at index
   /// determined by staticSize) containing zero or more dynamic sprites.&lt;/para&gt;
   /// &lt;para&gt;This value, then, represents the number of static sprites in the collection
   /// (whether it be a layer's main collection or a category within the layer).
   /// It is used to ensure that no static sprite can ever be completely removed from
   /// the collection because these should always be available for activation. And sprites
   /// in the collection beyond this range are the only sprites that need to be considered
   /// for removal after a layer's rules are done executing. Only the range of dynamic
   /// sprites will be checked for inactive sprites. Inactive dynamic sprites are removed
   /// from all the categories in which they were a member.&lt;/para&gt;
   /// &lt;seealso cref="SpriteBase.TileAddSprite"/&gt;
   /// &lt;seealso cref="SpriteBase.AddSpriteHere"/&gt;
   /// &lt;seealso cref="PlanBase.AddSpriteAtPlan"/&gt;
   /// &lt;seealso cref="Clean"/&gt;&lt;/remarks&gt;
   public readonly int staticSize;

   /// &lt;summary&gt;
   /// Defines a maximum sprite collection size to help ensure dynamic sprites are not
   /// "leaking" into the system without getting cleaned up.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;For more information about dynamic sprites, see &lt;see cref="staticSize"/&gt;.&lt;/remarks&gt;
   public const int maxCollectionSize = 100;

   /// &lt;summary&gt;
   /// Constructs a sprite collection given a list of all the sprites it should contain.
   /// &lt;/summary&gt;
   /// &lt;param name="sprites"&gt;Array of sprite instances contained in the collection.&lt;/param&gt;
   public SpriteCollection(params SpriteBase[] sprites)
   {
      InnerList.AddRange(sprites);
      staticSize = sprites.Length;
   }

   /// &lt;summary&gt;
   /// Return a sprite instance from the collection given its 0-based index.
   /// &lt;/summary&gt;
   public SpriteBase this[int index]
   {
      get
      {
         return (SpriteBase)InnerList[index];
      }
   }

   /// &lt;summary&gt;
   /// Add a dynamic sprite to the end of this sprite collection.
   /// &lt;/summary&gt;
   /// &lt;param name="sprite"&gt;Sprite to be added&lt;/param&gt;
   /// &lt;returns&gt;Index of the new sprite in the collection&lt;/returns&gt;
   /// &lt;remarks&gt;For more information about dynamic sprites, see &lt;see cref="staticSize"/&gt;.
   /// This function will fail if the number of sprites in the collection is already equal to
   /// or greater than &lt;see cref="maxCollectionSize"/&gt;.&lt;/remarks&gt;
   public int Add(SpriteBase sprite)
   {
      if (List.Count &gt;= maxCollectionSize)
         throw new ApplicationException("A sprite collection has reached the maximum size of " + maxCollectionSize.ToString() + ". This may be a result of failing to properly clean up dynamic sprites, or it may be the result of a maximum that is too small. To increase it, change the value associated with maxCollectionSize in SpriteCollection.cs");
      return List.Add(sprite);
   }

   protected override void OnRemove( int index, Object value )  
   {
      if (index &lt; staticSize)
         throw new ApplicationException("Attempted to remove from a collection a sprite that was not dynamically added");
   }

   /// &lt;summary&gt;
   /// Determine the index of the specified sprite in the collection.
   /// &lt;/summary&gt;
   /// &lt;param name="sprite"&gt;Sprite to search for&lt;/param&gt;
   /// &lt;returns&gt;Zero-based index of the sprite if found, otherwise -1.&lt;/returns&gt;
   public int IndexOf(SpriteBase sprite)
   {
      return List.IndexOf(sprite);
   }

   /// &lt;summary&gt;
   /// Remove the specified sprite from this collection.
   /// &lt;/summary&gt;
   /// &lt;param name="sprite"&gt;Sprite to be removed. This must be a dynamic sprite&lt;/param&gt;
   /// &lt;remarks&gt;For more information about dynamic sprites, see &lt;see cref="staticSize"/&gt;.
   /// An error will occur if an attempt is made to remove a static sprite.&lt;/remarks&gt;
   public void Remove(SpriteBase sprite)
   {
      List.Remove(sprite);
   }

   /// &lt;summary&gt;
   /// Remove inactive dynamic sprites from the collection
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;For more information about dynamic sprites, see &lt;see cref="staticSize"/&gt;.
   /// This function is called after all rules for a layer are processed
   /// (at the end of &lt;see cref="LayerBase.ProcessSprites"/&gt;).&lt;/remarks&gt;
   public void Clean()
   {
      for (int index=staticSize; index &lt; List.Count; index++)
      {
         SpriteBase sprite = this[index];
         if (!sprite.isActive)
         {
            RemoveAt(index);
            sprite.RemoveFromCategories();
         }
      }
   }
}

/// &lt;summary&gt;
/// Enumerates only the currently active sprites on a layer
/// &lt;/summary&gt;
public class ActiveSpriteEnumerator : System.Collections.IEnumerator
{
   private System.Collections.IEnumerator SpriteEnumerator;

   public ActiveSpriteEnumerator(SpriteCollection sprites)
   {
      SpriteEnumerator = sprites.GetEnumerator();
   }

   #region IEnumerator Members

   /// &lt;summary&gt;
   /// Re-start enumerating active sprites.
   /// &lt;/summary&gt;
   public void Reset()
   {
      SpriteEnumerator.Reset();
   }

   /// &lt;summary&gt;
   /// The current sprite being enumerated.
   /// &lt;/summary&gt;
   public object Current
   {
      get
      {
         return SpriteEnumerator.Current;
      }
   }

   /// &lt;summary&gt;
   /// Move to the next active sprite in the collection.
   /// &lt;/summary&gt;
   /// &lt;returns&gt;True if another active sprite exists, or false if there are no more.&lt;/returns&gt;
   public bool MoveNext()
   {
      bool result;
      while ((result = SpriteEnumerator.MoveNext()) &amp;&amp; (!((SpriteBase)Current).isActive))
         ;
      return result;
   }

   #endregion
}
</Text>
  </SourceCode>
  <SourceCode Name="SpriteState.cs" IsCustomObject="false">
    <Text>/*
 * Created using Scrolling Game Development Kit 2.0
 * See Project.cs for copyright/licensing details
 */
using System;

/// &lt;summary&gt;
/// This specialization of TileFrame is used specifically for sprite frames
/// with collision masks (when mask alpha level is non-zero).
/// &lt;/summary&gt;
/// &lt;remarks&gt;Some sprites are simple enough that they can be treated very similar to tiles, and
/// will simply use &lt;see cref="TileFrame"/&gt; directly. Others will use this class.&lt;/remarks&gt;
public partial class SpriteFrame : TileFrame
{
   private CollisionMask m_Mask;

   public SpriteFrame(System.Drawing.Rectangle localBounds, Frameset frameset, int nAccumulatedDuration, int[] subFrames, byte[] alphas) : base(nAccumulatedDuration, subFrames)
   {
      m_Mask = new CollisionMask(localBounds, frameset, subFrames, alphas);
   }

   public SpriteFrame(System.Drawing.Rectangle localBounds, Frameset frameset, int nAccumulatedDuration, int frame, byte alpha) : base(nAccumulatedDuration, frame)
   {
      m_Mask = new CollisionMask(localBounds, frameset, new int[] {frame}, new byte[] {alpha});
   }

   /// &lt;summary&gt;
   /// Returns the mask for this sprite frame.
   /// &lt;/summary&gt;
   public CollisionMask Mask
   {
      get
      {
         return m_Mask;
      }
   }
}

/// &lt;summary&gt;
/// Represents one state within a sprite definition, primarily defining how a it can animate.
/// &lt;/summary&gt;
public partial class SpriteState
{
   private readonly TileFrame[] m_frames;
   private short[] m_frameIndexMap;
   private Frameset m_Frameset;
   private int m_nSolidWidth;
   private int m_nSolidHeight;
   private System.Drawing.Rectangle m_LocalBounds;

   /// &lt;summary&gt;
   /// Constructs a new state given all the information for the state.
   /// &lt;/summary&gt;
   /// &lt;param name="width"&gt;Solid width of this state. Each state within a sprite can have its own solid width.&lt;/param&gt;
   /// &lt;param name="height"&gt;Solid height of this state. Each state within a sprite can have its own solid height.&lt;/param&gt;
   /// &lt;param name="frameset"&gt;&lt;see cref="Frameset"/&gt; containing all the graphics for this state.&lt;/param&gt;
   /// &lt;param name="localBounds"&gt;Rectangle that visually enclompases the graphics of all the frames of this state.
   /// This is used to determine when the sprite is fully or partially visible on the layer and needs to be drawn.&lt;/param&gt;
   /// &lt;param name="frames"&gt;A sequential list of all frames from &lt;paramref name="frameset"/&gt; that are included in this state.&lt;/param&gt;
   public SpriteState(int width, int height, Frameset frameset, System.Drawing.Rectangle localBounds, params TileFrame[] frames)
   {
      m_nSolidWidth = width;
      m_nSolidHeight = height;
      m_Frameset = frameset;
      m_LocalBounds = localBounds;
      m_frames = frames;
      if (m_frames.Length &gt; 0)
      {
         m_frameIndexMap = new short[m_frames[m_frames.Length - 1].m_nAccumulatedDuration];
         short frameIndex = 0;
         for (int frameValue=0; frameValue&lt;m_frameIndexMap.Length; frameValue++)
         {
            if (m_frames[frameIndex].m_nAccumulatedDuration &lt;= frameValue)
               frameIndex++;
            m_frameIndexMap[frameValue] = frameIndex;
         }
      }
   }

   /// &lt;summary&gt;
   /// Returns the frameset on which all graphics in this state are based.
   /// &lt;/summary&gt;
   public Frameset Frameset
   {
      get
      {
         return m_Frameset;
      }
   }

   /// &lt;summary&gt;
   /// Return a list of all frame indexes that represent a particular animation frame of a sprite.
   /// &lt;/summary&gt;
   /// &lt;param name="frameIndex"&gt;Frame counter value.&lt;/param&gt;
   /// &lt;returns&gt;Array if integers that represent indexes into &lt;see cref="Frameset"/&gt; for the
   /// frames that should be drawn for the specified frame.&lt;/returns&gt;
   /// &lt;remarks&gt;Often times this will return an array of one integer because a sprite will only
   /// display one frame at a time. Compound frames defined by using a repeat count of "0" on some
   /// frames, however, will cause multiple frameset frames to be comined into a single sprite
   /// frame. So a single &lt;paramref name="frameIndex"/&gt; value can yield multiple frameset frame
   /// indexes to be drawn at once. But also note that multiple &lt;paramref name="frameIndex"/&gt;
   /// values can yield the same frames because a frame with a repeat count greater than 1 will
   /// cause the sprite to remain on the same frame for multiple iterations.&lt;/remarks&gt;
   public int[] GetFrame(int frameIndex)
   {
      return m_frames[m_frameIndexMap[frameIndex % m_frameIndexMap.Length]].subFrames;
   }

   /// &lt;summary&gt;
   /// Get the collision mask for a specified sprite frame.
   /// &lt;/summary&gt;
   /// &lt;param name="frameIndex"&gt;Frame counter value.&lt;/param&gt;
   /// &lt;returns&gt;Collision mask for the specified frame of the sprite (simply or compound)
   /// if applicable, otherwise a null reference.
   /// See &lt;see cref="GetFrame"/&gt; for more information about &lt;paramref name="frameIndex"/&gt; and
   /// frame counters.&lt;/returns&gt;
   public CollisionMask GetMask(int frameIndex)
   {
      SpriteFrame frame = m_frames[m_frameIndexMap[frameIndex % m_frameIndexMap.Length]] as SpriteFrame;
      if (frame == null)
         return null;
      return frame.Mask;
   }

   /// &lt;summary&gt;
   /// Retrieve the solid width of this state.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Each sprite state can have its own solid width. For example a leaping sprite might
   /// be wider than a standing sprite, and might react to solidity on the map as such.&lt;/remarks&gt;
   public int SolidWidth
   {
      get
      {
         return m_nSolidWidth;
      }
   }

   /// &lt;summary&gt;
   /// Retrieve the solid height of this state.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Each sprite state can have its own solid height. For example a crouching sprite might
   /// be shorter than a standing sprite, and might react to solidity on the map as such.&lt;/remarks&gt;
   public int SolidHeight
   {
      get
      {
         return m_nSolidHeight;
      }
   }

   /// &lt;summary&gt;
   /// Returns a rectangle (relative to the origin of the sprite) that bounds
   /// all the graphics in this state.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This is used to determine when part or all of the sprite is visible on the current
   /// view of the sprite's layer, and consequently, whether it should be drawn.&lt;/remarks&gt;
   public System.Drawing.Rectangle LocalBounds
   {
      get
      {
         return m_LocalBounds;
      }
   }
}</Text>
  </SourceCode>
  <SourceCode Name="Tile.cs" IsCustomObject="false">
    <Text>/*
 * Created using Scrolling Game Development Kit 2.0
 * See Project.cs for copyright/licensing details
 */
using System;

/// &lt;summary&gt;
/// Maps a tile index to frameset frames based on counter values etc
/// &lt;/summary&gt;
public abstract partial class TileBase
{
   protected TileCategoryMembershipBase m_membership;

   protected TileBase(TileCategoryMembershipBase membership)
   {
      m_membership = membership;
   }

   /// &lt;summary&gt;
   /// Returns an array of frameset frames to draw for a tile during a particular frame
   /// &lt;/summary&gt;
   public abstract int[] CurrentFrame
   {
      get;
   }

   /// &lt;summary&gt;
   /// Determines if the tile is a member of the specified category.
   /// &lt;/summary&gt;
   /// &lt;param name="cat"&gt;Enumerated value that designates a tile category&lt;/param&gt;
   /// &lt;returns&gt;True if the tile is a member of the specified category&lt;/returns&gt;
   public abstract bool IsMember(TileCategoryName cat);
}

/// &lt;summary&gt;
/// Represents the definition for an animated tile in a tileset
/// &lt;/summary&gt;
public partial class AnimTile : TileBase
{
   private readonly TileFrame[] m_frames;
   private readonly Counter m_counter;
   private short[] m_frameIndexMap;

   /// &lt;summary&gt;
   /// Creates an animated tile definition
   /// &lt;/summary&gt;
   /// &lt;param name="counter"&gt;Which counter affects this tile's animation&lt;/param&gt;
   /// &lt;param name="frames"&gt;Array of frames sorted by chronological sequence&lt;/param&gt;
   public AnimTile(Counter counter, params TileFrame[] frames) : base(null)
   {
      if (frames.Length &lt;= 0)
         throw new System.ApplicationException("Use EmptyTile to create empty tiles");
      this.m_frames = frames;
      this.m_counter = counter;
      GenerateFrameIndexMap();
   }

   /// &lt;summary&gt;
   /// Creates an animated tile definition and defines the tile's membership in tiel categories.
   /// &lt;/summary&gt;
   /// &lt;param name="counter"&gt;Which counter affects this tile's animation&lt;/param&gt;
   /// &lt;param name="membership"&gt;Defines the categories of which this tile is a member&lt;/param&gt;
   /// &lt;param name="frames"&gt;Array of frames sorted by chronological sequence&lt;/param&gt;
   public AnimTile(Counter counter, TileCategoryMembershipBase membership, params TileFrame[] frames) : base(membership)
   {
      if (frames.Length &lt;= 0)
         throw new System.ApplicationException("Use EmptyTile to create empty tiles");
      this.m_frames = frames;
      this.m_counter = counter;
      GenerateFrameIndexMap();
   }

   private void GenerateFrameIndexMap()
   {
      m_frameIndexMap = new short[m_frames[m_frames.Length - 1].m_nAccumulatedDuration];
      short frameIndex = 0;
      for (int frameValue=0; frameValue&lt;m_frameIndexMap.Length; frameValue++)
      {
         if (m_frames[frameIndex].m_nAccumulatedDuration &lt;= frameValue)
            frameIndex++;
         m_frameIndexMap[frameValue] = frameIndex;
      }
   }

   /// &lt;summary&gt;
   /// Return the index of the current distinct animation frame in the tile's animation sequence.
   /// (NOT a counter value)
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;If a tile's first frame has a repeat count of 2, then counter values of 1
   /// and 2 will yield the same animation frame for that tile, and a counter value of 3
   /// will yield the next animation frame. Notice that these were 3 counter values, but only 2
   /// distinct frames. This property will return 1 for counter values of 1 and 2, and 2 for a
   /// counter value of 3 in this example.&lt;/remarks&gt;
   public int FrameSequenceIndex
   {
      get
      {
         return m_frameIndexMap[m_counter.CurrentValue % m_frameIndexMap.Length];
      }
   }

   /// &lt;summary&gt;
   /// Return the total number of distinct animation frames in the tile.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Although a tile may have (for example) 3 distinct animation frames, they may be
   /// spread out over 24 separate counter values be giving each frame a repeat count of 8.
   /// This value will return 3 in this example, not 24.&lt;/remarks&gt;
   public int FrameSequenceLength
   {
      get
      {
         return m_frames.Length;
      }
   }

   /// &lt;summary&gt;
   /// Return an array of frame indexes representing the frames from this tile's
   /// frameset that should be drawn for the tile in its current state.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Often times this will be an array of 1 integer because tiles will
   /// often only have one frameset frame per animation frame. But multiple frameset
   /// frames can be combined into a single tile animation frame by specifying a
   /// repeat count of 0, in which case this will return all the "sub-frames" that are
   /// active in the current frame of this tile.&lt;/remarks&gt;
   public override int[] CurrentFrame
   {
      get
      {
         return m_frames[FrameSequenceIndex].subFrames;
      }
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileBase.IsMember"/&gt;.
   /// &lt;/summary&gt;
   public override bool IsMember(TileCategoryName cat)
   {
      if (m_membership == null) return false;
      if (m_membership is TileCategoryFrameMembership)
         return ((TileCategoryFrameMembership)m_membership)[FrameSequenceIndex, cat];
      else
         return ((TileCategorySimpleMembership)m_membership)[cat];
   }
}

/// &lt;summary&gt;
/// Represents a non-animated composite or single-cell tile
/// &lt;/summary&gt;
public partial class SimpleTile : TileBase
{
   private readonly int[] frame;

   /// &lt;summary&gt;
   /// Constructs a tile based on a single frame index from a frameset.
   /// &lt;/summary&gt;
   /// &lt;param name="frame"&gt;Zero-based index of the frame within the frameset.&lt;/param&gt;
   public SimpleTile(int frame) : base(null)
   {
      this.frame = new int[] {frame};
   }

   /// &lt;summary&gt;
   /// Constructs a single-frame tile based on multiple frameset frames.
   /// &lt;/summary&gt;
   /// &lt;param name="frame"&gt;An array of frame indexes that make of this compisite tile.&lt;/param&gt;
   /// &lt;remarks&gt;The frame indexes represent the multiple frames that this tile will always
   /// draw. The first frame is drawn behind, and the last frame is drawn in front.&lt;/remarks&gt;
   public SimpleTile(int[] frame) : base(null)
   {
      this.frame = frame;
   }

   /// &lt;summary&gt;
   /// Constructs a tile based on a single frame index from a frameset, and specifies
   /// the tile's membership in tile categories.
   /// &lt;/summary&gt;
   /// &lt;param name="frame"&gt;Zero-based index of the frame within the frameset.&lt;/param&gt;
   /// &lt;param name="membership"&gt;Provides an object that determines in which categories
   /// this tile is a member.&lt;/param&gt;
   public SimpleTile(int frame, TileCategoryMembershipBase membership) : base(membership)
   {
      this.frame = new int[] {frame};
   }

   /// &lt;summary&gt;
   /// Constructs a single-frame tile based on multiple frameset frames, and specifies
   /// the tile's membership in tile categories.
   /// &lt;/summary&gt;
   /// &lt;param name="frame"&gt;An array of frame indexes that make of this compisite tile.&lt;/param&gt;
   /// &lt;param name="membership"&gt;Provides an object that determines in which categories
   /// this tile is a member.&lt;/param&gt;
   /// &lt;remarks&gt;The frame indexes represent the multiple frames that this tile will always
   /// draw. The first frame is drawn behind, and the last frame is drawn in front.&lt;/remarks&gt;
   public SimpleTile(int[] frame, TileCategoryMembershipBase membership) : base(membership)
   {
      this.frame = frame;
   }

   /// &lt;summary&gt;
   /// Returns an array of frameset frame indexes that represent the current appearance of the tile.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;For a simple single-frame tile this will always be an array of 1.  For a
   /// compound tile, this will contain multiple frame indexes in sequence from back-most to
   /// fore-most on the display.&lt;/remarks&gt;
   public override int[] CurrentFrame
   {
      get
      {
         return frame;
      }
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileBase.IsMember"/&gt;.
   /// &lt;/summary&gt;
   public override bool IsMember(TileCategoryName cat)
   {
      if (m_membership == null) return false;
      return ((TileCategorySimpleMembership)m_membership)[cat];
   }
}

/// &lt;summary&gt;
/// Represents a tile that doesn't draw anything onto the layer
/// &lt;/summary&gt;
public partial class EmptyTile : TileBase
{
   /// &lt;summary&gt;
   /// Returns the single empty tile object used for all empty tiles.
   /// &lt;/summary&gt;
   public static readonly EmptyTile Value = new EmptyTile();
   private readonly int[] frame;

   private EmptyTile() : base(null)
   {
      frame = new int[] {};
   }

   /// &lt;summary&gt;
   /// Returns an empty array
   /// &lt;/summary&gt;
   public override int[] CurrentFrame
   {
      get
      {
         return frame;
      }
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileBase.IsMember"/&gt;.
   /// &lt;/summary&gt;
   public override bool IsMember(TileCategoryName cat)
   {
      return false;
   }
}

/// &lt;summary&gt;
/// Represents the appearance of a tile during one iteration of the game loop.
/// &lt;/summary&gt;
/// &lt;remarks&gt;Composite tiles are tiles that draw multiple images at once for a single
/// iteration of the game loop. Such tiles will have sub-frames representing the multiple
/// images that are drawn overlapped.&lt;/remarks&gt;
public partial class TileFrame : IComparable
{
   /// &lt;summary&gt;
   /// Represents counter value, and is used to optimize frame searching
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This is the sum of all the repeat count values on this frame
   /// and before and is used to optimize the translation between a counter
   /// value and an index into the series of distinct tile frames/appearances.&lt;/remarks&gt;
   public readonly int m_nAccumulatedDuration;
   /// &lt;summary&gt;
   /// A list of all the frameset frame indexes contained in this tile frame.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Composite tiles may have multiple frames drawn on top of each other.&lt;/remarks&gt;
   public readonly int[] subFrames;

   /// &lt;summary&gt;
   /// Constructs a composite TileFrame given its &lt;see cref="m_nAccumulatedDuration"/&gt; and
   /// &lt;see cref="subFrames"/&gt;.
   /// &lt;/summary&gt;
   /// &lt;param name="nAccumulatedDuration"&gt;&lt;see cref="m_nAccumulatedDuration"/&gt; value&lt;/param&gt;
   /// &lt;param name="subFrames"&gt;&lt;see cref="subFrames"/&gt; value&lt;/param&gt;
   public TileFrame(int nAccumulatedDuration, int[] subFrames)
   {
      this.m_nAccumulatedDuration = nAccumulatedDuration;
      this.subFrames = subFrames;
   }

   /// &lt;summary&gt;
   /// Constructs a simple (non-composite) TileFrame given its &lt;see cref="m_nAccumulatedDuration"/&gt;
   /// and the single frameset frame index.
   /// &lt;/summary&gt;
   /// &lt;param name="nAccumulatedDuration"&gt;&lt;see cref="m_nAccumulatedDuration"/&gt; value&lt;/param&gt;
   /// &lt;param name="frame"&gt;Frameset frame index drawn by this tile frame. This gets converted into
   /// a single-element array of integers in &lt;see cref="subFrames"/&gt;.&lt;/param&gt;
   public TileFrame(int nAccumulatedDuration, int frame)
   {
      this.m_nAccumulatedDuration= nAccumulatedDuration;
      this.subFrames = new int[] {frame};
   }

   #region IComparable Members
   /// &lt;summary&gt;
   /// Compares frames based on their &lt;see cref="m_nAccumulatedDuration"/&gt; value
   /// &lt;/summary&gt;
   /// &lt;param name="obj"&gt;Another TileFrame object, or a counter value&lt;/param&gt;
   /// &lt;returns&gt;
   /// &lt;list type="table"&gt;
   /// &lt;listheader&gt;&lt;term&gt;Return Value&lt;/term&gt;&lt;item&gt;Description&lt;/item&gt;&lt;/listheader&gt;
   /// &lt;item&gt;&lt;term&gt;Less than zero&lt;/term&gt;&lt;description&gt;This frame comes before &lt;paramref name="obj"/&gt;
   /// in the counter indexing sequence.&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;Zero&lt;/term&gt;&lt;description&gt;This frame should be drawn when the specified counter value is current&lt;/description&gt;&lt;/item&gt;
   /// &lt;item&gt;&lt;term&gt;Greater than zero&lt;/term&gt;&lt;description&gt;This frame comes after
   /// &lt;paramref name="obj"/&gt; in the counter indexing sequence.&lt;/description&gt;&lt;/item&gt;
   /// &lt;/list&gt;&lt;/returns&gt;
   public int CompareTo(object obj)
   {
      if (obj is TileFrame)
         return m_nAccumulatedDuration.CompareTo(((TileFrame)obj).m_nAccumulatedDuration);
      else
         return m_nAccumulatedDuration.CompareTo(obj);
   }
   #endregion
}</Text>
  </SourceCode>
  <SourceCode Name="TileCategoryMembership.cs" IsCustomObject="false">
    <Text>/*
 * Created using Scrolling Game Development Kit 2.0
 * See Project.cs for copyright/licensing details
 */
using System;

/// &lt;summary&gt;
/// Stores information about which categories a tile is in.
/// &lt;/summary&gt;
public abstract partial class TileCategoryMembershipBase
{
}

/// &lt;summary&gt;
/// Represents membership information in which the membership of a tile does not
/// change based on its state.
/// &lt;/summary&gt;
public partial class TileCategorySimpleMembership : TileCategoryMembershipBase
{
   private System.Collections.BitArray m_membership;

   /// &lt;summary&gt;
   /// Constructs membership information given a list of category designators.
   /// &lt;/summary&gt;
   /// &lt;param name="membership"&gt;Designates the categories in which a tile is a member.&lt;/param&gt;
   public TileCategorySimpleMembership(params TileCategoryName[] membership)
   {
      m_membership = new System.Collections.BitArray((int)TileCategoryName.Count);
      foreach(TileCategoryName cat in membership)
         m_membership[(int)cat] = true;
   }

   /// &lt;summary&gt;
   /// Returns true if the tile is a member of the specified category
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;This algorithm is simple and executes in O(1) time (it is not
   /// proportional to the number of tiles, number of categories, or number
   /// of memberships).&lt;/remarks&gt;
   public bool this[TileCategoryName category]
   {
      get
      {
         return m_membership[(int)category];
      }
   }
}

/// &lt;summary&gt;
/// Represents membership information for a tile whose membership changes based on
/// which frame is active.
/// &lt;/summary&gt;
public partial class TileCategoryFrameMembership : TileCategoryMembershipBase
{
   private System.Collections.BitArray[] m_frames;

   /// &lt;summary&gt;
   /// Constructs membership information for tile given all the information for the membership
   /// &lt;/summary&gt;
   /// &lt;param name="nFrameSequenceCount"&gt;The number of distinct frames the tile has&lt;/param&gt;
   /// &lt;param name="membership"&gt;A list of memberships for some or all of the tile's frames.
   /// For each category that contains one or more of the tile's frames, there should be
   /// one element in this list.&lt;/param&gt;
   /// &lt;remarks&gt;The &lt;paramref name="membership"/&gt; parameter is only a temporary object used
   /// in the process of constructing this object and is discarded when construction is
   /// complete. This is done to abbreviate the code that constructs these memberships since
   /// the number of distinct categories in which the tile's various frames are members is
   /// usually low, but there may be many distinct frames that are included in each category.
   /// This information is converted to a more optimal format during construction, which allows
   /// the code to determine if a frame is in a category without doing any searching. So the
   /// original membership data is no longer required.&lt;/remarks&gt;
   public TileCategoryFrameMembership(int nFrameSequenceCount, params TileFrameMembership[] membership)
   {
      m_frames = new System.Collections.BitArray[nFrameSequenceCount];
      for (int i=0; i&lt;(int)nFrameSequenceCount; i++)
         m_frames[i] = new System.Collections.BitArray((int)TileCategoryName.Count);

      foreach(TileFrameMembership mbr in membership)
         for (int frameIdx = 0; frameIdx &lt; mbr.frames.Length; frameIdx++)
            m_frames[mbr.frames[frameIdx]][(int)mbr.category] = true;
   }

   /// &lt;summary&gt;
   /// Returns true if the specified zero-based frame (not counter value) of the tile
   /// is a member of the specified category.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;nFrameSequenceIndex refers to the index within the list of distinct
   /// frames in the tile's animation sequence, not the counter value that corresponds
   /// to that frame. This operation is simple and will return in O(1) time (it does not
   /// depend on the number of frames, categories or memberships involved).
   /// &lt;see cref="AnimTile.FrameSequenceIndex"/&gt;&lt;/remarks&gt;
   public bool this[int nFrameSequenceIndex, TileCategoryName category]
   {
      get
      {
         return m_frames[nFrameSequenceIndex][(int)category];
      }
   }
}

/// &lt;summary&gt;
/// Defines an object that can be used to provide information to the construction of a
/// &lt;see cref="TileCategoryFrameMembership"/&gt;.
/// &lt;/summary&gt;
/// &lt;remarks&gt;Instances of this class are not retained, but rather converted into a more optimal
/// form during the construction of the &lt;see cref="TileCategoryFrameMembership"/&gt;.&lt;/remarks&gt;
public partial struct TileFrameMembership
{
   /// &lt;summary&gt;
   /// Represents a category designated to contain one or more specific frames from an animated tile.
   /// &lt;/summary&gt;
   public TileCategoryName category;
   /// &lt;summary&gt;
   /// Represents a list of frame indexes from a tile that are to be included in a category.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Note that this refers to frame sequence index as described
   /// in &lt;see cref="AnimTile. FrameSequenceIndex"/&gt;, and not a counter value.&lt;/remarks&gt;
   public int[] frames;

   /// &lt;summary&gt;
   /// Constructs membership information given all the parameters
   /// &lt;/summary&gt;
   /// &lt;param name="category"&gt;Specifies a category that will contain one or more
   /// frames from an animated tile.&lt;/param&gt;
   /// &lt;param name="frames"&gt;Specifies the indexes of the tile's frames that will be
   /// included in this category. Note that this refers to frame sequence index as described
   /// in &lt;see cref="AnimTile. FrameSequenceIndex"/&gt;, and not a counter value.&lt;/param&gt;
   public TileFrameMembership(TileCategoryName category, int[] frames)
   {
      this.frames = frames;
      this.category = category;
   }
}
</Text>
  </SourceCode>
  <SourceCode Name="TileShapes.cs" IsCustomObject="false">
    <Text>/*
 * Created using Scrolling Game Development Kit 2.0
 * See Project.cs for copyright/licensing details
 */
using System;

/// &lt;summary&gt;
/// Associates a category of tiles with a solidity shape to which sprites can react.
/// &lt;/summary&gt;
[Serializable()]
public partial struct SolidityMapping : System.Runtime.Serialization.ISerializable
{
   /// &lt;summary&gt;
   /// Designates the category of tiles to which a shape is applied.
   /// &lt;/summary&gt;
   public TileCategoryName category;
   /// &lt;summary&gt;
   /// Designates the shape of the tiles in the associated category.
   /// &lt;/summary&gt;
   public TileShape shape;

   /// &lt;summary&gt;
   /// Constructs a SolidityMapping given all its parameters
   /// &lt;/summary&gt;
   /// &lt;param name="category"&gt;Initial value for &lt;see cref="category"/&gt;&lt;/param&gt;
   /// &lt;param name="shape"&gt;Initial value for &lt;see cref="shape"/&gt;&lt;/param&gt;
   public SolidityMapping(TileCategoryName category, TileShape shape)
   {
      this.category = category;
      this.shape = shape;
   }

   private SolidityMapping(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
   {
      category = (TileCategoryName)info.GetInt32("TileCategoryName");
      shape = (TileShape)System.Type.GetType(info.GetString("TileShapeName"), true, false).GetProperty("Value",
         System.Reflection.BindingFlags.GetProperty | System.Reflection.BindingFlags.Static |
         System.Reflection.BindingFlags.Public).GetValue(null, null);
   }

   /// &lt;summary&gt;
   /// This is provided to allow the object to be serialized for the purposes of saving and loading game data.
   /// &lt;/summary&gt;
   public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
   {
      info.AddValue("TileCategoryName", (System.Int32)category);
      info.AddValue("TileShapeName", shape.GetType().Name);
   }
}

/// &lt;summary&gt;
/// Defines a particular shape that a tile can have at any/all sizes
/// &lt;/summary&gt;
public abstract partial class TileShape
{
   public TileShape()
   {
   }
   /// &lt;summary&gt;
   /// Gets the vertical coordinate of the top-most solid pixel of a tile shape between two horizontal offsets.
   /// &lt;/summary&gt;
   /// &lt;param name="width"&gt;Width of the tile to which the shape is being applied&lt;/param&gt;
   /// &lt;param name="height"&gt;Height of the tile to which the shape is being applied&lt;/param&gt;
   /// &lt;param name="min"&gt;Horizontal offset of the left side of the range to test&lt;/param&gt;
   /// &lt;param name="max"&gt;Horizontal offset of the right side of the range to test&lt;/param&gt;
   /// &lt;returns&gt;A value between 0 and height-1, inclusive, or short.MaxValue if there is no solid&lt;/returns&gt;
   public abstract short GetTopSolidPixel(short width, short height, short min, short max);
   /// &lt;summary&gt;
   /// Gets the vertical coordinate of the bottom-most solid pixel of a tile shape between two horizontal offsets.
   /// &lt;/summary&gt;
   /// &lt;param name="width"&gt;Width of the tile to which the shape is being applied&lt;/param&gt;
   /// &lt;param name="height"&gt;Height of the tile to which the shape is being applied&lt;/param&gt;
   /// &lt;param name="min"&gt;Horizontal offset of the left side of the range to test&lt;/param&gt;
   /// &lt;param name="max"&gt;Horizontal offset of the right side of the range to test&lt;/param&gt;
   /// &lt;returns&gt;A value between 0 and height-1, inclusive, or short.MinValue if there is no solid&lt;/returns&gt;
   public abstract short GetBottomSolidPixel(short width, short height, short min, short max);
   /// &lt;summary&gt;
   /// Gets the horizontal coordinate of the left-most solid pixel of a tile shape between two vertical offsets
   /// &lt;/summary&gt;
   /// &lt;param name="width"&gt;Width of the tile to which the shape is being applied&lt;/param&gt;
   /// &lt;param name="height"&gt;Height of the tile to which the shape is being applied&lt;/param&gt;
   /// &lt;param name="min"&gt;Vertical offset of the top of the range to test&lt;/param&gt;
   /// &lt;param name="max"&gt;Vertical offset of the bottom of the range to test&lt;/param&gt;
   /// &lt;returns&gt;A value between 0 and width-1, inclusive, or short.MaxValue if there is no solid&lt;/returns&gt;
   public abstract short GetLeftSolidPixel(short width, short height, short min, short max);
   /// &lt;summary&gt;
   /// Gets the horizontal coordinate of the right-most solid pixel of a tile shape between two vertical offsets
   /// &lt;/summary&gt;
   /// &lt;param name="width"&gt;Width of the tile to which the shape is being applied&lt;/param&gt;
   /// &lt;param name="height"&gt;Height of the tile to which the shape is being applied&lt;/param&gt;
   /// &lt;param name="min"&gt;Vertical offset of the top of the range to test&lt;/param&gt;
   /// &lt;param name="max"&gt;Vertical offset of the bottom of the range to test&lt;/param&gt;
   /// &lt;returns&gt;A value between 0 and width-1, inclusive, or short.MinValue if there is no solid&lt;/returns&gt;
   public abstract short GetRightSolidPixel(short width, short height, short min, short max);
}

/// &lt;summary&gt;
/// Represents an empty tile (nothing solid)
/// &lt;/summary&gt;
public partial class EmptyTileShape : TileShape
{
   private static EmptyTileShape m_Value = new EmptyTileShape();

   /// &lt;summary&gt;
   /// Returns the default instance of this class.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Objects derived from &lt;see cref="TileShape"/&gt; generally have a default
   /// instance that all code can refer to because they are just a set of functions
   /// and don't have any instance-specific data.  So all code can share one instance
   /// rather than each case dealing with creating its own.&lt;/remarks&gt;
   public static EmptyTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public EmptyTileShape()
   {
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetTopSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return short.MaxValue;
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetBottomSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return short.MinValue;
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetLeftSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return short.MaxValue;
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetRightSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return short.MinValue;
   }
}

/// &lt;summary&gt;
/// Represents a solid tile (flat solid on all 4 sides)
/// &lt;/summary&gt;
public partial class SolidTileShape : TileShape
{
   private static SolidTileShape m_Value = new SolidTileShape();

   /// &lt;summary&gt;
   /// Returns the default instance of this class.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Objects derived from &lt;see cref="TileShape"/&gt; generally have a default
   /// instance that all code can refer to because they are just a set of functions
   /// and don't have any instance-specific data.  So all code can share one instance
   /// rather than each case dealing with creating its own.&lt;/remarks&gt;
   public static SolidTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public SolidTileShape()
   {
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetTopSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return 0;
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetBottomSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height-1);
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetLeftSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return 0;
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetRightSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return (short)(width-1);
   }
}

/*
   +--------+
   |       X|
   |      XX|
   |     XXX|
   |    XXXX|
   |   XXXXX|
   |  XXXXXX|
   | XXXXXXX|
   |XXXXXXXX|
   +--------+
*/
/// &lt;summary&gt;
/// Represents an "uphill" shape with a slope leading from the lower left corner
/// to the upper right corner with the lower right half of the tile being solid.
/// &lt;/summary&gt;
public partial class UphillTileShape : TileShape
{
   private static UphillTileShape m_Value = new UphillTileShape();

   /// &lt;summary&gt;
   /// Returns the default instance of this class.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Objects derived from &lt;see cref="TileShape"/&gt; generally have a default
   /// instance that all code can refer to because they are just a set of functions
   /// and don't have any instance-specific data.  So all code can share one instance
   /// rather than each case dealing with creating its own.&lt;/remarks&gt;
   public static UphillTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public UphillTileShape()
   {
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetTopSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height * (width-max-1) / width);
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetBottomSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height-1);
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetLeftSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return (short)(width * (height-max-1) / height);
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetRightSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return (short)(width-1);
   }
}

/*
   +--------+
   |X       |
   |XX      |
   |XXX     |
   |XXXX    |
   |XXXXX   |
   |XXXXXX  |
   |XXXXXXX |
   |XXXXXXXX|
   +--------+
*/
/// &lt;summary&gt;
/// Represents a "downhill" shape with a slope leading from the upper left corner
/// to the lower right corner with the lower left half of the tile being solid.
/// &lt;/summary&gt;
public partial class DownhillTileShape : TileShape
{
   private static DownhillTileShape m_Value = new DownhillTileShape();

   /// &lt;summary&gt;
   /// Returns the default instance of this class.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Objects derived from &lt;see cref="TileShape"/&gt; generally have a default
   /// instance that all code can refer to because they are just a set of functions
   /// and don't have any instance-specific data.  So all code can share one instance
   /// rather than each case dealing with creating its own.&lt;/remarks&gt;
   public static DownhillTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public DownhillTileShape()
   {
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetTopSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return (short)(min * height / width);
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetBottomSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height-1);
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetLeftSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return 0;
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetRightSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return (short)(width - (height - max - 1) * width / height - 1);
   }
}

/*
   +--------+
   |XXXXXXXX|
   |XXXXXXX |
   |XXXXXX  |
   |XXXXX   |
   |XXXX    |
   |XXX     |
   |XX      |
   |X       |
   +--------+
*/
/// &lt;summary&gt;
/// Represents an "upward ceiling" shape with a slope leading from the lower left corner
/// to the upper right corner with the upper left half of the tile being solid.
/// &lt;/summary&gt;
public partial class UpCeilingTileShape : TileShape
{
   private static UpCeilingTileShape m_Value = new UpCeilingTileShape();

   /// &lt;summary&gt;
   /// Returns the default instance of this class.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Objects derived from &lt;see cref="TileShape"/&gt; generally have a default
   /// instance that all code can refer to because they are just a set of functions
   /// and don't have any instance-specific data.  So all code can share one instance
   /// rather than each case dealing with creating its own.&lt;/remarks&gt;
   public static UpCeilingTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public UpCeilingTileShape()
   {
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetTopSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return 0;
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetBottomSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return (short)(((width - min) * height - 1) / width);
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetLeftSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return 0;
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetRightSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return (short)(((height - min) * width - 1) / height);
   }
}

/*
   +--------+
   |XXXXXXXX|
   | XXXXXXX|
   |  XXXXXX|
   |   XXXXX|
   |    XXXX|
   |     XXX|
   |      XX|
   |       X|
   +--------+
*/
/// &lt;summary&gt;
/// Represents a "downward ceiling" shape with a slope leading from the upper left corner
/// to the lower right corner with the upper right half of the tile being solid.
/// &lt;/summary&gt;
public partial class DownCeilingTileShape : TileShape
{
   private static DownCeilingTileShape m_Value = new DownCeilingTileShape();

   /// &lt;summary&gt;
   /// Returns the default instance of this class.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Objects derived from &lt;see cref="TileShape"/&gt; generally have a default
   /// instance that all code can refer to because they are just a set of functions
   /// and don't have any instance-specific data.  So all code can share one instance
   /// rather than each case dealing with creating its own.&lt;/remarks&gt;
   public static DownCeilingTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public DownCeilingTileShape()
   {
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetTopSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return 0;
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetBottomSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height - (width - max - 1) * height / width - 1);
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetLeftSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return (short)(min * width / height);
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetRightSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return (short)(width - 1);
   }
}

/*
   +--------+
   |      XX|
   |    XXXX|
   |  XXXXXX|
   |XXXXXXXX|
   |XXXXXXXX|
   |XXXXXXXX|
   |XXXXXXXX|
   |XXXXXXXX|
   +--------+
*/
/// &lt;summary&gt;
/// Represents the right half of a gradual "uphill" tile with a slope leading from the
/// middle left to the upper right corner with the lower portion of the tile being solid.
/// &lt;/summary&gt;
public partial class UphillRightTileShape : TileShape
{
   private static UphillRightTileShape m_Value = new UphillRightTileShape();

   /// &lt;summary&gt;
   /// Returns the default instance of this class.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Objects derived from &lt;see cref="TileShape"/&gt; generally have a default
   /// instance that all code can refer to because they are just a set of functions
   /// and don't have any instance-specific data.  So all code can share one instance
   /// rather than each case dealing with creating its own.&lt;/remarks&gt;
   public static UphillRightTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public UphillRightTileShape()
   {
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetTopSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height * (width - max - 1) / width / 2);
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetBottomSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height - 1);
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetLeftSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return (short)((max * 2 &gt;= height - 2) ? 0 : width * (height - max * 2 - 2) / height);
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetRightSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return (short)(width - 1);
   }
}

/*
   +--------+
   |        |
   |        |
   |        |
   |        |
   |      XX|
   |    XXXX|
   |  XXXXXX|
   |XXXXXXXX|
   +--------+
*/
/// &lt;summary&gt;
/// Represents the left half of a gradual "uphill" tile with a slope leading from the
/// lower left corner to the middle right with the lower portion of the tile being solid.
/// &lt;/summary&gt;
public partial class UphillLeftTileShape : TileShape
{
   private static UphillLeftTileShape m_Value = new UphillLeftTileShape();

   /// &lt;summary&gt;
   /// Returns the default instance of this class.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Objects derived from &lt;see cref="TileShape"/&gt; generally have a default
   /// instance that all code can refer to because they are just a set of functions
   /// and don't have any instance-specific data.  So all code can share one instance
   /// rather than each case dealing with creating its own.&lt;/remarks&gt;
   public static UphillLeftTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public UphillLeftTileShape()
   {
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetTopSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height * (width - max - 1) / width / 2 + height / 2);
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetBottomSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height - 1);
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetLeftSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return (short)(((max + 1) * 2 &lt;= height)?short.MaxValue:width * (height - max - 1) * 2 / height);
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetRightSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return (short)(((max + 1) * 2 &lt;= height)?short.MinValue:width - 1);
   }
}

/*
   +--------+
   |XX      |
   |XXXX    |
   |XXXXXX  |
   |XXXXXXXX|
   |XXXXXXXX|
   |XXXXXXXX|
   |XXXXXXXX|
   |XXXXXXXX|
   +--------+
*/
/// &lt;summary&gt;
/// Represents the left half of a gradual "downhill" tile with a slope leading from the
/// upper left corner to the middle right with the lower portion of the tile being solid.
/// &lt;/summary&gt;
public partial class DownhillLeftTileShape : TileShape
{
   private static DownhillLeftTileShape m_Value = new DownhillLeftTileShape();

   /// &lt;summary&gt;
   /// Returns the default instance of this class.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Objects derived from &lt;see cref="TileShape"/&gt; generally have a default
   /// instance that all code can refer to because they are just a set of functions
   /// and don't have any instance-specific data.  So all code can share one instance
   /// rather than each case dealing with creating its own.&lt;/remarks&gt;
   public static DownhillLeftTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public DownhillLeftTileShape()
   {
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetTopSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return (short)(min * height / width / 2);
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetBottomSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height-1);
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetLeftSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return 0;
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetRightSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return (short)(((max + 1) * 2 &gt; height) ? width - 1 : width * 2 - (height - max - 1) * width * 2 / height - 1);
   }
}

/*
   +--------+
   |        |
   |        |
   |        |
   |        |
   |XX      |
   |XXXX    |
   |XXXXXX  |
   |XXXXXXXX|
   +--------+
*/
/// &lt;summary&gt;
/// Represents the right half of a gradual "downhill" tile with a slope leading from the
/// middle left to the lower right corner with the lower portion of the tile being solid.
/// &lt;/summary&gt;
public partial class DownhillRightTileShape : TileShape
{
   private static DownhillRightTileShape m_Value = new DownhillRightTileShape();

   /// &lt;summary&gt;
   /// Returns the default instance of this class.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Objects derived from &lt;see cref="TileShape"/&gt; generally have a default
   /// instance that all code can refer to because they are just a set of functions
   /// and don't have any instance-specific data.  So all code can share one instance
   /// rather than each case dealing with creating its own.&lt;/remarks&gt;
   public static DownhillRightTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public DownhillRightTileShape()
   {
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetTopSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return (short)((height + min * height / width) / 2);
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetBottomSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return (short)(height-1);
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetLeftSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return (short)(((min + 1) * 2 &lt;= height) ? short.MaxValue : (short)0);
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetRightSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return (short)(((max + 1) * 2 &lt;= height) ? short.MinValue : width - (height - max - 1) * 2 * width / height - 1);
   }
}


/*
   +--------+
   |^^^^^^^^|
   |        |
   |        |
   |        |
   |        |
   |        |
   |        |
   |        |
   +--------+
   (Top is solid only from above)
*/
/// &lt;summary&gt;
/// Represents a tile that is only solid from above. A sprite can move freely through this tile
/// in any direction unless the sprite is fully above the tile in which case it cannot penetrate
/// the top.
/// &lt;/summary&gt;
public partial class TopSolidTileShape : TileShape
{
   private static TopSolidTileShape m_Value = new TopSolidTileShape();

   /// &lt;summary&gt;
   /// Returns the default instance of this class.
   /// &lt;/summary&gt;
   /// &lt;remarks&gt;Objects derived from &lt;see cref="TileShape"/&gt; generally have a default
   /// instance that all code can refer to because they are just a set of functions
   /// and don't have any instance-specific data.  So all code can share one instance
   /// rather than each case dealing with creating its own.&lt;/remarks&gt;
   public static TopSolidTileShape Value
   {
      get
      {
         return m_Value;
      }
   }

   public TopSolidTileShape()
   {
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetTopSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetTopSolidPixel(short width, short height, short min, short max)
   {
      return 0;
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetBottomSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetBottomSolidPixel(short width, short height, short min, short max)
   {
      return short.MinValue;
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetLeftSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetLeftSolidPixel(short width, short height, short min, short max)
   {
      return short.MaxValue;
   }

   /// &lt;summary&gt;
   /// See &lt;see cref="TileShape.GetRightSolidPixel"/&gt;.
   /// &lt;/summary&gt;
   public override short GetRightSolidPixel(short width, short height, short min, short max)
   {
      return short.MinValue;
   }
}

</Text>
  </SourceCode>
  <SourceCode Name="app.config" IsCustomObject="false">
    <Text>&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;configuration&gt;
  &lt;!-- The following line is not necessary if you use the file named libfmodex.so,
       and it causes errors in .NET environments, so it's commented out. --&gt;
  &lt;!-- &lt;dllmap os="linux" dll="fmodex" target="./libfmodex-4.22.01.so"/&gt; --&gt;
&lt;/configuration&gt;</Text>
  </SourceCode>
  <SourceCode Name="Template.html" IsCustomObject="false">
    <Text>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="utf-8" /&gt;
&lt;meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/&gt;
&lt;title&gt;&lt;!--#echo var="Title" --&gt;&lt;/title&gt;
&lt;style&gt;
   .unselectable {
      user-select:none;
      -moz-user-select:-moz-none;
      -khtml-user-select:none;
      -webkit-user-select:none;
      -o-user-select:none;
   }
   canvas { display: block }
   &lt;!--#echo var="BodyCSS" --&gt;
&lt;/style&gt;

&lt;!--#echo var="Scripts" --&gt;
&lt;/head&gt;
&lt;body class="unselectable" unselectable="on"&gt;
&lt;canvas id="gameView" width="&lt;!--#echo var="Width" --&gt;" height="&lt;!--#echo var="Height" --&gt;" unselectable="on" class="unselectable"&gt;
   Your browser does not support HTML5 canvases.
&lt;/canvas&gt;
&lt;!--#echo var="Images" --&gt;
&lt;!--#echo var="MapButtons" --&gt;
&lt;iframe name="quizFrame" id="quizFrame" src="initial.html"&gt;&lt;/iframe&gt;
&lt;/body&gt;
&lt;/html&gt;
</Text>
  </SourceCode>
  <SourceCode Name="Main.js" IsCustomObject="false">
    <Text>var gameViewContext;
var mouseInfo = {x: 0,y:0,pressed:false,oldX:0,oldY:0,clicked:false};
var currentMap;
var overlayMap;
var mainLoop = {interval:null, milliseconds:20};
function startGame() {
   initGraphicSheets();
   initFramesets();
   initTilesets();
   initTileCategories();
   firstMap();
   var gameView = document.getElementById('gameView');

   gameView.onmousedown = function(e) {
      e = e || window.event;
      var rect = gameView.getBoundingClientRect();
      mouseInfo.x = e.clientX - rect.left;
      mouseInfo.y = e.clientY - rect.top;
      mouseInfo.pressed = true;
      mouseInfo.clicked = true;
   };

   gameView.onmousemove = function(e) {
      e = e || window.event;
      var rect = gameView.getBoundingClientRect();
      mouseInfo.x = e.clientX - rect.left;
      mouseInfo.y = e.clientY - rect.top;
   };

   gameView.onmouseup = function(e) {
      mouseInfo.pressed = false;
   };

   gameView.onmouseout = function(e) {
      mouseInfo.pressed = false;
   };

   gameView.ontouchstart = function(e) {
      e = e || window.event;
      e.preventDefault();
      var rect = gameView.getBoundingClientRect();
      var touch = e.touches.item(0);
      mouseInfo.x = touch.clientX - rect.left;
      mouseInfo.y = touch.clientY - rect.top;
      mouseInfo.pressed = true;
      mouseInfo.clicked = true;
   };

   gameView.ontouchmove = function(e) {
      e = e || window.event;
      e.preventDefault();
      var touch = e.touches.item(0);
      var rect = gameView.getBoundingClientRect();
      mouseInfo.x = touch.clientX - rect.left;
      mouseInfo.y = touch.clientY - rect.top;
      mouseInfo.pressed = true;
   };
   
   gameView.ontouchend = function(e) {
      e = e || window.event;
      e.preventDefault();
      mouseInfo.pressed = false;
   }

   gameViewContext = gameView.getContext('2d');
   mainLoop.interval = setInterval("pulse()", mainLoop.milliseconds);
}

function pulse() {
   if (currentMap != null)
   {
      currentMap.draw(gameViewContext);
      currentMap.executeRules();
   }
   GeneralRules.drawMessages();
   if (overlayMap != null)
   {
      overlayMap.draw(gameViewContext);
      overlayMap.executeRules();
   }
   cycleMouseInfo();
}

function cycleMouseInfo() {
   mouseInfo.oldX = mouseInfo.x;
   mouseInfo.oldY = mouseInfo.y;
   mouseInfo.clicked = false;
}

function resizeView() {
   viewWidth = window.innerWidth;
   viewHeight = window.innerHeight;
   var gameView = document.getElementById('gameView');
   gameView.width = viewWidth;
   gameView.height = viewHeight;
   if ((gameViewContext != null) &amp;&amp; (currentMap != null))
      currentMap.draw(gameViewContext);
}

function truncate(n) {
   return n | 0;
}
</Text>
  </SourceCode>
  <SourceCode Name="Frame.js" IsCustomObject="false">
    <Text>function Frameset(name, frames) {
   this.name = name;
   this.frames = frames;
}
function XFrame(m11, m12, m21, m22, dx, dy, graphicSheet, imageSource, cellIndex) {
   this.m11 = m11;
   this.m12 = m12;
   this.m21 = m21;
   this.m22 = m22;
   this.dx = dx;
   this.dy = dy;
   this.graphicSheet = graphicSheet;
   this.imageSource = imageSource;
   this.cellIndex = cellIndex;
}
function Frame(graphicSheet, imageSource, cellIndex) {
   this.graphicSheet = graphicSheet;
   this.imageSource = imageSource;
   this.cellIndex = cellIndex;
}
Frame.prototype.draw = function(ctx, x, y) {
   if (this.imageSource == null) return;
   ctx.drawImage(this.imageSource, (this.cellIndex % this.graphicSheet.columns) * this.graphicSheet.cellWidth,
   Math.floor(this.cellIndex / this.graphicSheet.columns) * this.graphicSheet.cellHeight,
   this.graphicSheet.cellWidth, this.graphicSheet.cellHeight, x, y, this.graphicSheet.cellWidth, this.graphicSheet.cellHeight);
};
XFrame.prototype.draw = function(ctx, x, y) {
   ctx.save();
   ctx.transform(this.m11, this.m12, this.m21, this.m22, this.dx+x, this.dy+y);
   ctx.drawImage(this.imageSource, (this.cellIndex % this.graphicSheet.columns) * this.graphicSheet.cellWidth,
      Math.floor(this.cellIndex / this.graphicSheet.columns) * this.graphicSheet.cellHeight,
      this.graphicSheet.cellWidth, this.graphicSheet.cellHeight, 0, 0, this.graphicSheet.cellWidth, this.graphicSheet.cellHeight);
   ctx.restore();
};
function ModulateCelColor(target, x, y, width, height, r, g, b, a) {
   var cel;
   try { cel = target.getImageData(x, y, width, height); }
   catch(e) {
      document.write('Failed to process images. This may occur when running from local files; see &lt;a href="http://stackoverflow.com/questions/2704929/uncaught-error-security-err-dom-exception-18"&gt;see details&lt;/a&gt;');
      throw(e);
   }
   var celData = cel.data;
   for (yi = 0; yi &lt; height; yi++) {
      for (xi = 0; xi &lt; width; xi++) {
         var byteIdx = (yi * width + xi) * 4;
         celData[byteIdx] = Math.floor(celData[byteIdx] * r / 255);
         celData[byteIdx+1] = Math.floor(celData[byteIdx+1] * g / 255);
         celData[byteIdx+2] = Math.floor(celData[byteIdx+2] * b / 255);
         celData[byteIdx+3] = Math.floor(celData[byteIdx+3] * a / 255);
      }
   }
   target.putImageData(cel, x, y);
}</Text>
  </SourceCode>
  <SourceCode Name="KeyboardState.js" IsCustomObject="false">
    <Text>var keyboardState;
keyboardState = new Object();
keyboardState.key= { None:0, Enter:13, Shift:16, Ctrl:17, Alt: 18, Pause:19, Escape:27, Space:32, PageUp:33, PageDown:34,
   End:35, Home:36, Left:37, Up:38, Right:39, Down:40, Insert:45, Delete:46,
   Digit0:48, Digit1:49, Digit2:50, Digit3:51, Digit4:52, Digit5:53, Digit6:54, Digit7:55, Digit8:56, Digit9:57,
   A:65, B:66, C:67, D:68, E:69, F:70, G:71, H:72, I:73, J:74, K:75, L:76, M:77, N:78, O:79,
   P: 80, Q:81, R:82, S:83, T:84, U:85, V:86, W:87, X:88, Y:89, Z:90,
   LWindow:91, RWindow:92, ContextMenu:93,
   NumPad0:96, NumPad1:97, NumPad2:98, NumPad3:99, NumPad4:100, NumPad5:101, NumPad6:102, NumPad7:103, NumPad8:104, NumPad9:105,
   NumPadMultiply:106, NumPadAdd:107, NumPadEnter:108, NumPadSubtract:109, NumPadDecimal:110, NumPadDivide:111,
   F1:112, F2:113, F3:114, F4:115, F5:116, F6:117, F7:118, F8:119, F9:120, F10:121, F11:122, F12:123,
   NumLock:144, ScrollLock:145,
   SemiColon:186, Equal:187, Comma:188, Minus:189, Period:190, Slash:191, Backtick:192,
   LeftBracket:219, BackSlash:220, RightBracket:221, Quote:222 };

keyboardState.keyState = new Array();
keyboardState.handleKeyDown = function(e) {
   e = e || window.event;
   keyboardState.keyState[e.keyCode] = true;
};

keyboardState.handleKeyUp = function(e) {
   e = e || window.event;
   keyboardState.keyState[e.keyCode] = false;
};

keyboardState.isKeyPressed = function(key) { return keyboardState.keyState[key]; };

document.onkeydown = keyboardState.handleKeyDown;
document.onkeyup = keyboardState.handleKeyUp;
</Text>
  </SourceCode>
  <SourceCode Name="Player.js" IsCustomObject="false">
    <Text>function KeyboardPlayer(defaultSet) {
   switch(defaultSet)
   {
      case 0:
         this.initializeKeys(
            keyboardState.key.Up,     // Up
            keyboardState.key.Left,   // Left
            keyboardState.key.Right,  // Right
            keyboardState.key.Down,   // Down
            keyboardState.key.Ctrl,   // Button 1
            keyboardState.key.Space,  // Button 2
            keyboardState.key.Enter,  // Button 3
            keyboardState.key.Shift); // Button 4
         break;
      case 1:
         this.initializeKeys(
            keyboardState.key.W,     // Up
            keyboardState.key.A,     // Left
            keyboardState.key.D,     // Right
            keyboardState.key.S,     // Down
            keyboardState.key.Z,     // Button 1
            keyboardState.key.C,     // Button 2
            keyboardState.key.Q,     // Button 3
            keyboardState.key.E);    // Button 4
         break;
      case 2:
         this.initializeKeys(
            keyboardState.key.NumPad8,      // Up
            keyboardState.key.NumPad4,      // Right
            keyboardState.key.NumPad6,      // Left
            keyboardState.key.NumPad2,      // Down
            keyboardState.key.NumPad5,      // Button 1
            keyboardState.key.NumPad0,      // Button 2
            keyboardState.key.NumPadEnter,  // Button 3
            keyboardState.key.NumPad7);     // Button 4
         break;
      default:
         this.initializeKeys(
            keyboardState.key.I,            // Up
            keyboardState.key.J,            // Right
            keyboardState.key.L,            // Left
            keyboardState.key.K,            // Down
            keyboardState.key.U,            // Button 1
            keyboardState.key.O,            // Button 2
            keyboardState.key.M,            // Button 3
            keyboardState.key.Comma);       // Button 4
         break;
   }
}

KeyboardPlayer.prototype.initializeKeys = function(up, left, right, down, button1, button2, button3, button4) {
   this.upKey = up;
   this.leftKey = left;
   this.rightKey = right;
   this.downKey = down;
   this.button1Key = button1;
   this.button2Key = button2;
   this.button3Key = button3;
   this.button4Key = button4;
};

KeyboardPlayer.prototype.up = function() { return keyboardState.keyState[this.upKey]; };
KeyboardPlayer.prototype.left = function() { return keyboardState.keyState[this.leftKey]; };
KeyboardPlayer.prototype.right = function() { return keyboardState.keyState[this.rightKey]; };
KeyboardPlayer.prototype.down = function() { return keyboardState.keyState[this.downKey]; };
KeyboardPlayer.prototype.button1 = function() { return keyboardState.keyState[this.button1Key]; };
KeyboardPlayer.prototype.button2 = function() { return keyboardState.keyState[this.button2Key]; };
KeyboardPlayer.prototype.button3 = function() { return keyboardState.keyState[this.button3Key]; };
KeyboardPlayer.prototype.button4 = function() { return keyboardState.keyState[this.button4Key]; };

var players = [ new KeyboardPlayer(0), new KeyboardPlayer(1), new KeyboardPlayer(2), new KeyboardPlayer(3) ];</Text>
  </SourceCode>
  <SourceCode Name="GeneralRules.js" IsCustomObject="false">
    <Text>function GeneralRules() {
}

GeneralRules.buttonSpecifier = {first:1, second:2, third:4, fourth:8, freezeInputs:16};
GeneralRules.maxMessages = 4;
GeneralRules.messageBackground = "rgba(64, 0, 255, .5)";
GeneralRules.currentPlayer = 0;
GeneralRules.activeMessages = [];
GeneralRules.messageMargin = 6;

GeneralRules.prototype.saveGame = function(slot, temporary) {
   if (GeneralRules.saveUnit == null) {
      this.includeInSaveUnit("AllMaps");
      this.includeInSaveUnit("AllCounters");
      this.includeInSaveUnit("WhichMapIsCurrent");
      this.includeInSaveUnit("WhichMapIsOverlaid");
   }
   if (GeneralRules.saveUnit.allMaps) {
      GeneralRules.saveUnit.maps = {};
      for(var key in maps) {
         GeneralRules.saveUnit.maps[key] = maps[key].getState();
      }
   } else if (GeneralRules.saveUnit.maps !== undefined) {
      for(var key in GeneralRules.saveUnit.maps) {
         GeneralRules.saveUnit.maps[key] = maps[key].getState();
      }
   }
   if (GeneralRules.saveUnit.counters != null) {
      for(var key in GeneralRules.saveUnit.counters) {
         GeneralRules.saveUnit.counters[key] = counters[key];
      }
   }
   if (GeneralRules.saveUnit.currentMap !== undefined)
      GeneralRules.saveUnit.currentMap = getMapName(currentMap);
   if (GeneralRules.saveUnit.overlayMap !== undefined)
      GeneralRules.saveUnit.overlayMap = getMapName(overlayMap);
   if (temporary)
      GeneralRules["save" + slot] = JSON.stringify(GeneralRules.saveUnit);
   else
      localStorage.setItem("save" + slot, JSON.stringify(GeneralRules.saveUnit));
   GeneralRules.saveUnit = null;
};

GeneralRules.prototype.loadGame = function(slot, temporary) {
   var data;
   if (temporary)
      data = GeneralRules["save" + slot];
   else
      data = localStorage.getItem("save" + slot);
   if (data == null) return;
   data = JSON.parse(data);
   for(var key in data.maps)
   {
      if (maps[key] == null)
         mapInitializers[key]();
      maps[key].setState(data.maps[key]);
   }
   if (data.allMaps)
   {
      for(var key in maps)
         if (data.maps[key] == null)
            delete maps[key];
   }
   if (data.counters != null) {
      for(var key in data.counters)
         counters[key].value = data.counters[key].value; // Tile definitions are linked to the original counter instance
   }
   if (data.currentMap !== undefined) {
      if (maps[data.currentMap] === undefined)
         mapInitializers[data.currentMap]();
      currentMap = maps[data.currentMap];
   }
   if (data.overlayMap !== undefined)
      this.setOverlay(data.overlayMap);
};

GeneralRules.prototype.deleteSave = function(slot, temporary) {
   if (temporary)
      delete GeneralRules["save" + slot];
   else
      localStorage.removeItem("save" + slot);
}

GeneralRules.prototype.saveExists = function(slot, temporary) {
   if (temporary)
      return GeneralRules["save" + slot] != null;
   else
      return localStorage.getItem("save" + slot) != null;
};

GeneralRules.prototype.includeMapInSaveUnit = function(mapName) {
   if (GeneralRules.saveUnit == null)
      GeneralRules.saveUnit = {};
   if (GeneralRules.saveUnit.maps == null)
      GeneralRules.saveUnit.maps = {};
   GeneralRules.saveUnit.maps[mapName] = null;
};

GeneralRules.prototype.excludeMapFromSaveUnit = function(mapName) {
   if ((GeneralRules.saveUnit == null) || (GeneralRules.saveUnit.maps == null))
      return;
   if (GeneralRules.saveUnit.maps[mapName] !== undefined)
      delete GeneralRules.saveUnit.maps[mapName];
}

GeneralRules.prototype.includeInSaveUnit = function(include) {
   if (GeneralRules.saveUnit == null)
      GeneralRules.saveUnit = {};

   switch (include) {
      case "AllMaps":
         GeneralRules.saveUnit.allMaps = true;
         break;
      case "AllCounters":
         GeneralRules.saveUnit.counters = {};
         for(key in counters)
            GeneralRules.saveUnit.counters[key] = null;
         break;
      case "WhichMapIsCurrent":
         GeneralRules.saveUnit.currentMap = null;
         break;
      case "WhichMapIsOverlaid":
         GeneralRules.saveUnit.overlayMap = null;
         break;
      case "PlayerOptions":
         // Not implemented
         break;
   }
};

GeneralRules.prototype.includeCounterInSaveUnit = function(counter) {
   if (GeneralRules.saveUnit == null)
      GeneralRules.saveUnit = {};
   if (GeneralTules.saveUnit.counters == null)
      GeneralRules.saveUnit.counters = {};
   GeneralRules.saveUnit.counters[key] = null;
}

GeneralRules.prototype.excludeCounterFromSaveUnit = function(counter) {
   if ((GeneralRules.saveUnit == null) || (GeneralRules.saveUnit.counters == null))
      return;
   for (key in GeneralRules.saveUnit.counters) {
      if (counters[key] === counter)
         delete GeneralRules.saveUnit.counters[key];
   }
};

GeneralRules.prototype.changeCounter = function(counter, operation) {
   switch (operation) {
      case "IncrementAndStop":
         if (counter.value &lt; counter.max)
            counter.value += 1;
         else
            return true;
         return false;
      case "DecrementAndStop":
         if (counter.value &gt; counter.min)
            counter.value -= 1;
         else
            return true;
         return false;
      case "IncrementAndLoop":
         if (counter.value &lt; counter.max)
         {
            counter.value += 1;
            return false;
         }
         counter.value = counter.min;
         return true;
      case "DecrementAndLoop":
         if (counter.value &gt; counter.min) {
            counter.value -= 1;
            return false;
         }
         counter.value = counter.max;
         return true;
      case "SetToMinimum":
         if (counter.value == counter.min)
            return true;
         counter.value = counter.min;
         return false;
      case "SetToMaximum":
         if (counter.value == counter.max)
            return true;
         counter.value = counter.max;
         return false;
   }
   return false;
};

GeneralRules.prototype.setMapFlag = function(flagIndex, value) {
   if (this.layer.map.mapFlags == null)
      this.layer.map.mapFlags = 0;
   if (value)
      this.layer.map.mapFlags |= 1 &lt;&lt; flagIndex;
   else
      this.layer.map.mapFlags &amp;= ~(1 &lt;&lt; flagIndex);
};

GeneralRules.prototype.isMapFlagOn = function(flagIndex) {
   if (this.layer.map.mapFlags == null)
      this.layer.map.mapFlags = 0;
   return ((this.layer.map.mapFlags &amp; (1 &lt;&lt; flagIndex)) != 0);
};

GeneralRules.prototype.setTargetMapFlag = function(mapName, flagIndex, value) {
   if (value)
      maps[mapName].mapFlags |= 1 &lt;&lt; flagIndex;
   else
      maps[mapName].mapFlags &amp;= ~(1 &lt;&lt; flagIndex);
}

GeneralRules.prototype.clearOverlay = function() {
   overlayMap = null;
};

GeneralRules.prototype.clearAllMessages = function() {
   GeneralRules.activeMessages.length = 0;
};

GeneralRules.prototype.canReturnToPreviousMap = function() {
   return currentMap.cameFromMapName != null;
};

GeneralRules.prototype.returnToPreviousMap = function(unloadCurrent) {
   var source = currentMap.cameFromMapName;
   if (source == null)
      source = getMapName(currentMap);
   if (unloadCurrent)
      for(var key in maps)
         if (maps[key] == currentMap)
            delete maps[key];
   if (maps[source] === undefined)
      mapInitializers[source]();
   currentMap = maps[source];
};

GeneralRules.prototype.switchToMap = function(mapName, unloadCurrent) {
   var oldMapName = null;
   if (currentMap != null) {
      for(key in maps) {
         if (maps[key] === currentMap) {
            if (unloadCurrent)
               delete maps[key];
            oldMapName = key;
         }
      }
   }
   if (maps[mapName] === undefined)
      mapInitializers[mapName]();
   currentMap = maps[mapName];
   currentMap.cameFromMapName = oldMapName;
};

GeneralRules.prototype.isKeyPressed = function(key) {
   return keyboardState.isKeyPressed(key);
};

GeneralRules.prototype.setOverlay = function(mapName) {
   if (maps[mapName] === undefined)
      mapInitializers[mapName]();
   overlayMap = maps[mapName];
};

GeneralRules.prototype.unloadBackgroundMaps = function() {
   for(key in maps) {
      if ((maps[key] !== currentMap) &amp;&amp; (maps[key] !== overlayMap))
         delete maps[key];
   }
};

GeneralRules.prototype.unloadMap = function(mapName) {
   delete maps[mapName];
}

GeneralRules.prototype.setMessageFont = function(tileset) {
   GeneralRules.fontTileset = tileset;
};

GeneralRules.colorNameToRgba = function(color, alpha) {
    var colors = {"aliceblue":"#f0f8ff","antiquewhite":"#faebd7","aqua":"#00ffff","aquamarine":"#7fffd4","azure":"#f0ffff",
    "beige":"#f5f5dc","bisque":"#ffe4c4","black":"#000000","blanchedalmond":"#ffebcd","blue":"#0000ff","blueviolet":"#8a2be2","brown":"#a52a2a","burlywood":"#deb887",
    "cadetblue":"#5f9ea0","chartreuse":"#7fff00","chocolate":"#d2691e","coral":"#ff7f50","cornflowerblue":"#6495ed","cornsilk":"#fff8dc","crimson":"#dc143c","cyan":"#00ffff",
    "darkblue":"#00008b","darkcyan":"#008b8b","darkgoldenrod":"#b8860b","darkgray":"#a9a9a9","darkgreen":"#006400","darkkhaki":"#bdb76b","darkmagenta":"#8b008b","darkolivegreen":"#556b2f",
    "darkorange":"#ff8c00","darkorchid":"#9932cc","darkred":"#8b0000","darksalmon":"#e9967a","darkseagreen":"#8fbc8f","darkslateblue":"#483d8b","darkslategray":"#2f4f4f","darkturquoise":"#00ced1",
    "darkviolet":"#9400d3","deeppink":"#ff1493","deepskyblue":"#00bfff","dimgray":"#696969","dodgerblue":"#1e90ff",
    "firebrick":"#b22222","floralwhite":"#fffaf0","forestgreen":"#228b22","fuchsia":"#ff00ff",
    "gainsboro":"#dcdcdc","ghostwhite":"#f8f8ff","gold":"#ffd700","goldenrod":"#daa520","gray":"#808080","green":"#008000","greenyellow":"#adff2f",
    "honeydew":"#f0fff0","hotpink":"#ff69b4",
    "indianred ":"#cd5c5c","indigo ":"#4b0082","ivory":"#fffff0","khaki":"#f0e68c",
    "lavender":"#e6e6fa","lavenderblush":"#fff0f5","lawngreen":"#7cfc00","lemonchiffon":"#fffacd","lightblue":"#add8e6","lightcoral":"#f08080","lightcyan":"#e0ffff","lightgoldenrodyellow":"#fafad2",
    "lightgrey":"#d3d3d3","lightgreen":"#90ee90","lightpink":"#ffb6c1","lightsalmon":"#ffa07a","lightseagreen":"#20b2aa","lightskyblue":"#87cefa","lightslategray":"#778899","lightsteelblue":"#b0c4de",
    "lightyellow":"#ffffe0","lime":"#00ff00","limegreen":"#32cd32","linen":"#faf0e6",
    "magenta":"#ff00ff","maroon":"#800000","mediumaquamarine":"#66cdaa","mediumblue":"#0000cd","mediumorchid":"#ba55d3","mediumpurple":"#9370d8","mediumseagreen":"#3cb371","mediumslateblue":"#7b68ee",
    "mediumspringgreen":"#00fa9a","mediumturquoise":"#48d1cc","mediumvioletred":"#c71585","midnightblue":"#191970","mintcream":"#f5fffa","mistyrose":"#ffe4e1","moccasin":"#ffe4b5",
    "navajowhite":"#ffdead","navy":"#000080",
    "oldlace":"#fdf5e6","olive":"#808000","olivedrab":"#6b8e23","orange":"#ffa500","orangered":"#ff4500","orchid":"#da70d6",
    "palegoldenrod":"#eee8aa","palegreen":"#98fb98","paleturquoise":"#afeeee","palevioletred":"#d87093","papayawhip":"#ffefd5","peachpuff":"#ffdab9","peru":"#cd853f","pink":"#ffc0cb","plum":"#dda0dd","powderblue":"#b0e0e6","purple":"#800080",
    "red":"#ff0000","rosybrown":"#bc8f8f","royalblue":"#4169e1",
    "saddlebrown":"#8b4513","salmon":"#fa8072","sandybrown":"#f4a460","seagreen":"#2e8b57","seashell":"#fff5ee","sienna":"#a0522d","silver":"#c0c0c0","skyblue":"#87ceeb","slateblue":"#6a5acd","slategray":"#708090","snow":"#fffafa","springgreen":"#00ff7f","steelblue":"#4682b4",
    "tan":"#d2b48c","teal":"#008080","thistle":"#d8bfd8","tomato":"#ff6347","turquoise":"#40e0d0",
    "violet":"#ee82ee",
    "wheat":"#f5deb3","white":"#ffffff","whitesmoke":"#f5f5f5",
    "yellow":"#ffff00","yellowgreen":"#9acd32"};

    return "rgba(" + parseInt(colors[color].substr(1,2), 16) + "," + parseInt(colors[color].substr(3,2), 16) + "," + parseInt(colors[color].substr(5,2), 16) + "," + alpha/255 + ")";
};

GeneralRules.prototype.setMessageBackground = function(color, alpha) {
   GeneralRules.messageBackground = GeneralRules.colorNameToRgba(color, alpha);
};

GeneralRules.prototype.setMessageDismissal = function(dismissButton, player) {
   GeneralRules.dismissButton = dismissButton;
   GeneralRules.currentPlayer = player - 1;
};

GeneralRules.prototype.showMessage = function(message) {
   if (GeneralRules.activeMessages.length &gt;= GeneralRules.maxMessages)
      throw "Maximum number of displayed messages exceeded";
   else
      GeneralRules.activeMessages.push(this.createMessage(message));
};

function MessageLayer(tileset, map, columns, rows, offsetX, offsetY, background, player, dismissButton) {
   MapLayer.call(this, map, tileset, columns, rows, 0, 0, offsetX, offsetY, 0, 0, 0, null);
   this.background = background;
   this.dismissButton = dismissButton;
   this.player = player;
}

MessageLayer.prototype = new MapLayer();
MessageLayer.prototype.constructor = MessageLayer;

GeneralRules.playerPressButton = function(playerNumber) {
   for (var i = 0; i &lt; GeneralRules.activeMessages.length; i++) {
      var msg = GeneralRules.activeMessages[i];
      if (msg.player == playerNumber - 1) {
         var player = players[playerNumber - 1];
         var dismissPressed = false;
         if ((msg.dismissButton &amp; GeneralRules.buttonSpecifier.first) &amp;&amp; player.button1())
            dismissPressed = true;
         if ((msg.dismissButton &amp; GeneralRules.buttonSpecifier.second) &amp;&amp; player.button2())
            dismissPressed = true;
         if ((msg.dismissButton &amp; GeneralRules.buttonSpecifier.third) &amp;&amp; player.button3())
            dismissPressed = true;
         if ((msg.dismissButton &amp; GeneralRules.buttonSpecifier.fourth) &amp;&amp; player.button4())
            dismissPressed = true;

         // dismissPhase[x]:
         // 0 = No frames have passed yet
         // 1 = Frames have passed and the dismiss button was initially pressed
         // 2 = Frames have passed and the dismiss button is not pressed
         // 3 = Dismiss button was not pressed, but now it is.

         if (GeneralRules.dismissPhase == null)
            GeneralRules.dismissPhase = [0,0,0,0];

         if (dismissPressed) {
            if ((GeneralRules.dismissPhase[msg.player] == 0) || (GeneralRules.dismissPhase[msg.player] == 2))
               GeneralRules.dismissPhase[msg.player]++;
         } else {
            if (GeneralRules.dismissPhase[msg.player] &lt; 2)
               GeneralRules.dismissPhase[msg.player] = 2;
            else if (GeneralRules.dismissPhase[msg.player] &gt; 2) {
               GeneralRules.dismissMessage(i);
               GeneralRules.dismissPhase[msg.player] = 0;
            }
         }

         if (msg.dismissButton &amp; GeneralRules.buttonSpecifier.freezeInputs) {
            return false;
         }
      }
   }
   return true;
};

GeneralRules.dismissMessage = function (messageIndex) {
   GeneralRules.activeMessages.splice(messageIndex, 1);
};

GeneralRules.prototype.createMessage = function(message) {
   if (GeneralRules.fontTileset == null) {
      var tilesetKey;
      for (tilesetKey in tilesets)
         break;
      GeneralRules.fontTileset = tilesets[tilesetKey];
   }

   var x = 0, y = 1;
   var maxWidth = 1;
   for (var charIdx = 0; charIdx &lt; message.length; charIdx++) {
      if (message[charIdx] == '\n') {
         x = 0;
         y++;
      } else if (message[charIdx] != '\r') {
         if (++x &gt; maxWidth)
            maxWidth = x;
      }
   }

   var messageSize = {width: maxWidth * GeneralRules.fontTileset.tileWidth, height: y * GeneralRules.fontTileset.tileHeight};
   var messageX = Math.floor((viewWidth - messageSize.width) / 2);
   var messageY = Math.floor((viewHeight - messageSize.height) / 2);

   var result = new MessageLayer(
      GeneralRules.fontTileset, this.layer.map, maxWidth, y, messageX, messageY,
      GeneralRules.messageBackground, GeneralRules.currentPlayer, GeneralRules.dismissButton);

   x = 0;
   y = 0;
   for (var charIdx = 0; charIdx &lt; message.length; charIdx ++) {
      if (message.charAt(charIdx) == '\n') {
         x = 0;
         y++;
      } else if (message.charAt(charIdx) != '\r') {
         result.setTile(x++, y, message.charCodeAt(charIdx));
      }
   }

   return result;
}

GeneralRules.drawMessage = function(msg) {
   var messageRect = {
      x: msg.currentX - GeneralRules.messageMargin,
      y: msg.currentY - GeneralRules.messageMargin,
      width: msg.virtualColumns * msg.tileset.tileWidth + GeneralRules.messageMargin * 2,
      height: msg.virtualRows * msg.tileset.tileHeight + GeneralRules.messageMargin * 2};
   gameViewContext.fillStyle = msg.background;
   gameViewContext.fillRect(messageRect.x, messageRect.y, messageRect.width, messageRect.height);
   gameViewContext.strokeStyle = "#ffffff";
   gameViewContext.lineWidth = 2;
   gameViewContext.strokeRect(messageRect.x, messageRect.y, messageRect.width, messageRect.height);
   msg.draw(gameViewContext);
};

GeneralRules.drawMessages = function() {
   for (var i = 0; i &lt; GeneralRules.activeMessages.length; i++) {
      var msg = GeneralRules.activeMessages[i];
      GeneralRules.drawMessage(msg);
   }
};

GeneralRules.prototype.limitFrameRate = function(fps) {
   if (fps == 0) {
      mainLoop.milliseconds = 0;
      if (mainLoop.interval != null)
         clearInterval(mainLoop.interval);
      mainLoop.interval = null;
      return;
   }

   var milliseconds = Math.ceil(1000 / fps);
   if (milliseconds != mainLoop.milliseconds) {
      if (mainLoop.interval != null)
         clearInterval(mainLoop.interval);
      mainLoop.milliseconds = milliseconds;
      mainLoop.interval = setInterval("pulse()", mainLoop.milliseconds);
   }
};

GeneralRules.prototype.setCategorySpriteState = function(category, spriteIndex, state) {
   category[spriteIndex].state = state;
};

GeneralRules.prototype.quitGame = function() {
   window.close();
};

GeneralRules.prototype.getRandomNumber = function(minimum, maximum) {
   return Math.floor(Math.random() * (maximum - minimum)) + minimum;
};

GeneralRules.prototype.dragMap = function () {
   if (mouseInfo.pressed &amp;&amp; !mouseInfo.clicked)
      currentMap.scroll(currentMap.scrollX + mouseInfo.x - mouseInfo.oldX, currentMap.scrollY + mouseInfo.y - mouseInfo.oldY);
};

GeneralRules.prototype.clicked = function() {
   return mouseInfo.clicked;
};</Text>
  </SourceCode>
  <SourceCode Name="Sprite.js" IsCustomObject="false">
    <Text>function SpriteState(solidWidth, solidHeight, frameSetName, bounds, frames) {
   this.solidWidth = solidWidth;
   this.solidHeight = solidHeight;
   this.frameSetName = frameSetName;
   this.bounds = bounds;
   this.frames = frames;
   this.totalDuration = frames ? frames[frames.length - 1].accumulatedDuration : 0;
}

function Sprite(layer, x, y, dx, dy, state, frame, active, priority, solidity) {
   this.layer = layer;
   this.x = x;
   this.y = y;
   this.dx = dx;
   this.dy = dy;
   this.state = state;
   this.frame = frame;
   this.isActive = active;
   this.priority = priority;
   this.solidity = solidity;
   this.ridingOn = null;
   this.localDX = null;
   this.inputs = 0;
   this.oldInputs = 0;
}

Sprite.prototype = new GeneralRules();
Sprite.prototype.constructor = Sprite;

Sprite.categorize = function(sprites) {
   var categories = {};
   for(var sprKey in sprites) {
      var spr = sprites[sprKey];
      if (spr.categories == null) continue;
      for(var sprCatKey in spr.categories) {
         var cat = spr.categories[sprCatKey];
         if (categories[cat] == null)
            categories[cat] = [spr];
         else
            categories[cat].push(spr);
      }
   }
   return categories;
}

Sprite.deserialize = function(layer,data) {
   var source = JSON.parse(data);
   return spriteDefinitions[source["~1"]].deserialize(layer, data);
}

Sprite.prototype.getCurFrames = function() {
   var curState = this.states[this.state];
   if (curState.frames == null) return null;
   for(var i = 0; i &lt; curState.frames.length; i++) {
      if((this.frame % curState.totalDuration) &lt; curState.frames[i].accumulatedDuration) return curState.frames[i].subFrames;
   }
   return curState.frames[curState.frames.length - 1].subFrames;
};

Sprite.prototype.getSolidWidth = function() {
   return this.states[this.state].solidWidth;
};

Sprite.prototype.getSolidHeight = function() {
   return this.states[this.state].solidHeight;
};

Sprite.prototype.reactToSolid = function() {
   if (this.solidity == null)
      return;
   var hit = false;
   var dyOrig = this.dy;
   var dxOrig = this.dx;

   var proposedPixelY2 = Math.ceil(this.y + this.dy);
   var pixelX = Math.floor(this.x);
   var pixelY = Math.floor(this.y);
   var solidWidth = this.getSolidWidth();
   var solidHeight = this.getSolidHeight();
   var proposedPixelX = Math.floor(this.x + this.dx);
   var proposedPixelY = Math.floor(this.y + this.dy);
   var solidPixelWidth = solidWidth + Math.ceil(this.x) - pixelX;
   if (this.dy &gt; 0)
   {
      var ground = this.layer.getTopSolidPixel(pixelX, pixelY + solidHeight, solidPixelWidth, proposedPixelY2 - pixelY, this.solidity);
      if (ground != MapLayer.noSolid)
      {
         this.dy = ground - solidHeight - this.y;
         hit = true;
      }
   }
   else if (this.dy &lt; 0)
   {
      var ceiling = this.layer.getBottomSolidPixel(pixelX, proposedPixelY, solidPixelWidth, pixelY - proposedPixelY, this.solidity);
      if (ceiling != MapLayer.noSolid)
      {
         this.dy = ceiling + 1 - this.y;
         hit = true;
      }
   }

   proposedPixelY = Math.floor(this.y + this.dy);

   if (this.dx &gt; 0)
   {
      var proposedPixelX2 = Math.ceil(this.x + this.dx);
      var pixelX2 = Math.ceil(this.x);
      var rightwall = this.layer.getLeftSolidPixel(pixelX2 + solidWidth, proposedPixelY, proposedPixelX2 - pixelX2, solidHeight, this.solidity);
      var hitWall = false;
      if (rightwall != MapLayer.noSolid)
      {
         var maxSlopeProposedY = Math.floor(this.y + this.dy - this.dx);
         var slopedFloor = this.layer.getTopSolidPixel(pixelX2 + solidWidth, maxSlopeProposedY + solidHeight, proposedPixelX2 - pixelX2, proposedPixelY - maxSlopeProposedY, this.solidity);
         if (slopedFloor != MapLayer.noSolid)
         {
            var ceiling = this.layer.getBottomSolidPixel(pixelX2, slopedFloor - solidHeight, solidWidth, proposedPixelY + solidHeight - slopedFloor, this.solidity);
            if ((ceiling == MapLayer.noSolid) &amp;&amp; (this.ridingOn == null))
            {
               var rightwall2 = this.layer.getLeftSolidPixel(pixelX2 + solidWidth, slopedFloor - solidHeight, proposedPixelX2 - pixelX2, solidHeight, this.solidity);
               if (rightwall2 == MapLayer.noSolid)
                  this.dy = dyOrig = slopedFloor - solidHeight - 1 - this.y;
               else
                  hitWall = true;
            }
            else
               hitWall = true;
         }
         else
         {
            maxSlopeProposedY = Math.floor(this.y + this.dy + this.dx);
            var slopedCeiling = this.layer.getBottomSolidPixel(pixelX2 + solidWidth, proposedPixelY, proposedPixelX2 - pixelX2, maxSlopeProposedY - proposedPixelY, this.solidity);
            if (slopedCeiling != MapLayer.noSolid)
            {
               slopedCeiling++;
               var floor = this.layer.getTopSolidPixel(pixelX2, proposedPixelY + solidHeight, solidWidth, slopedCeiling - proposedPixelY, this.solidity);
               if ((floor == MapLayer.noSolid) &amp;&amp; (this.ridingOn == null))
               {
                  var rightwall2 = this.layer.getLeftSolidPixel(pixelX2 + solidWidth, slopedCeiling, proposedPixelX2 - pixelX2, solidHeight, this.solidity);
                  if (rightwall2 == MapLayer.noSolid)
                     this.dy = dyOrig = slopedCeiling - this.y;
                  else
                     hitWall = true;
               }
               else
                  hitWall = true;
            }
            else
               hitWall = true;
         }
         if (hitWall)
         {
            this.dx = rightwall - solidWidth - this.x;
         }
         hit = true;
      }
   }
   else if (this.dx &lt; 0)
   {
      var leftwall = this.layer.getRightSolidPixel(proposedPixelX, proposedPixelY, pixelX - proposedPixelX, solidHeight, this.solidity);
      var hitWall = false;
      if (leftwall != MapLayer.noSolid)
      {
         var maxSlopeProposedY = Math.floor(this.y + this.dy + this.dx);
         var slopedFloor = this.layer.getTopSolidPixel(proposedPixelX, maxSlopeProposedY + solidHeight, pixelX - proposedPixelX, proposedPixelY - maxSlopeProposedY, this.solidity);
         if (slopedFloor != MapLayer.noSolid)
         {
            var ceiling = this.layer.getBottomSolidPixel(pixelX, slopedFloor - solidHeight, solidWidth, proposedPixelY + solidHeight - slopedFloor, this.solidity);
            if ((ceiling == MapLayer.noSolid) &amp;&amp; (this.ridingOn == null))
            {
               var leftwall2 = this.layer.getRightSolidPixel(proposedPixelX, slopedFloor - solidHeight, pixelX - proposedPixelX, solidHeight, this.solidity);
               if (leftwall2 == MapLayer.noSolid)
                  this.dy = dyOrig = slopedFloor - solidHeight - 1 - this.y;
               else
                  hitWall = true;
            }
            else
               hitWall = true;
         }
         else
         {
            maxSlopeProposedY = Math.floor(this.y + this.dy - this.dx);
            var slopedCeiling = this.layer.getBottomSolidPixel(proposedPixelX, proposedPixelY, pixelX - proposedPixelX, maxSlopeProposedY - proposedPixelY, this.solidity);
            if (slopedCeiling != MapLayer.noSolid)
            {
               slopedCeiling++;
               var floor = this.layer.getTopSolidPixel(pixelX, proposedPixelY + solidHeight, solidWidth, slopedCeiling - proposedPixelY, this.solidity);
               if ((floor == MapLayer.noSolid) &amp;&amp; (this.ridingOn == null))
               {
                  var leftwall2 = this.layer.getRightSolidPixel(proposedPixelX, slopedCeiling, pixelX - proposedPixelX, solidHeight, this.solidity);
                  if (leftwall2 == MapLayer.noSolid)
                     this.dy = dyOrig = slopedCeiling - this.y;
                  else
                     hitWall = true;
               }
               else
                  hitWall = true;
            }
            else
               hitWall = true;
         }
         if (hitWall)
         {
            // Do integer arithmetic before double otherwise strange rounding seems to happen
            this.dx = leftwall + 1 - this.x;
         }
         hit = true;
      }
   }

   this.dy = dyOrig;
   proposedPixelX = Math.floor(this.x + this.dx);
   proposedPixelY = Math.floor(this.y + this.dy);
   var proposedSolidPixelWidth = solidWidth + Math.ceil(this.x + this.dx) - proposedPixelX;
   if (this.dy &gt; 0)
   {
      proposedPixelY2 = Math.ceil(this.y + this.dy);
      var ground = this.layer.getTopSolidPixel(proposedPixelX, pixelY + solidHeight, proposedSolidPixelWidth, proposedPixelY2 - pixelY, this.solidity);
      if (ground != MapLayer.noSolid)
      {
         this.dy = ground - solidHeight - this.y;
         hit = true;
      }
   }
   else if (this.dy &lt; 0)
   {
      var ceiling = this.layer.getBottomSolidPixel(proposedPixelX, proposedPixelY, proposedSolidPixelWidth, pixelY - proposedPixelY, this.solidity);
      if (ceiling != MapLayer.noSolid)
      {
         this.dy = ceiling + 1 - this.y;
         hit = true;
      }
   }

   if (hit &amp;&amp; (this.localDX != null))
      this.localDX += this.dx - dxOrig;

   return hit;
};

Sprite.inputBits = { up:1, right:2, down:4, left:8, button1:16, button2:32, button3:64, button4:128 };
Sprite.prototype.mapPlayerToInputs = function(playerNum) {
   var p = players[playerNum - 1];
   this.oldInputs = this.inputs;
   this.inputs = 0;
   if (GeneralRules.playerPressButton(playerNum)) {
      if (p.up()) this.inputs |= Sprite.inputBits.up;
      if (p.left()) this.inputs |= Sprite.inputBits.left;
      if (p.right()) this.inputs |= Sprite.inputBits.right;
      if (p.down()) this.inputs |= Sprite.inputBits.down;
      if (p.button1()) this.inputs |= Sprite.inputBits.button1;
      if (p.button2()) this.inputs |= Sprite.inputBits.button2;
      if (p.button3()) this.inputs |= Sprite.inputBits.button3;
      if (p.button4()) this.inputs |= Sprite.inputBits.button4;
   }
};

Sprite.prototype.accelerateByInputs = function(acceleration, max, horizontalOnly) {
   if (!horizontalOnly) {
      if (0 != (this.inputs &amp; Sprite.inputBits.up))
         this.dy -= acceleration / 10;
      if (this.dy &lt; -max)
         this.dy = -max;
      if (0 != (this.inputs &amp; Sprite.inputBits.down))
         this.dy += acceleration / 10;
      if (this.dy &gt; max)
         this.dy = max;
   }
   if (this.localDX == null) {
      if (0 != (this.inputs &amp; Sprite.inputBits.left))
         this.dx -= acceleration / 10;
      if (this.dx &lt; -max)
         this.dx = -max;
      if (0 != (this.inputs &amp; Sprite.inputBits.right))
         this.dx += acceleration / 10;
      if (this.dx &gt; max)
         this.dx = max;
   } else {
      if (0 != (this.inputs &amp; Sprite.inputBits.left))
         this.localDX -= acceleration / 10;
      if (this.localDX &lt; -max)
         this.localDX = -max;
      if (0 != (this.inputs &amp; Sprite.inputBits.right))
         this.localDX += acceleration / 10;
      if (this.localDX &gt; max)
         this.localDX = max;
   }
};

Sprite.prototype.isInState = function(firstState, lastState) {
   return (this.state &gt;= firstState) &amp;&amp; (this.state &lt;= lastState);
};

Sprite.prototype.moveByVelocity = function() {
   this.oldX = this.x;
   this.oldY = this.y;
   this.x += this.dx;
   this.y += this.dy;
};

Sprite.prototype.scrollSpriteIntoView = function(useScrollMargins) {
   this.layer.scrollSpriteIntoView(this, useScrollMargins);
};

Sprite.prototype.limitVelocity = function(maximum) {
   var useDX;
   if (this.localDX == null)
      useDX = this.dx;
   else
      useDX = this.localDX;
   var dist = useDX * useDX + this.dy * this.dy;
   if (dist &gt; maximum * maximum) {
      dist = Math.sqrt(dist);
      useDX = useDX * maximum / dist;
      this.dy = this.dy * maximum / dist;
      if (this.localDX == null)
         this.dx = useDX;
      else
         this.localDX = useDX;
   }
}

Sprite.prototype.isOnTile = function(category, relativePosition) {
   var rp = this.getRelativePosition(relativePosition);
   var tile = this.layer.getTile(Math.floor(rp.x / this.layer.tileset.tileWidth), Math.floor(rp.y / this.layer.tileset.tileHeight));
   return category.isTileMember(this.layer.tileset, tile);
}

Sprite.prototype.getRelativePosition = function(relativePosition) {
   var rp = {x:Math.floor(this.x),y:Math.floor(this.y)};

   switch (relativePosition) {
      case "TopCenter":
         rp.x = Math.floor(this.x + this.getSolidWidth() / 2);
         break;
      case "TopRight":
         rp.x = Math.floor(this.x) + this.getSolidWidth() - 1;
         break;
      case "LeftMiddle":
         rp.y = Math.floor(this.y + this.getSolidHeight() / 2);
         break;
      case "CenterMiddle":
         rp.x = Math.floor(this.x + this.getSolidWidth() / 2);
         rp.y = Math.floor(this.y + this.getSolidHeight() / 2);
         break;
      case "RightMiddle":
         rp.x = Math.floor(this.x) + this.getSolidWidth() - 1;
         rp.y = Math.floor(this.y + this.getSolidHeight() / 2);
         break;
      case "BottomLeft":
         rp.y = Math.floor(this.y + this.getSolidHeight() - 1);
         break;
      case "BottomCenter":
         rp.x = Math.floor(this.x + this.getSolidWidth() / 2);
         rp.y = Math.floor(this.y + this.getSolidHeight() - 1);
         break;
      case "BottomRight":
         rp.x = Math.floor(this.x) + this.getSolidWidth() - 1;
         rp.y = Math.floor(this.y + this.getSolidHeight() - 1);
         break;
   }
   return rp;
}

Sprite.prototype.blocked = function(direction) {
   var solidPixelWidth;
   var solidPixelHeight;
   switch (direction)
   {
      case "Up":
         solidPixelWidth = this.getSolidWidth() + Math.ceil(this.x) - Math.floor(this.x);
         return this.layer.getBottomSolidPixel(Math.floor(this.x), Math.floor(this.y) - 1, solidPixelWidth, 1, this.solidity) != MapLayer.noSolid;
      case "Right":
         solidPixelHeight = this.getSolidHeight() + Math.ceil(this.y) - Math.floor(this.y);
         return this.layer.getLeftSolidPixel(Math.floor(this.x) + this.getSolidWidth(), Math.floor(this.y), 1, solidPixelHeight, this.solidity) != MapLayer.noSolid;
      case "Down":
         solidPixelWidth = this.getSolidWidth() + Math.ceil(this.x) - Math.floor(this.x);
         return this.layer.getTopSolidPixel(Math.floor(this.x), Math.floor(this.y) + this.getSolidHeight(), solidPixelWidth, 1, this.solidity) != MapLayer.noSolid;
      case "Left":
         solidPixelHeight = this.getSolidHeight() + Math.ceil(this.y) - Math.floor(this.y);
         return this.layer.getRightSolidPixel(Math.floor(this.x) - 1, Math.floor(this.y), 1, solidPixelHeight, this.solidity) != MapLayer.noSolid;
   }
   return false;
}

Sprite.prototype.isMoving = function(direction) {
   var useDX;
   if (this.localDX == null)
      useDX = this.dx;
   else
      useDX = this.localDX;

   switch (direction) {
      case "Left":
         return useDX &lt; 0;
      case "Right":
         return useDX &gt; 0;
      case "Up":
         return this.dy &lt; 0;
      case "Down":
         return this.dy &gt; 0;
   }
   return false;
}

Sprite.prototype.isInputPressed = function(input, initialOnly) {
   return (this.inputs &amp; input) &amp;&amp;
      (!initialOnly || (0 == (this.oldInputs &amp; input)));
}

Sprite.prototype.alterXVelocity = function(delta) {
   this.dx += delta;
}

Sprite.prototype.alterYVelocity = function(delta) {
   this.dy += delta;
}

Sprite.prototype.reactToInertia = function(retainPercentVertical, retainPercentHorizontal) {
   if (this.localDX == null) {
      if (Math.abs(this.dx) &lt; .01)
         this.dx = 0;
      else
         this.dx *= retainPercentHorizontal / 100.0;
   } else {
      if (Math.abs(this.localDX) &lt; .01)
         this.localDX = 0;
      else
         this.localDX *= retainPercentHorizontal / 100.0;
   }
   if (Math.abs(this.dy) &lt; .01)
      this.dy = 0;
   else
      this.dy *= retainPercentVertical / 100.0;
}

Sprite.prototype.animate = function(correlation) {
   switch (correlation)
   {
      case "ByFrame":
         this.frame++;
         break;
      case "ByHorizontalVelocity":
         if (this.localDX == null)
            this.frame += Math.abs(Math.floor(this.x + this.dx) - Math.floor(this.x));
         else
            this.frame += Math.abs(Math.floor(this.localDX));
         break;
      case "ByVerticalVelocity":
         this.frame += Math.abs(Math.floor(this.y + this.dy) - Math.floor(this.y));
         break;
      case "ByVectorVelocity":
         var tmpDx = Math.abs(Math.floor(this.x + this.dx) - Math.floor(this.x));
         var tmpDy = Math.abs(Math.floor(this.y + this.dy) - Math.floor(this.y));
         this.frame += Math.floor(Math.sqrt(tmpDx * tmpDx + tmpDy * tmpDy));
         break;
   }
}

Sprite.prototype.isRidingPlatform = function() {
   return this.ridingOn != null;
}

Sprite.prototype.processRules = function() {
   if ((!this.processed) &amp;&amp; (this.isActive)) {
      this.processed = true;
      if (this.executeRules != null) this.executeRules();
   }
}

Sprite.prototype.reactToPlatform = function() {
   if (this.ridingOn == null)
      return;

   if (!this.ridingOn.processed)
      this.ridingOn.processRules();

   if ((this.ridingOn.isActive == false) || (this.x + this.getSolidWidth() &lt; this.ridingOn.oldX) || (this.x &gt; this.ridingOn.oldX + this.ridingOn.getSolidWidth()) ||
      (this.y + this.getSolidHeight() &lt; this.ridingOn.oldY - 1) || (this.y + this.getSolidHeight() &gt;= this.ridingOn.oldY + this.ridingOn.getSolidHeight()))
   {
      this.stopRiding();
      return;
   }

   if (this.localDX != null)
      this.dx = this.localDX + this.ridingOn.dx;
   this.dy = this.ridingOn.y - this.getSolidHeight() - this.y;
}

Sprite.prototype.landDownOnPlatform = function(platformList) {
   if (this.ridingOn != null)
      return false;
   for(var sprKey in platformList) {
      var spr = platformList[sprKey];
      if (!spr.isActive)
         continue;
      if ((this.oldY + this.getSolidHeight() &lt;= spr.oldY) &amp;&amp;
         (this.y + this.getSolidHeight() &gt; spr.y) &amp;&amp;
         (this.x + this.getSolidWidth() &gt; spr.x) &amp;&amp;
         (this.x &lt; spr.x + spr.getSolidWidth()))
      {
         this.ridingOn = spr;
         spr.processRules();
         this.localDX = this.dx - spr.dx;
         this.dy = spr.y - this.getSolidHeight() - this.y;
         return true;
      }
   }
   return false;
}

Sprite.prototype.snapToGround = function(threshhold) {
   var proposedPixelX = Math.floor(this.x + this.dx);
   var proposedPixelY = Math.floor(this.y + this.dy);
   var proposedSolidPixelWidth = this.getSolidWidth() + Math.ceil(this.x + this.dx) - proposedPixelX;
   var ground = this.layer.getTopSolidPixel(proposedPixelX, proposedPixelY + this.getSolidHeight(), proposedSolidPixelWidth, threshhold, this.solidity);
   if (ground != MapLayer.noSolid) {
      newDy = ground - this.getSolidHeight() - this.y;
      if (newDy &gt; this.dy)
         this.dy = newDy;
      return true;
   }
   return false;
}

Sprite.prototype.stopRiding = function() {
   this.localDX = null;
   this.ridingOn = null;
}

Sprite.prototype.switchToState = function(state, alignment) {
   var oldRect = {x:Math.floor(this.x), y:Math.floor(this.y), width:this.getSolidWidth(), height:this.getSolidHeight()};
   oldRect.bottom = oldRect.y + oldRect.height;
   oldRect.right = oldRect.x + oldRect.width;
   var newWidth = this.states[state].solidWidth;
   var newHeight = this.states[state].solidHeight;
   var newX, newY;
   switch (alignment) {
      case "TopCenter":
      case "CenterMiddle":
      case "BottomCenter":
         newX = this.x + (oldRect.width - newWidth) / 2;
         break;
      case "TopRight":
      case "RightMiddle":
      case "BottomRight":
         newX = this.x + oldRect.width - newWidth;
         break;
      default:
         newX = this.x;
         break;
   }
   switch (alignment) {
      case "LeftMiddle":
      case "CenterMiddle":
      case "RightMiddle":
         newY = this.y + (oldRect.height - newHeight) / 2;
         break;
      case "BottomLeft":
      case "BottomCenter":
      case "BottomRight":
         newY = this.y + oldRect.height - newHeight;
         break;
      default:
         newY = this.y;
         break;
   }

   if ((Math.ceil(newY + newHeight) &gt; oldRect.bottom) &amp;&amp; (this.layer.getTopSolidPixel(
      Math.floor(newX), oldRect.bottom, newWidth, Math.ceil(newY) + newHeight - oldRect.bottom, this.solidity) != MapLayer.noSolid))
      return false;

   if ((Math.floor(newY) &lt; oldRect.y) &amp;&amp; (this.layer.getBottomSolidPixel(
      Math.floor(newX), Math.floor(newY), newWidth, oldRect.y - Math.floor(newY), this.solidity) != MapLayer.noSolid))
      return false;

   if ((Math.floor(newX) &lt; oldRect.x) &amp;&amp; (this.layer.getRightSolidPixel(
      Math.floor(newX), Math.floor(newY), oldRect.x - Math.floor(newX), newHeight, this.solidity) != MapLayer.noSolid))
      return false;

   if ((Math.ceil(newX + newWidth) &gt; oldRect.right) &amp;&amp; (this.layer.getLeftSolidPixel(
      oldRect.right, Math.floor(newY), Math.ceil(newX) + newWidth - oldRect.right, newHeight, this.solidity) != MapLayer.noSolid))
      return false;

   this.x = newX;
   this.y = newY;
   this.state = state;
   return true;
}

Sprite.prototype.deactivate = function() {
   this.isActive = false;
}

Sprite.prototype.touchTiles = function(category) {
   if (this.touchedTiles != null)
      this.touchedTiles.length = 0;

   var tw = this.layer.tileset.tileWidth;
   var th = this.layer.tileset.tileHeight;
   var minYEdge = Math.floor(Math.floor(this.y) / th);
   var maxY = Math.floor((Math.floor(this.y) + this.getSolidHeight()) / th);
   if (maxY &gt;= this.layer.virtualRows)
      maxY = this.layer.virtualRows - 1;
   var maxYEdge = Math.floor((Math.floor(this.y) + this.getSolidHeight() - 1) / th);
   var minX = Math.floor(Math.floor(this.x - 1) / tw);
   var minXEdge = Math.floor(Math.floor(this.x) / tw);
   var maxX = Math.floor((Math.floor(this.x) + this.getSolidWidth()) / tw);
   if (maxX &gt;= this.layer.virtualColumns)
      maxX = this.layer.virtualColumns - 1;
   var maxXEdge = Math.floor((Math.floor(this.x) + this.getSolidWidth() - 1) / tw);
   for (var yidx = Math.floor((Math.floor(this.y) - 1) / th); yidx &lt;= maxY; yidx++) {
      var isYEdge = !((yidx &gt;= minYEdge) &amp;&amp; (yidx &lt;= maxYEdge));
      for (var xidx = (isYEdge ? minXEdge : minX);
         xidx &lt;= (isYEdge ? maxXEdge : maxX);
         xidx++)
      {
         if (category.isTileMember(this.layer.tileset, this.layer.getTile(xidx, yidx))) {
            var wasTouching;
            var oldPixelX = Math.floor(this.oldX);
            var oldPixelY = Math.floor(this.oldY);

            if ((oldPixelX &lt;= xidx * tw + tw) &amp;&amp;
               (oldPixelX + this.getSolidWidth() &gt;= xidx * tw) &amp;&amp;
               (oldPixelY &lt;= yidx * th + th) &amp;&amp;
               (oldPixelY + this.getSolidHeight() &gt;= yidx * th))
            {
               var edgeX = (oldPixelX + this.getSolidWidth() == xidx * tw) ||
                  (oldPixelX == xidx * tw + tw);
               var edgeY = (oldPixelY + this.getSolidHeight() == yidx * th) ||
                  (oldPixelY == yidx * th + th);
               if (edgeX &amp;&amp; edgeY)
                  wasTouching = false;
               else
                  wasTouching = true;
            }
            else
               wasTouching = false;
            
            if (this.touchedTiles == null)
               this.touchedTiles = [];
            this.touchedTiles.push({x:xidx, y:yidx, tileValue:this.layer.getTile(xidx, yidx), initial:!wasTouching, processed:false});
         }
      }
   }
   if (this.touchedTiles == null)
      return false;
   return this.touchedTiles.length &gt; 0;
};

Sprite.prototype.tileTake = function(tileValue, counter, newValue) {
   if (this.touchedTiles == null)
      return 0;

   var result = 0;

   for (var i = 0; i &lt; this.touchedTiles.length; i++) {
      var tt = this.touchedTiles[i];
      if ((tt.tileValue == tileValue) &amp;&amp; (!tt.processed)) {
         if (counter.value &lt; counter.max) {
            counter.value++;
            this.layer.setTile(tt.x, tt.y, tt.tileValue = newValue);
            tt.processed = true;
            result++;
         }
         else
            break;
      }
   }
   return result;
};

Sprite.prototype.tileAddSprite = function (touchingIndex, spriteDefinition) {
   var tt = this.touchedTiles[touchingIndex];
   var spriteParams = "{\"~1\":\"" + spriteDefinition + "\", \"x\":" +
   tt.x * this.layer.tileset.tileWidth + ",\"y\":" + tt.y * this.layer.tileset.tileHeight +
   ",\"dx\":0,\"dy\":0,\"state\":0,\"frame\":0,\"active\":true,\"priority\":0,\"solidityName\":\"" +
   solidity.getSolidityName(this.solidity) + "\"}";
   GeneralRules.lastCreatedSprite = Sprite.deserialize(this.layer, spriteParams);
   GeneralRules.lastCreatedSprite.isDynamic = true;
   GeneralRules.lastCreatedSprite.clearParameters();

   this.layer.sprites.push(GeneralRules.lastCreatedSprite);
   for(var categoryKey in spriteDefinitions[spriteDefinition].prototype.categories) {
      var category = spriteDefinitions[spriteDefinition].prototype.categories[categoryKey];
      if (this.layer.spriteCategories[category] == null)
         this.layer.spriteCategories[category] = [];
      this.layer.spriteCategories[category].push(GeneralRules.lastCreatedSprite);
   }
};

Sprite.prototype.tileActivateSprite = function(touchingIndex, category, clearParameters) {
   for (var i = 0; i &lt; category.length; i++) {
      if (!category[i].isActive) {
         category[i].isActive = true;
         var tt = this.touchedTiles[touchingIndex];
         category[i].x = tt.x * this.layer.tileset.tileWidth;
         category[i].y = tt.y * this.layer.tileset.tileHeight;
         if (clearParameters) {
            category[i].frame = 0;
            category[i].state = 0;
            category[i].clearParameters();
         }
         category[i].processRules();
         return i;
      }
   }
   return -1;
};

Sprite.prototype.clearParameters = function() {
   if (this.constructor.userParams == null) return;
   for(i in this.constructor.userParams) {
      this[this.constructor.userParams[i]] = 0;
   }
};

Sprite.prototype.setSolidity = function(solidity) {
   this.solidity = solidity;
};

Sprite.prototype.testCollisionRect = function(targets) {
   if (!this.isActive)
      return -1;
   if (targets == null)
      return -1;
   for(var idx = 0; idx &lt; targets.length; idx++) {
      var targetSprite = targets[idx];
      if ((targetSprite == this) || (!targetSprite.isActive))
         continue;
      var x1 = Math.floor(this.x);
      var w1 = this.getSolidWidth();
      var x2 = Math.floor(targetSprite.x);
      var w2 = targetSprite.getSolidWidth();
      var y1 = Math.floor(this.y);
      var h1 = this.getSolidHeight();
      var y2 = Math.floor(targetSprite.y);
      var h2 = targetSprite.getSolidHeight();

      if ((x1 + w1 &gt; x2) &amp;&amp; (x2 + w2 &gt; x1) &amp;&amp; (y1 + h1 &gt; y2) &amp;&amp; (y2 + h2 &gt; y1))
         return idx;
   }
   return -1;
};

Sprite.prototype.getNearestSpriteIndex = function(target) {
   var minDist = 999999999;
   var result = -1;
   if (target == null) return -1;
   for (var i = 0; i &lt; target.length; i++) {
      if ((!target[i].isActive) || (target[i] == this))
         continue;
      var xOff = target[i].x - this.x;
      var yOff = target[i].y - this.y;
      var dist = xOff * xOff + yOff * yOff;
      if (dist &lt; minDist) {
         minDist = dist;
         result = i;
      }
   }
   return result;
};

Sprite.prototype.pushTowardCategory = function(target, index, force) {
   if (index &lt; 0)
      index = this.getNearestSpriteIndex(target);
   if (index &lt; 0)
      return false;

   return this.pushTowardSprite(target[index], force);
};

Sprite.prototype.pushTowardSprite = function (target, force) {
   var vx = target.x - this.x + (target.getSolidWidth() - this.getSolidWidth()) / 2;
   var vy = target.y - this.y + (target.getSolidHeight() - this.getSolidHeight()) / 2;
   var dist = Math.sqrt(vx * vx + vy * vy);
   if (dist &gt;= 1) {
      this.dx += vx * force / dist / 10.0;
      this.dy += vy * force / dist / 10.0;
      return true;
   }
   return false;
};

Sprite.prototype.setInputState = function(input, press) {
   if (press)
      this.inputs |= input;
   else
      this.inputs &amp;= ~input;
};

Sprite.prototype.clearInputs = function(setOldInputs) {
   if (setOldInputs)
      this.oldInputs = this.inputs;
   this.inputs = 0;
};

Sprite.prototype.tileUseUp = function(tileValue, counter, newValue) {
   if (this.touchedTiles == null)
      return 0;

   var result = 0;

   for (var i = 0; i &lt; this.touchedTiles.length; i++) {
      var tt = this.touchedTiles[i];
      if ((tt.tileValue == tileValue) &amp;&amp; (!tt.processed)) {
         if (counter.value &gt; 0) {
            counter.value--;
            this.layer.setTile(tt.x, tt.y, tt.tileValue = newValue);
            tt.processed = true;
            result++;
         }
         else
            break;
      }
   }
   return result;
};

Sprite.prototype.addSpriteHere = function(spriteDefinition, location, hotSpot) {
   var spriteParams = "{\"~1\":\"" + spriteDefinition + "\", \"x\":0,\"y\":0" +
   ",\"dx\":0,\"dy\":0,\"state\":0,\"frame\":0,\"active\":true,\"priority\":0,\"solidityName\":\"" +
   solidity.getSolidityName(this.solidity) + "\"}";
   GeneralRules.lastCreatedSprite = Sprite.deserialize(this.layer, spriteParams);

   ptLocation = this.getRelativePosition(location);
   ptHotSpot = GeneralRules.lastCreatedSprite.getRelativePosition(hotSpot);
   GeneralRules.lastCreatedSprite.x = GeneralRules.lastCreatedSprite.oldX = ptLocation.x - ptHotSpot.x;
   GeneralRules.lastCreatedSprite.y = GeneralRules.lastCreatedSprite.oldY = ptLocation.y - ptHotSpot.y;

   GeneralRules.lastCreatedSprite.isDynamic = true;
   GeneralRules.lastCreatedSprite.clearParameters();

   this.layer.sprites.push(GeneralRules.lastCreatedSprite);
   for(var categoryKey in spriteDefinitions[spriteDefinition].prototype.categories) {
      var category = spriteDefinitions[spriteDefinition].prototype.categories[categoryKey];
      if (this.layer.spriteCategories[category] == null)
         this.layer.spriteCategories[category] = [];
      this.layer.spriteCategories[category].push(GeneralRules.lastCreatedSprite);
   }
};

Sprite.prototype.tileChange = function(oldTileValue, newTileValue, initialOnly) {
   if (this.touchedTiles == null)
      return 0;

   var result = 0;

   for (var i = 0; i &lt; this.touchedTiles.length; i++) {
      var tt = this.touchedTiles[i];
      if ((tt.tileValue == oldTileValue) &amp;&amp; (!tt.processed) &amp;&amp; (!initialOnly || tt.initial)) {
         tt.processed = true;
         this.layer.setTile(tt.x, tt.y, tt.tileValue = newTileValue);
         result++;
      }
   }
   return result;
};

Sprite.prototype.tileChangeTouched = function(touchingIndex, newTileValue) {
   if ((this.touchedTiles == null) || (this.touchedTiles.length &lt;= touchingIndex))
      return;

   var tt = this.touchedTiles[touchingIndex];
   tt.tileValue =  newTileValue;
   this.layer.setTile(tt.x, tt.y, tt.tileValue);
};

Sprite.prototype.tileTouchingIndex = function(tileValue, initialOnly, markAsProcessed) {
   if (this.touchedTiles == null)
      return -1;

   for (var i = 0; i &lt; this.touchedTiles.length; i++) {
      var tt = this.touchedTiles[i];
      if ((tt.tileValue == tileValue) &amp;&amp; (!tt.processed) &amp;&amp; (!initialOnly || tt.initial)) {
         tt.processed = markAsProcessed;
         return i;
      }
   }

   return -1;
};

Sprite.prototype.mapMouseToSprite = function(instantMove, hotSpot) {
   var pos = {x:mouseInfo.x - this.layer.currentX, y:mouseInfo.y - this.layer.currentY};
   var rp = this.getRelativePosition(hotSpot);
   if (instantMove) {
      this.oldX = this.x;
      this.oldY = this.y;
      this.x = pos.x + this.x - rp.x;
      this.y = pos.y + this.y - rp.y;
   } else {
      this.dx = pos.x - rp.x;
      this.dy = pos.y - rp.y;
   }
   this.oldinputs = this.inputs;
   this.inputs = 0;
   if (mouseInfo.pressed)
      this.inputs |= Sprite.inputBits.button1;
};

Sprite.prototype.setInputsTowardSprite = function(target) {
   var targetCenter = target.x + target.getSolidWidth() / 2;
   var myCenter = this.x + this.getSolidWidth() / 2;

   if (targetCenter &lt; myCenter)
      this.inputs |= Sprite.inputBits.left;
   else if (targetCenter &gt; myCenter)
      this.inputs |= Sprite.inputBits.right;
   else
      this.inputs &amp;= ~(Sprite.inputBits.left | Sprite.inputBits.right);

   targetCenter = target.y + target.getSolidHeight() / 2;
   myCenter = this.y + this.getSolidHeight() / 2;
   if (targetCenter &lt; myCenter)
      this.inputs |= Sprite.inputBits.up;
   else if (targetCenter &gt; myCenter)
      this.inputs |= Sprite.inputBits.down;
   else
      this.inputs &amp;= ~(Sprite.inputBits.up | Sprite.inputBits.down);
};

Sprite.prototype.setInputsTowardCategory = function(target, index) {
   if (index &lt; 0)
      index = this.getNearestSpriteIndex(target);
   if (index &lt; 0)
   {
      this.inputs &amp;= ~(Sprite.inputBits.left | Sprite.inputBits.right | Sprite.inputBits.up | Sprite.inputBits.down);
      return;
   }

   this.setInputsTowardSprite(target[index]);
};
</Text>
  </SourceCode>
  <SourceCode Name="Tile.js" IsCustomObject="false">
    <Text>function TileShape()
{
}

TileShape.maxValue = 32767;
TileShape.minValue = -32768;

TileShape.empty = new TileShape();
TileShape.empty.getTopSolidPixel = function(width, height, min, max) { return TileShape.maxValue; };
TileShape.empty.getLeftSolidPixel = function(width, height, min, max) { return TileShape.maxValue; };
TileShape.empty.getRightSolidPixel = function(width, height, min, max) { return TileShape.minValue; };
TileShape.empty.getBottomSolidPixel = function(width, height, min, max) { return TileShape.minValue; };

TileShape.solid = new TileShape();
TileShape.prototype.getTopSolidPixel = function(width, height, min, max) { return 0; };
TileShape.prototype.getLeftSolidPixel = function(width, height, min, max) { return 0; };
TileShape.prototype.getRightSolidPixel = function(width, height, min, max) { return width - 1; };
TileShape.prototype.getBottomSolidPixel = function(width, height, min, max) { return height - 1; };

TileShape.uphill = new TileShape();
TileShape.uphill.getTopSolidPixel = function(width, height, min, max) { return Math.floor(height * (width-max-1) / width); };
TileShape.uphill.getLeftSolidPixel = function(width, height, min, max) { return Math.floor(width * (height-max-1) / height); };

TileShape.downhill = new TileShape();
TileShape.downhill.getTopSolidPixel = function(width, height, min, max) { return Math.floor(min * height / width); };
TileShape.downhill.getRightSolidPixel = function(width, height, min, max) { return Math.floor(width - (height - max - 1) * width / height - 1); };

TileShape.upCeiling = new TileShape();
TileShape.upCeiling.getRightSolidPixel = function(width, height, min, max) { return Math.floor(((height - min) * width - 1) / height); };
TileShape.upCeiling.getBottomSolidPixel = function(width, height, min, max) { return Math.floor(((width - min) * height - 1) / width); };

TileShape.downCeiling = new TileShape();
TileShape.downCeiling.getLeftSolidPixel = function(width, height, min, max) { return Math.floor(min * width / height); };
TileShape.downCeiling.getBottomSolidPixel = function(width, height, min, max) { return Math.floor(height - (width - max - 1) * height / width - 1); };

TileShape.uphillRight = new TileShape();
TileShape.uphillRight.getTopSolidPixel = function(width, height, min, max) { return Math.floor(height * (width - max - 1) / width / 2); };
TileShape.uphillRight.getLeftSolidPixel = function(width, height, min, max) { return Math.floor((max * 2 &gt;= height - 2) ? 0 : width * (height - max * 2 - 2) / height); };

TileShape.uphillLeft = new TileShape();
TileShape.uphillLeft.getTopSolidPixel = function(width, height, min, max) { return Math.floor(height * (width - max - 1) / width / 2 + height / 2); };
TileShape.uphillLeft.getLeftSolidPixel = function(width, height, min, max) { return Math.floor(((max + 1) * 2 &lt;= height)?TileShape.maxValue:width * (height - max - 1) * 2 / height); };
TileShape.uphillLeft.getRightSolidPixel = function(width, height, min, max) { return Math.floor(((max + 1) * 2 &lt;= height)?TileShape.minValue:width - 1); };

TileShape.downhillLeft = new TileShape();
TileShape.downhillLeft.getTopSolidPixel = function(width, height, min, max) { return Math.floor(min * height / width / 2); };
TileShape.downhillLeft.getRightSolidPixel = function(width, height, min, max) { return Math.floor(((max + 1) * 2 &gt; height) ? width - 1 : width * 2 - (height - max - 1) * width * 2 / height - 1); };

TileShape.downhillRight = new TileShape();
TileShape.downhillRight.getTopSolidPixel = function(width, height, min, max) { return Math.floor((height + min * height / width) / 2); };
TileShape.downhillRight.getLeftSolidPixel = function(width, height, min, max) { return Math.floor(((min + 1) * 2 &lt;= height) ? TileShape.maxValue : 0); };
TileShape.downhillRight.getRightSolidPixel = function(width, height, min, max) { return Math.floor(((max + 1) * 2 &lt;= height) ? TileShape.minValue : width - (height - max - 1) * 2 * width / height - 1); };

TileShape.topSolid = new TileShape();
TileShape.topSolid.getLeftSolidPixel = TileShape.empty.getLeftSolidPixel;
TileShape.topSolid.getRightSolidPixel = TileShape.empty.getRightSolidPixel;
TileShape.topSolid.getBottomSolidPixel = TileShape.empty.getBottomSolidPixel;

function TileCategory(tilesetMembership) {
   this.membership = new Object();
   for(var tsIndex = 0; tsIndex &lt; tilesetMembership.length; tsIndex++) {
      var tsMemberLookup = new Array();
      var tsMemberList = tilesetMembership[tsIndex].membership;
      this.membership[tilesetMembership[tsIndex].tileset.name] = tsMemberLookup;
      for(var tileIndex = 0; tileIndex &lt; tsMemberList.length; tileIndex++) {
         if (typeof tsMemberList[tileIndex] == 'number')
            tsMemberLookup[tsMemberList[tileIndex]] = true;
         else
            tsMemberLookup[tsMemberList[tileIndex].tileIndex] = tsMemberList[tileIndex].frames;
      }
   }
}

TileCategory.prototype.isTileMember = function(tileset, tileIndex) {
   var membership = this.membership[tileset.name];
   if (membership == null)
      return false;
   var member = membership[tileIndex];
   if (member === true) return true;
   if (!member) return false;
   return member.indexOf(tileset.tiles[tileIndex].getCurFrameIndex()) &gt; -1;
};

function Solidity(mapping) {
   this.mapping = mapping;
};

Solidity.prototype.getCurrentTileShape = function(tileset, tileIndex) {
   for(var i = 0; i &lt; this.mapping.length; i++) {
      if (this.mapping[i].tileCategory.isTileMember(tileset, tileIndex))
         return this.mapping[i].tileShape;
   }
   return TileShape.empty;
};
</Text>
  </SourceCode>
  <SourceCode Name="Map.js" IsCustomObject="false">
    <Text>function Map(scrollWidth, scrollHeight, scrollMarginLeft, scrollMarginTop, scrollMarginRight, scrollMarginBottom) {
   this.scrollX = 0;
   this.scrollY = 0;
   this.scrollWidth = scrollWidth;
   this.scrollHeight = scrollHeight;
   this.scrollMarginLeft = scrollMarginLeft;
   this.scrollMarginTop = scrollMarginTop;
   this.scrollMarginRight = scrollMarginRight;
   this.scrollMarginBottom = scrollMarginBottom;
   this.layers = {};
}

function getMapName(map) {
   for(var key in maps) {
      if (maps[key] === map)
         return key;
   }
   return null;
}

Map.prototype.scroll = function(x, y) {
   if(x &lt; viewWidth - this.scrollWidth) x = viewWidth - this.scrollWidth;
   if(x &gt; 0) x = 0;
   if(y &lt; viewHeight - this.scrollHeight) y = viewHeight - this.scrollHeight;
   if(y &gt; 0) y = 0;
   this.scrollX = x;
   this.scrollY = y;
   for(var key in this.layers) {
      this.layers[key].currentX = this.layers[key].offsetX + Math.floor(x * this.layers[key].scrollRateX);
      this.layers[key].currentY = this.layers[key].offsetY + Math.floor(y * this.layers[key].scrollRateY);
   }
};

Map.prototype.draw = function(ctx) {
   for(var key in this.layers)
      this.layers[key].draw(ctx);
};

Map.prototype.getState = function() {
   var result = {layers:{},cameFromMapName:this.cameFromMapName,mapFlags:this.mapFlags};
   for(var key in this.layers)
      result.layers[key] = this.layers[key].getState();
   return result;
};

Map.prototype.setState = function(data) {
   for(var key in this.layers)
      this.layers[key].setState(data.layers[key]);
   // These are probably correct, but the C# implementation doesn't do this
   // this.cameFromMapName = data.cameFromMapName;
   // this.mapFlags = data.mapFlags;
};

Map.prototype.executeRules = function() {
   for(var key in this.layers)
      this.layers[key].executeRules();
};</Text>
  </SourceCode>
  <SourceCode Name="MapLayer.js" IsCustomObject="false">
    <Text>function decodeData1(data) {
   var result = new Array();
   for(var i = 0; i &lt; data.length; i++) {
      result[i] = dataDigits.indexOf(data[i]);
   }
   return result;
}

function decodeData2(data) {
   var result = new Array();
   for(var i = 0; i &lt; data.length/2; i++) {
      result[i] = dataDigits.indexOf(data[i*2]) * dataDigits.length + dataDigits.indexOf(data[i*2+1]);
   }
   return result;
}

function MapLayer(map, tileset, columns, rows, virtualColumns, virtualRows, offsetX, offsetY, scrollRateX, scrollRateY, priority, tileData) {
   this.map = map;
   this.tileset = tileset;
   this.columns = columns;
   this.rows = rows;
   this.offsetX = offsetX;
   this.offsetY = offsetY;
   this.currentX = offsetX;
   this.currentY = offsetY;
   this.scrollRateX = scrollRateX;
   this.scrollRateY = scrollRateY;
   this.priority = priority;
   if (tileData != null)
   {
      if(tileData.length &lt; columns * rows * 2)
         this.tiles = decodeData1(tileData);
      else
         this.tiles = decodeData2(tileData);
   } else {
      this.tiles = [];
   }
   this.virtualColumns = virtualColumns ? virtualColumns : columns;
   this.virtualRows = virtualRows ? virtualRows : rows;
   this.sprites = [];
}

MapLayer.prototype.encodeTileData2 = function() {
   var result = '';
   for(var i = 0; i &lt; this.tiles.length; i++) {
      result += dataDigits[Math.floor(this.tiles[i] / dataDigits.length)] + dataDigits[this.tiles[i] % dataDigits.length];
   }
   return result;
};

MapLayer.prototype.getState = function() {
   var result = {currentX:this.currentX,currentY:this.currentY,tiles:this.encodeTileData2()};
   var staticSpriteIndices = [];
   for(var key in this)
   {
      if(this[key] instanceof Sprite)
      {
         result["~1" + key] = this[key].serialize();
         var staticIndex = this.sprites.indexOf(this[key]);
         if (staticIndex &gt;= 0)
            staticSpriteIndices[staticIndex] = true;
      }
   }
   var dynamicSprites = [];
   for(spriteIndex = 0; spriteIndex &lt; this.sprites.length; spriteIndex++)
   {
      if (staticSpriteIndices[spriteIndex] !== true)
      {
         dynamicSprites.push("\"" + this.sprites[spriteIndex].serialize().replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"");
      }
   }
   result.dynamicSprites = "[" + dynamicSprites.join(",") + "]";
   return result;
};

MapLayer.prototype.setState = function(source) {
   this.tiles = decodeData2(source.tiles);
   this.sprites.length = 0;
   for(var key in source) {
      if (key.substr(0,2) == "~1") {
         var s = Sprite.deserialize(this,source[key]);
         this[key.substr(2)] = s;
         this.sprites.push(s);
      }
   }
   if (source["dynamicSprites"] != null) {
      var dynamicSprites = JSON.parse(source["dynamicSprites"]);
      for(s in dynamicSprites) {
         this.sprites.push(Sprite.deserialize(this,dynamicSprites[s]));
      }
   }
   this.spriteCategories = Sprite.categorize(this.sprites);
   this.currentX = source.currentX;
   this.currentY = source.currentY;
};

MapLayer.prototype.getTile = function(x, y) {
   return this.tiles[(y % this.rows) * this.columns + (x % this.columns)];
};

MapLayer.prototype.setTile = function(x, y, value) {
   this.tiles[(y % this.rows) * this.columns + (x % this.columns)] = value;
}

MapLayer.prototype.draw = function(ctx) {
   var tileWidth = this.tileset.tileWidth;
   var tileHeight = this.tileset.tileHeight;
   var lastRow = Math.floor((viewHeight - this.currentY - 1) / tileHeight);
   if (lastRow &gt;= this.virtualRows) lastRow = this.virtualRows - 1;
   var lastCol = Math.floor((viewWidth - this.currentX - 1) / tileWidth);
   if (lastCol &gt;= this.virtualColumns) lastCol = this.virtualColumns - 1;
   for(y = Math.floor(-this.currentY / tileHeight), y = y &lt; 0 ? 0 : y; y &lt;= lastRow; y++) {
      for(x = Math.floor(-this.currentX / tileWidth), x = x &lt; 0 ? 0 : x; x &lt;= lastCol; x++) {
         var tile = this.tileset.tiles[this.getTile(x, y)];
         if (tile == null) continue;
         var drx = x * tileWidth + this.currentX;
         var dry = y * tileHeight + this.currentY;
         if (typeof tile == 'number')
            this.tileset.frameSet.frames[tile % this.tileset.frameSet.frames.length].draw(ctx, drx, dry);
         else {
            var frames;
            if (tile instanceof AnimTile)
               frames = tile.getCurFrames();
            else
               frames = tile;
            if (typeof frames == 'number')
               this.tileset.frameSet.frames[frames % this.tileset.frameSet.frames.length].draw(ctx, drx, dry);
            else
               for(var fi = 0; fi &lt; frames.length; fi++)
                  this.tileset.frameSet.frames[frames[fi] % this.tileset.frameSet.frames.length].draw(ctx, drx, dry);
         }
      }
   }
   for(si = 0; si &lt; this.sprites.length; si++) {
      var curSprite = this.sprites[si];
      if (!curSprite.isActive) continue;
      var frames = curSprite.getCurFrames();
      if (frames == null) continue;
      var frameSet = frameSets[curSprite.states[curSprite.state].frameSetName];
      if (typeof frames == 'number')
         frameSet.frames[frames % frameSet.frames.length].draw(ctx, curSprite.x + this.currentX, curSprite.y + this.currentY);
      else
         for(var fi = 0; fi &lt; frames.length; fi++)
            frameSet.frames[frames[fi] % frameSet.frames.length].draw(ctx, curSprite.x + this.currentX, curSprite.y + this.currentY);
   }
};

MapLayer.noSolid = -2000000000;

MapLayer.prototype.getTopSolidPixel = function(areaX, areaY, areaWidth, areaHeight, solidity) {
   var topTile = Math.floor(areaY / this.tileset.tileHeight);
   var bottomTile = Math.floor((areaY + areaHeight - 1) / this.tileset.tileHeight);
   var leftTile = Math.floor(areaX / this.tileset.tileWidth);
   var rightTile = Math.floor((areaX + areaWidth - 1) / this.tileset.tileWidth);
   var outOfBounds = false;
   if ((topTile &lt; 0) || (topTile &gt;= this.virtualRows) || (bottomTile &lt; 0) || (bottomTile &gt;= this.virtualRows)
      || (leftTile &lt; 0) || (leftTile &gt;= this.virtualColumns) || (rightTile &lt; 0) || (rightTile &gt;= this.virtualColumns))
      outOfBounds = true;
   var minTileTop = (areaY+this.tileset.tileHeight) % this.tileset.tileHeight;
   var tileLeft = leftTile * this.tileset.tileWidth;
   for (var y = topTile; y &lt;= bottomTile; y++) {
      if (rightTile == leftTile) {
         var topMost;
         if (outOfBounds &amp;&amp; ((leftTile &lt; 0) || (leftTile &gt;= this.virtualColumns) || (y &lt; 0) || (y &gt;= this.virtualRows)))
            topMost = 0;
         else
            topMost = solidity.getCurrentTileShape(this.tileset, this.getTile(leftTile,y)).getTopSolidPixel(
               this.tileset.tileWidth, this.tileset.tileHeight, areaX - tileLeft,
               areaX + areaWidth - 1 - tileLeft);
         if ((topMost != TileShape.maxValue) &amp;&amp; ((y &gt; topTile) || (topMost &gt;= minTileTop))) {
            var result = topMost + y * this.tileset.tileHeight;
            if (result &lt; areaY + areaHeight)
               return result;
            else
               return MapLayer.noSolid;
         }
      } else {
         var topMost;
         if (outOfBounds &amp;&amp; ((leftTile &lt; 0) || (leftTile &gt;= this.virtualColumns) || (y &lt; 0) || (y &gt;= this.virtualRows)))
            topMost = 0;
         else
            topMost = solidity.getCurrentTileShape(this.tileset, this.getTile(leftTile, y)).getTopSolidPixel(
                this.tileset.tileWidth, this.tileset.tileHeight, areaX - tileLeft, this.tileset.tileWidth - 1);
         if ((y == topTile) &amp;&amp; (topMost &lt; minTileTop))
            topMost = TileShape.maxValue;
         var top;
         for (var x = leftTile + 1; x &lt; rightTile; x++) {
            if (outOfBounds &amp;&amp; ((x &lt; 0) || (x &gt;= this.virtualColumns) || (y &lt; 0) || (y &gt;= this.virtualRows)))
               top = 0;
            else
               top = solidity.getCurrentTileShape(this.tileset, this.getTile(x,y)).getTopSolidPixel(
                  this.tileset.tileWidth, this.tileset.tileHeight, 0, this.tileset.tileWidth - 1);
            if ((top &lt; topMost) &amp;&amp; ((y &gt; topTile) || (top &gt;= minTileTop)))
               topMost = top;
         }
         if (outOfBounds &amp;&amp; ((rightTile &lt; 0) || (rightTile &gt;= this.virtualColumns) || (y &lt; 0) || (y &gt;= this.virtualRows)))
            top = 0;
         else
            top = solidity.getCurrentTileShape(this.tileset, this.getTile(rightTile,y)).getTopSolidPixel(
               this.tileset.tileWidth, this.tileset.tileHeight, 0, (areaX + areaWidth - 1) % this.tileset.tileWidth);
         if ((top &lt; topMost) &amp;&amp; ((y &gt; topTile) || (top &gt;= minTileTop)))
            topMost = top;
         if (topMost != TileShape.maxValue) {
            var result = topMost + y * this.tileset.tileHeight;
            if (result &lt; areaY + areaHeight)
               return result;
            else
               return MapLayer.noSolid;
         }
      }
   }
   return MapLayer.noSolid;
};

MapLayer.prototype.getBottomSolidPixel = function(areaX, areaY, areaWidth, areaHeight, solidity) {
   var topTile = Math.floor(areaY / this.tileset.tileHeight);
   var bottomTile = Math.floor((areaY + areaHeight - 1) / this.tileset.tileHeight);
   var leftTile = Math.floor(areaX / this.tileset.tileWidth);
   var rightTile = Math.floor((areaX + areaWidth - 1) / this.tileset.tileWidth);
   var outOfBounds = false;
   if ((topTile &lt; 0) || (topTile &gt;= this.virtualRows) || (bottomTile &lt; 0) || (bottomTile &gt;= this.virtualRows)
      || (leftTile &lt; 0) || (leftTile &gt;= this.virtualColumns) || (rightTile &lt; 0) || (rightTile &gt;= this.virtualColumns))
      outOfBounds = true;
   var maxTileBottom = (areaY + areaHeight - 1 + this.tileset.tileHeight) % this.tileset.tileHeight;
   var tileLeft = leftTile * this.tileset.tileWidth;
   for (var y = bottomTile; y &gt;= topTile; y--) {
      if (rightTile == leftTile) {
         var bottomMost;
         if (outOfBounds &amp;&amp; ((leftTile &lt; 0) || (leftTile &gt;= this.virtualColumns) || (y &lt; 0) || (y &gt;= this.virtualRows)))
            bottomMost = this.tileset.tileHeight - 1;
         else
            bottomMost = solidity.getCurrentTileShape(this.tileset, this.getTile(leftTile,y)).getBottomSolidPixel(
               this.tileset.tileWidth, this.tileset.tileHeight, areaX - tileLeft,
               areaX + areaWidth - 1 - tileLeft);
         if ((bottomMost != TileShape.minValue) &amp;&amp; ((y &lt; bottomTile) || (bottomMost &lt;= maxTileBottom))) {
            var result = bottomMost + y * this.tileset.tileHeight;
            if (result &gt;= areaY)
               return result;
            else
               return MapLayer.noSolid;
         }
      } else {
         var bottomMost;
         if (outOfBounds &amp;&amp; ((leftTile &lt; 0) || (leftTile &gt;= this.virtualColumns) || (y &lt; 0) || (y &gt;= this.virtualRows)))
            bottomMost = this.tileset.tileHeight - 1;
         else
            bottomMost = solidity.getCurrentTileShape(this.tileset, this.getTile(leftTile, y)).getBottomSolidPixel(
               this.tileset.tileWidth, this.tileset.tileHeight, areaX - tileLeft, this.tileset.tileWidth - 1);
         if ((y == bottomTile) &amp;&amp; (bottomMost &gt; maxTileBottom))
            bottomMost = TileShape.minValue;
         var bottom;
         for (var x = leftTile + 1; x &lt; rightTile; x++) {
            if (outOfBounds &amp;&amp; ((x &lt; 0) || (x &gt;= this.virtualColumns) || (y &lt; 0) || (y &gt;= this.virtualRows)))
               bottom = this.tileset.tileHeight - 1;
            else
               bottom = solidity.getCurrentTileShape(this.tileset, this.getTile(x,y)).getBottomSolidPixel(
                  this.tileset.tileWidth, this.tileset.tileHeight, 0, this.tileset.tileWidth - 1);
            if ((bottom &gt; bottomMost) &amp;&amp; ((y &lt; bottomTile) || (bottom &lt;= maxTileBottom)))
               bottomMost = bottom;
         }
         if (outOfBounds &amp;&amp; ((rightTile &lt; 0) || (rightTile &gt;= this.virtualColumns) || (y &lt; 0) || (y &gt;= this.virtualRows)))
            bottom = this.tileset.tileHeight - 1;
         else
            bottom = solidity.getCurrentTileShape(this.tileset, this.getTile(rightTile,y)).getBottomSolidPixel(
               this.tileset.tileWidth, this.tileset.tileHeight, 0, (areaX + areaWidth - 1) % this.tileset.tileWidth);
         if ((bottom &gt; bottomMost) &amp;&amp; ((y &lt; bottomTile) || (bottom &lt;= maxTileBottom)))
            bottomMost = bottom;
         if (bottomMost != TileShape.minValue) {
            var result = bottomMost + y * this.tileset.tileHeight;
            if (result &gt;= areaY)
               return result;
            else
               return MapLayer.noSolid;
         }
      }
   }
   return MapLayer.noSolid;
};

MapLayer.prototype.getLeftSolidPixel = function(areaX, areaY, areaWidth, areaHeight, solidity) {
   var topTile = Math.floor(areaY / this.tileset.tileHeight);
   var bottomTile = Math.floor((areaY + areaHeight - 1) / this.tileset.tileHeight);
   var leftTile = Math.floor(areaX / this.tileset.tileWidth);
   var rightTile = Math.floor((areaX + areaWidth - 1) / this.tileset.tileWidth);
   var outOfBounds = false;
   if ((topTile &lt; 0) || (topTile &gt;= this.virtualRows) || (bottomTile &lt; 0) || (bottomTile &gt;= this.virtualRows)
      || (leftTile &lt; 0) || (leftTile &gt;= this.virtualColumns) || (rightTile &lt; 0) || (rightTile &gt;= this.virtualColumns))
      outOfBounds = true;
   var minTileLeft = (areaX + this.tileset.tileWidth) % this.tileset.tileWidth;
   var tileTop = topTile * this.tileset.tileHeight;
   for (var x = leftTile; x &lt;= rightTile; x++) {
      if (bottomTile == topTile){
         var leftMost;
         if (outOfBounds &amp;&amp; ((topTile &lt; 0) || (topTile &gt;= this.virtualRows) || (x &lt; 0) || (x &gt;= this.virtualColumns)))
            leftMost = 0;
         else
            leftMost = solidity.getCurrentTileShape(this.tileset, this.getTile(x, topTile)).getLeftSolidPixel(
               this.tileset.tileWidth, this.tileset.tileHeight, areaY - tileTop,
               areaY + areaHeight - 1 - tileTop);
         if ((leftMost != TileShape.maxValue) &amp;&amp; ((x &gt; leftTile) || (leftMost &gt;= minTileLeft))) {
            var result = leftMost + x * this.tileset.tileWidth;
            if (result &lt; areaX + areaWidth)
               return result;
            else
               return MapLayer.noSolid;
         }
      } else {
         var leftMost;
         if (outOfBounds &amp;&amp; ((topTile &lt; 0) || (topTile &gt;= this.virtualRows) || (x &lt; 0) || (x &gt;= this.virtualColumns)))
            leftMost = 0;
         else
            leftMost = solidity.getCurrentTileShape(this.tileset, this.getTile(x, topTile)).getLeftSolidPixel(
                this.tileset.tileWidth, this.tileset.tileHeight, areaY - tileTop, this.tileset.tileHeight - 1);
         if ((x == leftTile) &amp;&amp; (leftMost &lt; minTileLeft))
            leftMost = TileShape.maxValue;
         var left;
         for (var y = topTile + 1; y &lt; bottomTile; y++) {
            if (outOfBounds &amp;&amp; ((x &lt; 0) || (x &gt;= this.virtualColumns) || (y &lt; 0) || (y &gt;= this.virtualRows)))
               left = 0;
            else
               left = solidity.getCurrentTileShape(this.tileset, this.getTile(x,y)).getLeftSolidPixel(
                  this.tileset.tileWidth, this.tileset.tileHeight, 0, this.tileset.tileHeight - 1);
            if ((left &lt; leftMost) &amp;&amp; ((x &gt; leftTile) || (left &gt;= minTileLeft)))
               leftMost = left;
         }
         if (outOfBounds &amp;&amp; ((bottomTile &lt; 0) || (bottomTile &gt;= this.virtualRows) || (x &lt; 0) || (x &gt;= this.virtualColumns)))
            left = 0;
         else
            left = solidity.getCurrentTileShape(this.tileset, this.getTile(x, bottomTile)).getLeftSolidPixel(
               this.tileset.tileWidth, this.tileset.tileHeight, 0, (areaY + areaHeight - 1) % this.tileset.tileHeight);
         if ((left &lt; leftMost) &amp;&amp; ((x &gt; leftTile) || (left &gt;= minTileLeft)))
            leftMost = left;
         if (leftMost != TileShape.maxValue) {
            var result = leftMost + x * this.tileset.tileWidth;
            if (result &lt; areaX + areaWidth)
               return result;
            else
               return MapLayer.noSolid;
         }
      }
   }
   return MapLayer.noSolid;
};

MapLayer.prototype.getRightSolidPixel = function(areaX, areaY, areaWidth, areaHeight, solidity) {
   var topTile = Math.floor(areaY / this.tileset.tileHeight);
   var bottomTile = Math.floor((areaY + areaHeight - 1) / this.tileset.tileHeight);
   var leftTile = Math.floor(areaX / this.tileset.tileWidth);
   var rightTile = Math.floor((areaX + areaWidth - 1) / this.tileset.tileWidth);
   var outOfBounds = false;
   if ((topTile &lt; 0) || (topTile &gt;= this.virtualRows) || (bottomTile &lt; 0) || (bottomTile &gt;= this.virtualRows)
      || (leftTile &lt; 0) || (leftTile &gt;= this.virtualColumns) || (rightTile &lt; 0) || (rightTile &gt;= this.virtualColumns))
      outOfBounds = true;
   var maxTileRight = (areaX + areaWidth - 1 + this.tileset.tileWidth) % this.tileset.tileWidth;
   var tileTop = topTile * this.tileset.tileHeight;
   for (var x = rightTile; x &gt;= leftTile; x--) {
      if (bottomTile == topTile){
         var rightMost;
         if (outOfBounds &amp;&amp; ((topTile &lt; 0) || (topTile &gt;= this.virtualRows) || (x &lt; 0) || (x &gt;= this.virtualColumns)))
            rightMost = this.tileset.tileWidth - 1;
         else
            rightMost = solidity.getCurrentTileShape(this.tileset, this.getTile(x, topTile)).getRightSolidPixel(
               this.tileset.tileWidth, this.tileset.tileHeight, areaY - tileTop,
               areaY + areaHeight - 1 - tileTop);
         if ((rightMost != TileShape.minValue) &amp;&amp; ((x &lt; rightTile) || (rightMost &lt;= maxTileRight))) {
            var result = rightMost + x * this.tileset.tileWidth;
            if (result &gt;= areaX)
               return result;
            else
               return MapLayer.noSolid;
         }
      } else {
         var rightMost;
         if (outOfBounds &amp;&amp; ((topTile &lt; 0) || (topTile &gt;= this.virtualRows) || (x &lt; 0) || (x &gt;= this.virtualColumns)))
            rightMost = this.tileset.tileWidth - 1;
         else
            rightMost = solidity.getCurrentTileShape(this.tileset, this.getTile(x, topTile)).getRightSolidPixel(
                this.tileset.tileWidth, this.tileset.tileHeight, areaY - tileTop, this.tileset.tileHeight - 1);
         if ((x == rightTile) &amp;&amp; (rightMost &gt; maxTileRight))
            rightMost = TileShape.minValue;
         var right;
         for (var y = topTile + 1; y &lt; bottomTile; y++) {
            if (outOfBounds &amp;&amp; ((x &lt; 0) || (x &gt;= this.virtualColumns) || (y &lt; 0) || (y &gt;= this.virtualRows)))
               right = this.tileset.tileWidth - 1;
            else
               right = solidity.getCurrentTileShape(this.tileset, this.getTile(x,y)).getRightSolidPixel(
                  this.tileset.tileWidth, this.tileset.tileHeight, 0, this.tileset.tileHeight - 1);
            if ((right &gt; rightMost) &amp;&amp; ((x &lt; rightTile) || (right &lt;= maxTileRight)))
               rightMost = right;
         }
         if (outOfBounds &amp;&amp; ((bottomTile &lt; 0) || (bottomTile &gt;= this.virtualRows) || (x &lt; 0) || (x &gt;= this.virtualColumns)))
            right = this.tileset.tileWidth - 1;
         else
            right = solidity.getCurrentTileShape(this.tileset, this.getTile(x, bottomTile)).getRightSolidPixel(
               this.tileset.tileWidth, this.tileset.tileHeight, 0, (areaY + areaHeight - 1) % this.tileset.tileHeight);
         if ((right &gt; rightMost) &amp;&amp; ((x &lt; rightTile) || (right &lt;= maxTileRight)))
            rightMost = right;
         if (rightMost != TileShape.minValue) {
            var result = rightMost + x * this.tileset.tileWidth;
            if (result &gt;= areaX)
               return result;
            else
               return MapLayer.noSolid;
         }
      }
   }
   return MapLayer.noSolid;
};

MapLayer.prototype.scrollSpriteIntoView = function(sprite, useScrollMargins)
{
   var newX = null;
   var newY = null;
   var marginLeft;
   var marginTop;
   var marginRight;
   var marginBottom;
   if (useScrollMargins)
   {
      marginLeft = this.map.scrollMarginLeft;
      marginTop = this.map.scrollMarginTop;
      marginRight = this.map.scrollMarginRight;
      marginBottom = this.map.scrollMarginBottom;
   }
   else
   {
      marginLeft = 0;
      marginTop = 0;
      marginRight = 0;
      marginBottom = 0;
   }
   if (sprite.x + this.currentX &lt; marginLeft)
   {
      if (this.scrollRateX &gt; 0)
         newX = Math.floor((-sprite.x + marginLeft - this.offsetX) / this.scrollRateX);
      else
         this.currentX = -sprite.x + marginLeft;
   }
   else if (sprite.x + sprite.getSolidWidth() - 1 + this.currentX &gt; viewWidth - marginRight)
   {
      if (this.scrollRateX &gt; 0)
         newX = Math.floor((-sprite.x - sprite.getSolidWidth() + 1 + viewWidth - marginRight - this.offsetX) / this.scrollRateX);
      else
         this.currentX = -sprite.x - sprite.getSolidWidth() + 1 + viewWidth - marginRight;
   }

   if (sprite.y + this.currentY &lt; marginTop)
   {
      if (this.scrollRateY &gt; 0)
         newY = Math.floor((-sprite.y + marginTop - this.offsetY) / this.scrollRateY);
      else
         this.currentY = -sprite.y + marginTop;
   }
   else if (sprite.y + sprite.getSolidHeight() - 1 + this.currentY &gt; viewHeight - marginBottom)
   {
      if (this.scrollRateY &gt; 0)
         newY = Math.floor((-sprite.y - sprite.getSolidHeight() + 1 + viewHeight - marginBottom - this.offsetY) / this.scrollRateY);
      else
         this.currentY = -sprite.Y - sprite.getSolidHeight() + 1 + viewHeight - marginBottom;
   }
   if ((newX != null) || (newY != null))
   {
      if (newX == null) newX = this.currentX;
      if (newY == null) newY = this.currentY;
      this.map.scroll(newX, newY);
   }
}

MapLayer.prototype.processSprites = function() {
   for(var si = 0; si &lt; this.sprites.length; si++)
      this.sprites[si].processed = false;
   for(var si = 0; si &lt; this.sprites.length; si++)
      if (this.sprites[si].isActive)
         this.sprites[si].processRules();
   for(var si = 0; si &lt; this.sprites.length; si++) {
      var sprite = this.sprites[si];
      if (sprite.isDynamic &amp;&amp; !sprite.isActive) {
         for(var categoryKey in sprite.categories) {
            var category = sprite.categories[categoryKey];
            for(var spriteKey in this.spriteCategories[category]) {
               if (this.spriteCategories[category][spriteKey] === sprite)
                  this.spriteCategories[category].splice(spriteKey, 1);
            }
         }
         this.sprites.splice(si, 1);
      }
   }   
}
</Text>
  </SourceCode>
  <SourceCode Name="Plan.js" IsCustomObject="false">
    <Text>function PlanBase() {
   this.TargetDistance = 5;
}

PlanBase.prototype = new GeneralRules();
PlanBase.prototype.constructor = PlanBase;

PlanBase.prototype.isSpriteActive = function(sprite) {
   return sprite.isActive;
};

PlanBase.prototype.mapPlayerToInputs = function(playerNumber, target)
{
   target.mapPlayerToInputs(playerNumber);
};

PlanBase.prototype.followPath = function(sprite, coordinateIndexMember, waitCounterMember) {
   if (sprite.isActive) {
      if (sprite[waitCounterMember] == 0)
         this.pushSpriteTowardCoordinate(sprite, sprite[coordinateIndexMember], 10);
      else
         this.stopSprite(sprite);
      sprite[coordinateIndexMember] = this.checkNextCoordinate(sprite, sprite[coordinateIndexMember], waitCounterMember);
   }
};

PlanBase.prototype.pushSpriteTowardCoordinate = function(sprite, coordinateIndex, force) {
   this.pushSpriteTowardPoint(sprite, this[coordinateIndex], force);
};

PlanBase.prototype.pushSpriteTowardPoint = function(sprite, target, force) {
   var dx = target.x - sprite.x;
   var dy = target.y - sprite.y;

   // Normalize target vector to magnitude of Force parameter
   var dist = Math.sqrt(dx * dx + dy * dy);
   if (dist &gt; 0) {
      dx = dx * force / dist / 10;
      dy = dy * force / dist / 10;

      // Push sprite
      sprite.dx += dx;
      sprite.dy += dy;
   }
};

PlanBase.prototype.checkNextCoordinate = function(sprite, coordinateIndex, waitCounterMember) {
   if (sprite[waitCounterMember] &gt; 0)
   {
      if (++sprite[waitCounterMember] &gt; this[coordinateIndex].weight)
      {
         sprite[waitCounterMember] = 0;
         return (coordinateIndex + 1) % this.m_Coords.length;
      }
      else
         return coordinateIndex;
   }
   var dx = this[coordinateIndex].x - sprite.x;
   var dy = this[coordinateIndex].y - sprite.y;
   if (Math.sqrt(dx * dx + dy * dy) &lt;= this.TargetDistance)
   {
      if (this[coordinateIndex].weight &gt; 0)
         sprite[waitCounterMember]++;
      else
         return (coordinateIndex + 1) % this.m_Coords.length;
   }
   return coordinateIndex;
};

PlanBase.prototype.isSpriteTouching = function(sprite) {
   if (!sprite.isActive)
      return false;

   if ((Math.floor(sprite.x) &lt;= this.left + this.width) &amp;&amp; (Math.floor(sprite.x) + sprite.getSolidWidth() &gt;= this.left) &amp;&amp;
      (Math.floor(sprite.y) &lt; this.top + this.height) &amp;&amp; (Math.floor(sprite.y) + sprite.getSolidHeight() &gt; this.top))
      return true;
   if ((Math.floor(sprite.x) &lt; this.left + this.width) &amp;&amp; (Math.floor(sprite.x) + sprite.getSolidWidth() &gt; this.left) &amp;&amp;
      (Math.floor(sprite.y) &lt;= this.top + this.height) &amp;&amp; (Math.floor(sprite.y) + sprite.getSolidHeight() &gt;= this.top))
      return true;
   return false;
};

PlanBase.prototype.wasSpriteTouching = function(sprite) {
   if ((Math.floor(sprite.oldX) &lt;= this.left + this.width) &amp;&amp; (Math.floor(sprite.oldX) + sprite.getSolidWidth() &gt;= this.left) &amp;&amp;
      (Math.floor(sprite.oldY) &lt; this.top + this.height) &amp;&amp; (Math.floor(sprite.oldY) + sprite.getSolidHeight() &gt; this.top))
      return true;
   if ((Math.floor(sprite.oldX) &lt; this.left + this.width) &amp;&amp; (Math.floor(sprite.oldX) + sprite.getSolidWidth() &gt; this.left) &amp;&amp;
      (Math.floor(sprite.oldY) &lt;= this.top + this.height) &amp;&amp; (Math.floor(sprite.oldY) + sprite.getSolidHeight() &gt;= this.top))
      return true;
   return false;
};

PlanBase.prototype.stopSprite = function(sprite) {
   sprite.dx = sprite.dy = 0;
};

PlanBase.prototype.isInputPressed = function(sprite, input, initialOnly)
{
   return sprite.isInputPressed(input, initialOnly);
};

PlanBase.prototype.drawCounterAsTile = function(tileIndex, counter, style) {
   if (this.left == null)
      return;
   if (counter.currentValue == 0)
      return;
   var map = this.layer.map;
   ts = this.layer.tileset;
   fr = ts.frameSet;
   var disp = gameViewContext;

   var frames = ts.tiles[tileIndex];
   if (typeof frames == "number") {
      frames = [frames];
   } else {
      if (frames instanceof AnimTile)
         frames = frames.getCurFrames();
      if (typeof frames == "number") {
         frames = [frames];
      }
   }

   switch(style)
   {
      case "ClipRightToCounter":
         disp.save();
         disp.beginPath();
         disp.rect(this.left + this.layer.currentX,
            this.top + this.layer.currentY,
            this.width * counter.value / counter.max,
            this.height);
         disp.clip();
         for(var frameIndex in frames)
            fr.frames[frames[frameIndex] % fr.frames.length].draw(disp, this.left, this.top);
         disp.restore();
         break;
      case "StretchRightToCounter":
         throw "Not Implemented";
         break;
      case "RepeatRightToCounter":
         for(var i in frames) {
            var frameIndex = frames[i];
            var fillWidth = this.width * counter.value / counter.max;
            for (var repeat = 0; repeat &lt; Math.ceil(fillWidth / ts.tileWidth); repeat++)
               fr.frames[frameIndex % fr.frames.length].draw(disp,
                  this.left + repeat * ts.tileWidth + this.layer.currentX, this.top + this.layer.currentY);
         }
         break;
      case "ClipTopToCounter":
         throw "Not Implemented";
         break;
      case "StretchTopToCounter":
         throw "Not Implemented";
         break;
      case "RepeatUpToCounter":
         for(var i in frames) {
            var frameIndex = frames[i];
            var fillHeight = this.height * counter.value / counter.max;
            for (var repeat = 0; repeat &lt; Math.ceil(fillHeight / ts.tileHeight); repeat++)
               fr.frames[frameIndex % fr.frames.length].draw(disp,
                  this.left + repeat * ts.tileWidth + this.layer.currentX, this.top - repeat * ts.tileHeight - ts.tileHeight + this.layer.currentY);
         }
         break;
   }
};

function drawText(text, x, y) {
   var charWidth = 13;
   var charHeight = 18;
   var font = graphicSheets.CoolFont;
   if (font == null)
      throw "In order to use DrawText, the project must have a Graphic Sheet named \"CoolFont\"";
   var origX = x;
   for (var charIdx = 0; charIdx &lt; text.length; charIdx++) {
      var curChar = text.charCodeAt(charIdx);
      if (curChar &gt; 32) {
         var col = (curChar - 33) % 24;
         var row = Math.floor((curChar - 33) / 24);
         gameViewContext.drawImage(font.image, col * font.cellWidth, row * font.cellHeight,
            font.cellWidth, font.cellHeight, x, y, font.cellWidth, font.cellHeight);
         x += charWidth;
      }
      else if (curChar == 10)
      {
         x = origX;
         y += charHeight;
      }
   }
}

PlanBase.prototype.drawCounterWithLabel = function(label, counter) {
   if (this.left == null)
      return;   
   drawText(label.toString() + counter.value.toString(), this.left, this.top);
};

PlanBase.prototype.isSpriteWithin = function(sprite, relativePosition) {
   var rp = sprite.getRelativePosition(relativePosition);
   return ((rp.x &gt;= this.left) &amp;&amp; (rp.y &gt;= this.top) &amp;&amp; (rp.x &lt; this.left + this.width) &amp;&amp; (rp.y &lt; this.top + this.height));
};

PlanBase.prototype.getSpriteWithin = function(sprites, relativePosition, skip) {
   if (!sprites) return -1;
   for (var i=skip+1; i &lt; sprites.length; i++) {
      if (sprites[i].isActive &amp;&amp; (this.isSpriteWithin(sprites[i], relativePosition)))
         return i;
   }
   return -1;
};

PlanBase.prototype.copyInputsToOld = function(sprite) {
   sprite.oldInputs = sprite.inputs;
};

PlanBase.prototype.transportToPlan = function(sprite, plan, alignment) {
   if (plan.left == null)
      return;

   switch(alignment) {
      case "TopLeft":
      case "TopCenter":
      case "TopRight":
         sprite.y = plan.top;
         break;
      case "LeftMiddle":
      case "CenterMiddle":
      case "RightMiddle":
         sprite.y = plan.top + Math.floor((plan.height - sprite.getSolidHeight())/2);
         break;
      default:
         sprite.y = plan.top + plan.height - sprite.getSolidHeight();
         break;
   }
   switch(alignment)
   {
      case "TopLeft":
      case "LeftMiddle":
      case "BottomLeft":
         sprite.x = plan.left;
         break;
      case "TopCenter":
      case "CenterMiddle":
      case "BottomCenter":
         sprite.x = plan.left + Math.floor((plan.width - sprite.getSolidWidth())/2);
         break;
      default:
         sprite.x = plan.left + plan.width - sprite.getSolidWidth();
         break;
   }
};

PlanBase.prototype.door = function(target, sprites, trigger) {
   var result = -1;
   for (var i=0; i&lt;sprites.length; i++) {
      if (sprites[i].isActive) {
         var outDoor;
         if (this.isSpriteWithin(sprites[i], "CenterMiddle"))
            outDoor = target;
         else if (target.isSpriteWithin(sprites[i], "CenterMiddle"))
            outDoor = this;
         else
            continue;
         if (((trigger &amp; sprites[i].inputs) == trigger) &amp;&amp;
            ((sprites[i].inputs &amp; trigger) != (sprites[i].oldInputs &amp; trigger)))
         {
            result = i;
            this.transportToPlan(sprites[i], outDoor, "BottomCenter");
            this.copyInputsToOld(sprites[i]);
         }
      }
   }
   return result;
};

PlanBase.prototype.activateSprite = function(target) {
   target.isActive = true;
};


PlanBase.prototype.copyTiles = function(source, target, relativePosition) {
   var src_left = Math.floor(source.left / source.layer.tileset.tileWidth);
   var src_top = Math.floor(source.top / source.layer.tileset.tileHeight);
   var src_right = Math.floor((source.left + source.width - 1) / source.layer.tileset.tileWidth);
   var src_bottom = Math.floor((source.top + source.height - 1) / source.layer.tileset.tileHeight);

   var dst_left = Math.floor(target.left / target.layer.tileset.tileWidth);
   var dst_top = Math.floor(target.top / target.layer.tileset.tileHeight);
   var dst_right = Math.floor((target.left + target.width - 1) / target.layer.tileset.tileWidth);
   var dst_bottom = Math.floor((target.top + target.height - 1) / target.layer.tileset.tileHeight);

   for (var y = src_top; y &lt;= src_bottom; y++) {
      var targety;
      switch(relativePosition) {
         case "TopLeft":
         case "TopCenter":
         case "TopRight":
            targety = dst_top + y - src_top;
            break;
         case "LeftMiddle":
         case "CenterMiddle":
         case "RightMiddle":
            targety = y + Math.floor((dst_top + dst_bottom - src_top - src_bottom) / 2);
            break;
         default:
            targety = dst_bottom + y - src_bottom;
            break;
      }
      if (targety &lt; 0)
         continue;
      if (targety &gt;= target.layer.virtualRows)
         break;
      for (var x = src_left; x &lt;= src_right; x++) {
         var targetx;
         switch(relativePosition) {
            case "TopLeft":
            case "LeftMiddle":
            case "BottomLeft":
               targetx = dst_left + x - src_left;
               break;
            case "TopCenter":
            case "CenterMiddle":
            case "BottomCenter":
               targetx = x + Math.floor((dst_left + dst_right - src_left - src_right) / 2);
               break;
            default:
               targetx = dst_right + x - src_right;
               break;
         }
         if (targetx &lt; 0)
            continue;
         if (targetx &gt;= target.layer.virtualColumns)
            break;
            
         target.layer.setTile(targetx,targety,source.layer.getTile(x,y));
      }
   }
};

PlanBase.prototype.copyTo = function(target, relativePosition) {
   this.copyTiles(this, target, relativePosition);
};

PlanBase.prototype.copyFrom = function(source, relativePosition) {
   this.copyTiles(source, this, relativePosition);
};

PlanBase.prototype.deactivateSprite = function(target) {
   target.isActive = false;
};

PlanBase.prototype.matchSpritePosition = function(target, source) {
   target.oldX = target.x;
   target.oldY = target.y;
   target.x = source.x;
   target.y = source.y;
};

PlanBase.prototype.isSpriteWithin = function(sprite, relativePosition) {
   var rp = sprite.getRelativePosition(relativePosition);
   if ((rp.x &gt;= this.left) &amp;&amp; (rp.y &gt;= this.top) &amp;&amp; (rp.x &lt; this.left + this.width) &amp;&amp; (rp.y &lt; this.top + this.height)) {
      return true;
   }
   return false;
};

PlanBase.prototype.scrollSpriteIntoView = function(sprite, useScrollMargins) {
   this.layer.scrollSpriteIntoView(sprite, useScrollMargins);
};

PlanBase.prototype.testCollisionRect = function(sourceSprite, targets) {
   sourceSprite.testCollisionRect(targets);
};

PlanBase.prototype.addSpriteAtPlan = function(spriteDefinition, relativePosition) {
   var spriteParams = "{\"~1\":\"" + spriteDefinition + "\", \"x\":0,\"y\":0" +
   ",\"dx\":0,\"dy\":0,\"state\":0,\"frame\":0,\"active\":true,\"priority\":0,\"solidityName\":\"\"}";
   
   GeneralRules.lastCreatedSprite = Sprite.deserialize(this.layer, spriteParams);

   if ((this.m_Coords != null) &amp;&amp; (this.m_Coords.length &gt; 0))
   {
      offset = GeneralRules.lastCreatedSprite.getRelativePosition(relativePosition);
      GeneralRules.lastCreatedSprite.x = this[0].x - offset.x;
      GeneralRules.lastCreatedSprite.y = this[0].y - offset.y ;
   }

   GeneralRules.lastCreatedSprite.isDynamic = true;
   GeneralRules.lastCreatedSprite.clearParameters();

   this.layer.sprites.push(GeneralRules.lastCreatedSprite);
   for(var categoryKey in spriteDefinitions[spriteDefinition].prototype.categories) {
      var category = spriteDefinitions[spriteDefinition].prototype.categories[categoryKey];
      if (this.layer.spriteCategories[category] == null)
         this.layer.spriteCategories[category] = [];
      this.layer.spriteCategories[category].push(GeneralRules.lastCreatedSprite);
   }
}

PlanBase.prototype.mapMouseToSprite = function(target, instantMove, hotSpot) {
   target.mapMouseToSprite(instantMove, hotSpot);
}</Text>
  </SourceCode>
  <SourceCode Name="GeneralCustom.cs" IsCustomObject="true" DependsOn="">
    <Text>using System.ComponentModel;

public abstract partial class GeneralRules
{
   /// &lt;summary&gt;
   /// Adds a message to the display.
   /// &lt;/summary&gt;
   /// &lt;param name="Message"&gt;Message text as a quoted string.  Use \r\n to insert new lines
   /// into the message.&lt;/param&gt;
   /// &lt;remarks&gt;Up to 4 messages may be displayed.  No automatic word wrap or centering
   /// is performed.  All formatting is determined by the content of the string.&lt;/remarks&gt;
   [Description("Adds a message to the display. Up to 4 messages may be displayed.")]
   public virtual void ShowQuiz(string Uri)
   {
      ShowMessage("Answer question before proceeding...");
   }
}</Text>
  </SourceCode>
  <SourceCode Name="GeneralCustom.js" IsCustomObject="true" DependsOn="">
    <Text>// Begin GeneralCustom.js

GeneralRules.prototype.showQuiz = function(uri) {
   this.showMessage("Answer question before proceeding...");
   document.getElementById("quizFrame").src=uri;
};
</Text>
  </SourceCode>
  <SourceCode Name="samplequiz.html" IsCustomObject="true" DependsOn="">
    <Text>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="utf-8" /&gt;
&lt;title&gt;samplequiz&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
   This is the first quiz.
&lt;/body&gt;
&lt;/html&gt;</Text>
  </SourceCode>
  <SourceCode Name="initial.html" IsCustomObject="true" DependsOn="">
    <Text>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="utf-8" /&gt;
&lt;title&gt;Initial Quiz Content&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
Seeking knowledge...
&lt;/body&gt;
&lt;/html&gt;</Text>
  </SourceCode>
  <SourceCode Name="PlanCustom.js" IsCustomObject="true" DependsOn="">
    <Text>// Begin PlanCustom.js
PlanBase.prototype.drawBigCounter = function(counter) {
   var charWidth = this.layer.tileset.tileWidth;
   var x = this.left;
   var y = this.top;
   var text = counter.value.toString();
   for (var charIdx = 0; charIdx &lt; text.length; charIdx++) {
      var curChar = text.charCodeAt(charIdx);
      if (curChar &gt; 32) {
         var col = (curChar - 33) % 24;
         var row = Math.floor((curChar - 33) / 24);
         frameSets.LetterFrames.frames[curChar].draw(gameViewContext, x, y);
         x += charWidth;
      }
   }
}</Text>
  </SourceCode>
  <SourceCode Name="PlanCustom.cs" IsCustomObject="true" DependsOn="">
    <Text>using System;
using System.ComponentModel;
using System.Drawing;

public abstract partial class PlanBase
{
   [Description("Display a counter value as a big number.")]
   public virtual void DrawBigCounter(Counter counter)
   {
      System.Diagnostics.Debug.Assert(!PlanRectangle.IsEmpty, "DrawCounterAsTile was called on a plan that does not have a rectangle defined");
      if (PlanRectangle.IsEmpty)
         return;
      
      Display disp = ParentLayer.ParentMap.Display;
      disp.ScissorOff();
      int x = PlanRectangle.Left;
      Frameset fr = ParentLayer.Tileset.GetFrameset(ParentLayer.ParentMap.Display);
      byte[] charBytes = System.Text.Encoding.ASCII.GetBytes(counter.CurrentValue.ToString());
      for (int c = 0; c &lt; charBytes.Length; c++, x += ParentLayer.Tileset.TileWidth)
      {
            int[] SubFrames = ParentLayer.Tileset[charBytes[c]].CurrentFrame;
            for (int nFrame = 0; nFrame &lt; SubFrames.Length; nFrame++)
            {
               Frame f = fr[SubFrames[nFrame]];
               disp.DrawFrame(f.GraphicSheetTexture, f.SourceRect, f.Corners,
                  x, PlanRectangle.Top);
            }
      }
      disp.Flush();
   }
}</Text>
  </SourceCode>
  <Project DisplayMode="m800x600x24" Windowed="true" TitleText="Gravar Knowledge Seeker" StartMap="ChoosePlayer" OverlayMap="Overlay" MaxPlayers="2" MaxViews="2" Credits="SGDK2 Engine: http://sgdk2.sf.net&#xD;&#xA;Graphics: Jeff Cruz (jeffc@comdel.net)&#xD;&#xA;Sound/Music support provided by FMOD: http://www.fmod.org/&#xD;&#xA;Music: Ceekayed (sampo.narhi@gmail.com)&#xD;&#xA;Spectrum Analyzer Display: Seth Marty&#xD;&#xA;">
    <Comments />
  </Project>
  <TileCategory Name="Solid" />
  <TileCategory Name="Uphill">
    <CategorizedTileset Tileset="MainTiles" Name="Uphill">
      <CategoryTile TileValue="10" />
    </CategorizedTileset>
  </TileCategory>
  <TileCategory Name="Downhill">
    <CategorizedTileset Tileset="MainTiles" Name="Downhill">
      <CategoryTile TileValue="128" />
    </CategorizedTileset>
  </TileCategory>
  <TileCategory Name="TopSolid">
    <CategorizedTileset Tileset="MainTiles" Name="TopSolid">
      <CategoryTile TileValue="8" />
      <CategoryTile TileValue="6" />
      <CategoryTile TileValue="7" />
      <CategoryTile TileValue="22" />
    </CategorizedTileset>
  </TileCategory>
  <TileCategory Name="Touchable">
    <CategorizedTileset Tileset="MainTiles" Name="Touchable">
      <CategoryTile TileValue="9" />
    </CategorizedTileset>
  </TileCategory>
</ProjectDataset>